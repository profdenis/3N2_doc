{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Programmation Android","text":"<p>Auteur : Denis Rinfret</p>"},{"location":"#ressources","title":"Ressources","text":""},{"location":"#logiciels","title":"Logiciels","text":"<ol> <li>IntelliJ</li> <li>Android Studio<ul> <li>Recommendation : installer Android Studio \u00e0 l\u2019aide de Jetbrains Toolbox </li> </ul> </li> </ol>"},{"location":"#formations-en-ligne","title":"Formations en ligne","text":"<ol> <li>Kotlin pour les d\u00e9veloppeurs Java</li> <li>Principes de base d\u2019Android avec Compose</li> </ol>"},{"location":"#references","title":"R\u00e9f\u00e9rences","text":"<ol> <li>D\u00e9velopper pour Android</li> <li>Material Theme Builder</li> <li>Ic\u00f4nes Material</li> </ol>"},{"location":"1.%20Kotlin/01-kotlin/","title":"Le langage de programmation Kotlin","text":"<p>Kotlin est un langage de programmation moderne \u00e0 typage statique utilis\u00e9 par plus de 60 % des d\u00e9veloppeurs Android professionnels, qui permet d\u2019am\u00e9liorer la productivit\u00e9, la satisfaction des d\u00e9veloppeurs et la s\u00e9curit\u00e9 du code. https://developer.android.com/kotlin?hl=fr</p> <p>Depuis Google I/O en 2019, Google a d\u00e9clar\u00e9 que le d\u00e9veloppement mobile Android est Kotlin-first. Cela signifie que Google recommande aux d\u00e9veloppeurs d\u2019Android d\u2019utiliser Kotlin comme premier choix de langage de programmation pour le d\u00e9veloppement de nouvelles applications Android. Kotlin offre de nombreux avantages pour le d\u00e9veloppement Android, y compris la \u201cnull safety\u201d (la s\u00e9curit\u00e9 contre valeurs nulles), la clart\u00e9 et la concision du code, et une interop\u00e9rabilit\u00e9 compl\u00e8te avec Java, qui \u00e9tait auparavant le langage recommand\u00e9 pour le d\u00e9veloppement Android.</p> <p>Android\u2019s commitment to Kotlin</p> <p>Documentation de Kotlin</p> <p>Kotlin n\u2019est pas seulement utilis\u00e9 pour d\u00e9velopper des applications Android, mais aussi du c\u00f4t\u00e9 serveur, pour les applications multi-plateformes et l\u2019analyse de donn\u00e9es. D\u00e9tails</p>"},{"location":"1.%20Kotlin/02-kotlin-android/","title":"Kotlin pour Android","text":"<p>Source</p> <p>Le d\u00e9veloppement mobile Android est Kotlin-first depuis Google I/O  en 2019.</p> <p>Plus de 50% des d\u00e9veloppeurs Android professionnels utilisent Kotlin comme leur langage principal, tandis que seulement 30% utilisent Java comme leur langage principal. 70% des d\u00e9veloppeurs dont le langage principal est Kotlin disent que Kotlin les rend plus productifs.</p> <p>En utilisant Kotlin pour le d\u00e9veloppement Android, vous pouvez b\u00e9n\u00e9ficier de :</p> <ul> <li>Moins de code combin\u00e9 \u00e0 une plus grande lisibilit\u00e9. Passez moins de temps \u00e0 \u00e9crire votre code et \u00e0 essayer de   comprendre le code des autres.</li> <li>Moins d\u2019erreurs communes. Les applications construites avec Kotlin ont 20% moins de chances de planter en se   basant   sur les donn\u00e9es internes de Google.</li> <li>Support de Kotlin dans les biblioth\u00e8ques Jetpack. Jetpack Compose   est la bo\u00eete \u00e0 outils moderne recommand\u00e9e par Android pour la construction de l\u2019interface utilisateur native en   Kotlin.   Les extensions KTX ajoutent les fonctionnalit\u00e9s du langage Kotlin, comme   les coroutines, les fonctions d\u2019extension, les lambdas et les param\u00e8tres nomm\u00e9s aux biblioth\u00e8ques Android existantes.</li> <li>Support pour le d\u00e9veloppement multiplateforme. Kotlin Multiplatform permet le d\u00e9veloppement non seulement pour   Android, mais aussi pour iOS, le backend, et les applications web.   Certaines biblioth\u00e8ques Jetpack sont d\u00e9j\u00e0 multiplateformes.   Compose Multiplatform, le cadre d\u2019interface utilisateur   d\u00e9claratif de JetBrains bas\u00e9 sur Kotlin et Jetpack Compose, rend possible le partage des interfaces utilisateur entre   les plates-formes - iOS, Android, desktop et web.</li> <li>Langage et environnement matures. Depuis sa cr\u00e9ation en 2011, Kotlin s\u2019est d\u00e9velopp\u00e9 continuellement, non   seulement en tant que langage, mais aussi en tant qu\u2019\u00e9cosyst\u00e8me tout entier avec un outillage robuste. Aujourd\u2019hui, il   est int\u00e9gr\u00e9 de mani\u00e8re transparente dans Android Studio   et est activement utilis\u00e9 par de nombreuses entreprises pour d\u00e9velopper des applications Android.</li> <li>Interop\u00e9rabilit\u00e9 avec Java. Vous pouvez utiliser Kotlin en combinaison avec le langage de programmation Java dans   vos applications sans avoir \u00e0 migrer tout votre code vers Kotlin.</li> <li>Apprentissage facile. Kotlin est tr\u00e8s facile \u00e0 apprendre, surtout pour les d\u00e9veloppeurs Java.</li> <li>Grande communaut\u00e9. Kotlin b\u00e9n\u00e9ficie d\u2019un grand soutien et de nombreuses contributions de la part de la communaut\u00e9   qui s\u2019\u00e9tend dans le monde entier. Plus de 95% des mille meilleures applications Android utilisent Kotlin.</li> </ul> <p>De nombreuses startups et entreprises du Fortune 500 ont d\u00e9j\u00e0 d\u00e9velopp\u00e9 des applications Android en utilisant Kotlin, voir la liste sur le site web de Google pour les d\u00e9veloppeurs Android.</p>"},{"location":"1.%20Kotlin/03-exercicesP1/","title":"Exercices","text":"<p>GitHub</p> <p>Note</p> <p>Le dernier commit contient les r\u00e9ponses aux exercices. Faites un checkout de l\u2019avant-derni\u00e8re r\u00e9vision pour avoir la structure du code sans les r\u00e9ponses. Vous pouvez cr\u00e9er une branche diff\u00e9rente pour y placer vos r\u00e9ponses.</p>"},{"location":"1.%20Kotlin/03-exercicesP1/#exercice-1-calculer-la-somme-des-chiffres-dun-nombre","title":"Exercice 1 : Calculer la somme des chiffres d\u2019un nombre","text":"<p>\u00c9crivez une fonction qui prend un nombre entier positif en entr\u00e9e et retourne la somme de ses chiffres.</p> <pre><code>fun sumOfDigits(number: Int): Int {\n    // Votre code ici\n}\n</code></pre> <p>Tests unitaires :</p> <pre><code>import org.junit.jupiter.api.Test\nimport kotlin.test.assertEquals\n\nclass Exercise1Test {\n    @Test\n    fun testSumOfDigits() {\n        assertEquals(6, sumOfDigits(123))\n        assertEquals(10, sumOfDigits(1234))\n        assertEquals(15, sumOfDigits(54321))\n        assertEquals(1, sumOfDigits(1000))\n        assertEquals(0, sumOfDigits(0))\n\n        assertEquals(6, sumOfDigits(-123))\n        assertEquals(10, sumOfDigits(-1234))\n    }\n}\n</code></pre>"},{"location":"1.%20Kotlin/03-exercicesP1/#exercice-2-verifier-si-une-chaine-est-un-palindrome","title":"Exercice 2 : V\u00e9rifier si une cha\u00eene est un palindrome","text":"<p>\u00c9crivez une fonction qui prend une cha\u00eene en entr\u00e9e et retourne true si c\u2019est un palindrome, false sinon. Ignorez la casse et les espaces.</p> <pre><code>fun isPalindrome(str: String): Boolean {\n    // Votre code ici\n}\n</code></pre> <p>Tests unitaires :</p> <pre><code>import org.junit.jupiter.api.Test\nimport kotlin.test.assertEquals\n\nclass Exercise2Test {\n    @Test\n    fun testIsPalindrome() {\n        assertEquals(true, isPalindrome(\"A man a plan a canal Panama\"))\n        assertEquals(false, isPalindrome(\"race a car\"))\n        assertEquals(false, isPalindrome(\"hello\"))\n        assertEquals(true, isPalindrome(\"Able was I ere I saw Elba\"))\n        assertEquals(true, isPalindrome(\"\"))\n\n        assertEquals(true, isPalindrome(\"!@#$%^&amp;*()\"))\n        assertEquals(true, isPalindrome(\"  kayak     \"))\n        assertEquals(false, isPalindrome(\"Almost a palindrome\"))\n        assertEquals(true, isPalindrome(\"A Santa at NASA\"))\n    }\n}\n</code></pre>"},{"location":"1.%20Kotlin/03-exercicesP1/#exercice-3-trouver-le-n-ieme-nombre-de-fibonacci","title":"Exercice 3 : Trouver le n-i\u00e8me nombre de Fibonacci","text":"<p>\u00c9crivez une fonction qui prend un entier n en entr\u00e9e et retourne le n-i\u00e8me nombre de la suite de Fibonacci. Supposez que F(0) = 0 et F(1) = 1.</p> <pre><code>fun fibonacci(n: Int): Int {\n    // Votre code ici\n}\n</code></pre> <p>Tests unitaires :</p> <pre><code>import org.junit.jupiter.api.Test\nimport kotlin.test.assertEquals\n\nclass Exercise3Test {\n    @Test\n    fun testFibonacci() {\n        assertEquals(0, fibonacci(0))\n        assertEquals(1, fibonacci(1))\n        assertEquals(1, fibonacci(2))\n        assertEquals(2, fibonacci(3))\n        assertEquals(5, fibonacci(5))\n        assertEquals(55, fibonacci(10))\n\n        assertFailsWith&lt;IllegalArgumentException&gt; {\n            fibonacci(-1)\n        }\n        assertFailsWith&lt;IllegalArgumentException&gt; {\n            fibonacci(-10)\n        }\n    }\n}\n</code></pre>"},{"location":"1.%20Kotlin/03-exercicesP1/#exercice-4-compter-les-occurrences-dun-caractere-dans-une-chaine","title":"Exercice 4 : Compter les occurrences d\u2019un caract\u00e8re dans une cha\u00eene","text":"<p>\u00c9crivez une fonction qui prend une cha\u00eene et un caract\u00e8re en entr\u00e9e, et retourne le nombre d\u2019occurrences de ce caract\u00e8re dans la cha\u00eene. La recherche doit \u00eatre sensible \u00e0 la casse.</p> <pre><code>fun countOccurrences(str: String, char: Char): Int {\n    // Votre code ici\n}\n</code></pre> <p>Tests unitaires :</p> <pre><code>import org.junit.jupiter.api.Test\nimport kotlin.test.assertEquals\n\nclass Exercise4Test {\n    @Test\n    fun testCountOccurrences() {\n        assertEquals(3, countOccurrences(\"Hello, World!\", 'l'))\n        assertEquals(1, countOccurrences(\"Hello, World!\", 'H'))\n        assertEquals(0, countOccurrences(\"Hello, World!\", 'h'))\n        assertEquals(0, countOccurrences(\"Hello, World!\", 'z'))\n        assertEquals(2, countOccurrences(\"Hello, World!\", 'o'))\n        assertEquals(0, countOccurrences(\"\", 'a'))\n\n        assertEquals(0, countOccurrences(\"\", ' '))\n        assertEquals(1, countOccurrences(\"Special @#$%^&amp;*() characters\", '@'))\n        assertEquals(1, countOccurrences(\"Case Sensitive\", 'S'))\n        assertEquals(1, countOccurrences(\"Newline\\ncharacter\", '\\n'))\n    }\n}\n</code></pre>"},{"location":"1.%20Kotlin/03-exercicesP1/#exercice-5-inverser-les-mots-dune-phrase","title":"Exercice 5 : Inverser les mots d\u2019une phrase","text":"<p>\u00c9crivez une fonction qui prend une phrase en entr\u00e9e et retourne une nouvelle phrase avec les mots invers\u00e9s, tout en conservant l\u2019ordre des mots.</p> <pre><code>fun reverseWords(sentence: String): String {\n    // Votre code ici\n}\n</code></pre> <p>Tests unitaires :</p> <pre><code>import org.junit.jupiter.api.Test\nimport kotlin.test.assertEquals\n\nclass Exercise5Test {\n    @Test\n    fun testReverseWords() {\n        assertEquals(\"olleH dlroW\", reverseWords(\"Hello World\"))\n        assertEquals(\"ehT kciuq nworb xof\", reverseWords(\"The quick brown fox\"))\n        assertEquals(\"\", reverseWords(\"\"))\n        assertEquals(\"a\", reverseWords(\"a\"))\n        assertEquals(\"cba fed ihg\", reverseWords(\"abc def ghi\"))\n\n        assertEquals(\"  \", reverseWords(\"  \"))\n        assertEquals(\"olleH, dlroW!\", reverseWords(\"Hello, World!\"))\n        assertEquals(\"elpitluM   secaps\", reverseWords(\"Multiple   spaces\"))\n        assertEquals(\"noitautcnuP, dna secaps .\", reverseWords(\"Punctuation, and spaces .\"))\n    }\n}\n</code></pre>"},{"location":"1.%20Kotlin/03-exercicesP1/#exercice-6-conversion-de-nombres-romains","title":"Exercice 6 : Conversion de nombres romains","text":"<p>Cr\u00e9ez un programme qui convertit les nombres romains en nombres arabes (entre 1 et 3999 inclusivement). Vous devrez probablement cr\u00e9er au moins deux fonctions : une pour valider l\u2019entr\u00e9e et une pour effectuer la conversion.</p> <pre><code>fun convertRomanToArabic(roman: String): Int {\n    // Votre code ici\n}\n\nfun isValidRomanNumeral(roman: String): Boolean {\n    // Votre code ici\n}\n</code></pre> <p>Tests unitaires :</p> <pre><code>import kotlin.test.Test\nimport kotlin.test.assertEquals\nimport kotlin.test.assertFailsWith\n\nclass Exercise6Test {\n    @Test\n    fun testConvertRomanToArabic() {\n        assertEquals(1, convertRomanToArabic(\"I\"))\n        assertEquals(4, convertRomanToArabic(\"IV\"))\n        assertEquals(9, convertRomanToArabic(\"IX\"))\n        assertEquals(1994, convertRomanToArabic(\"MCMXCIV\"))\n        assertEquals(3999, convertRomanToArabic(\"MMMCMXCIX\"))\n\n        assertFailsWith&lt;IllegalArgumentException&gt; {\n            convertRomanToArabic(\"IIII\")\n        }\n        assertFailsWith&lt;IllegalArgumentException&gt; {\n            convertRomanToArabic(\"ABC\")\n        }\n    }\n\n    @Test\n    fun testIsValidRomanNumeral() {\n        assertEquals(true, isValidRomanNumeral(\"MCMLIV\"))\n        assertEquals(false, isValidRomanNumeral(\"IIII\"))\n        assertEquals(false, isValidRomanNumeral(\"XYZ\"))\n        assertEquals(true, isValidRomanNumeral(\"MMMCMXCIX\"))\n        assertEquals(false, isValidRomanNumeral(\"IC\"))\n    }\n}\n</code></pre>"},{"location":"1.%20Kotlin/03-exercicesP1/#exercice-7-jeu-du-morpion-tic-tac-toe","title":"Exercice 7 : Jeu du morpion (Tic-Tac-Toe)","text":"<p>Impl\u00e9mentez un jeu de morpion. Vous aurez besoin de plusieurs fonctions pour g\u00e9rer l\u2019\u00e9tat du jeu, les mouvements des joueurs et v\u00e9rifier s\u2019il y a un gagnant.</p> <pre><code>class TicTacToe {\n    // D\u00e9finissez ici les propri\u00e9t\u00e9s n\u00e9cessaires\n\n    fun makeMove(player: Char, row: Int, col: Int): Boolean {\n        // Votre code ici\n    }\n\n    fun checkWinner(): Char? {\n        // Votre code ici\n    }\n\n    fun isBoardFull(): Boolean {\n        // Votre code ici\n    }\n\n    fun printBoard() {\n        // Votre code ici\n    }\n}\n</code></pre> <p>Tests unitaires :</p> <pre><code>import kotlin.test.Test\nimport kotlin.test.assertEquals\nimport kotlin.test.assertFalse\nimport kotlin.test.assertTrue\n\nclass Exercise7Test {\n    @Test\n    fun testTicTacToe() {\n        val game = TicTacToe()\n\n        assertTrue(game.makeMove('X', 0, 0))\n        assertFalse(game.makeMove('O', 0, 0))\n        assertTrue(game.makeMove('O', 1, 1))\n\n        assertEquals(null, game.checkWinner())\n\n        game.makeMove('X', 0, 1)\n        game.makeMove('X', 0, 2)\n\n        assertEquals('X', game.checkWinner())\n\n        assertTrue(game.isBoardFull())\n    }\n}\n</code></pre>"},{"location":"1.%20Kotlin/03-exercicesP1/#exercice-8-calculatrice-de-notation-polonaise-inverse-rpn","title":"Exercice 8 : Calculatrice de notation polonaise inverse (RPN)","text":"<p>Impl\u00e9mentez une calculatrice qui utilise la notation polonaise inverse. Vous aurez besoin de fonctions pour analyser l\u2019entr\u00e9e, effectuer les op\u00e9rations et g\u00e9rer une pile.</p> <pre><code>class RPNCalculator {\n    private val stack = mutableListOf&lt;Double&gt;()\n\n    fun evaluate(expression: String): Double {\n        // Votre code ici\n    }\n\n    private fun performOperation(operator: String) {\n        // Votre code ici\n    }\n}\n</code></pre> <p>Tests unitaires :</p> <pre><code>import kotlin.test.Test\nimport kotlin.test.assertEquals\nimport kotlin.test.assertFailsWith\n\nclass Exercise8Test {\n    @Test\n    fun testRPNCalculator() {\n        val calculator = RPNCalculator()\n\n        assertEquals(3.0, calculator.evaluate(\"1 2 +\"))\n        assertEquals(23.0, calculator.evaluate(\"5 4 * 3 +\"))\n        assertEquals(141.0, calculator.evaluate(\"3 4 + 5 * 3 -\"))\n\n        assertFailsWith&lt;IllegalArgumentException&gt; {\n            calculator.evaluate(\"1 +\")\n        }\n        assertFailsWith&lt;IllegalArgumentException&gt; {\n            calculator.evaluate(\"1 2 3 +\")\n        }\n    }\n}\n</code></pre>"},{"location":"1.%20Kotlin/03-exercicesP1/#exercice-9-generateur-de-mots-de-passe","title":"Exercice 9 : G\u00e9n\u00e9rateur de mots de passe","text":"<p>Cr\u00e9ez un g\u00e9n\u00e9rateur de mots de passe qui prend en compte diff\u00e9rents crit\u00e8res (longueur, inclusion de chiffres, de symboles, etc.). Vous aurez besoin de fonctions pour g\u00e9n\u00e9rer diff\u00e9rents types de caract\u00e8res et v\u00e9rifier la force du mot de passe.</p> <pre><code>class PasswordGenerator {\n    fun generatePassword(length: Int, includeDigits: Boolean, includeSymbols: Boolean): String {\n        // Votre code ici\n    }\n\n    fun checkPasswordStrength(password: String): String {\n        // Retourne \"Faible\", \"Moyen\" ou \"Fort\"\n        // Votre code ici\n    }\n\n    private fun generateRandomChar(charPool: List&lt;Char&gt;): Char {\n        // Votre code ici\n    }\n}\n</code></pre> <p>Tests unitaires :</p> <pre><code>import kotlin.test.Test\nimport kotlin.test.assertEquals\nimport kotlin.test.assertTrue\n\nclass Exercise9Test {\n    @Test\n    fun testPasswordGenerator() {\n        val generator = PasswordGenerator()\n\n        val password1 = generator.generatePassword(10, true, true)\n        assertEquals(10, password1.length)\n        assertTrue(password1.any { it.isDigit() })\n        assertTrue(password1.any { !it.isLetterOrDigit() })\n\n        val password2 = generator.generatePassword(8, false, false)\n        assertEquals(8, password2.length)\n        assertTrue(password2.all { it.isLetter() })\n\n        assertEquals(\"Fort\", generator.checkPasswordStrength(\"P@ssw0rd123!\"))\n        assertEquals(\"Faible\", generator.checkPasswordStrength(\"password\"))\n    }\n}\n</code></pre>"},{"location":"1.%20Kotlin/03-exercicesP1/#exercice-10-analyseur-de-texte","title":"Exercice 10 : Analyseur de texte","text":"<p>Cr\u00e9ez un analyseur de texte qui peut compter les mots, les phrases, et fournir des statistiques sur le texte. Vous aurez besoin de plusieurs fonctions pour traiter diff\u00e9rents aspects du texte.</p> <pre><code>class TextAnalyzer {\n    fun countWords(text: String): Int {\n        // Votre code ici\n    }\n\n    fun countSentences(text: String): Int {\n        // Votre code ici\n    }\n\n    fun getMostFrequentWord(text: String): String {\n        // Votre code ici\n    }\n\n    fun getAverageWordLength(text: String): Double {\n        // Votre code ici\n    }\n}\n</code></pre> <p>Tests unitaires :</p> <pre><code>import kotlin.test.Test\nimport kotlin.test.assertEquals\n\nclass Exercise10Test {\n    @Test\n    fun testTextAnalyzer() {\n        val analyzer = TextAnalyzer()\n        val text = \"Hello world! This is a test. This test has multiple sentences.\"\n\n        assertEquals(10, analyzer.countWords(text))\n        assertEquals(3, analyzer.countSentences(text))\n        assertEquals(\"this\", analyzer.getMostFrequentWord(text))\n        assertEquals(4.0, analyzer.getAverageWordLength(text))\n    }\n}\n</code></pre>"},{"location":"1.%20Kotlin/04-puissance4/","title":"Exercice formatif : Jeu de Puissance 4 en Kotlin","text":""},{"location":"1.%20Kotlin/04-puissance4/#objectif","title":"Objectif","text":"<p>D\u00e9velopper une version console du jeu \u201cPuissance 4\u201d en Kotlin. Ce travail pratique vous permettra de vous familiariser avec la syntaxe et les concepts de base de Kotlin, sans utiliser encore les fonctionnalit\u00e9s sp\u00e9cifiques \u00e0 Android.</p>"},{"location":"1.%20Kotlin/04-puissance4/#description-du-jeu","title":"Description du jeu","text":"<p>Puissance 4 est un jeu de strat\u00e9gie pour deux joueurs. Le but est d\u2019aligner 4 jetons de sa couleur horizontalement, verticalement ou en diagonale sur une grille de 6 lignes et 7 colonnes.</p>"},{"location":"1.%20Kotlin/04-puissance4/#fonctionnalites-requises","title":"Fonctionnalit\u00e9s requises","text":"<ol> <li>Afficher la grille de jeu dans la console</li> <li>Permettre aux joueurs de placer leurs jetons \u00e0 tour de r\u00f4le</li> <li>V\u00e9rifier la victoire apr\u00e8s chaque coup</li> <li>G\u00e9rer les erreurs (ex : colonne pleine, entr\u00e9e invalide)</li> <li>Proposer de rejouer une partie \u00e0 la fin</li> </ol>"},{"location":"1.%20Kotlin/04-puissance4/#structure-du-projet","title":"Structure du projet","text":"<p>Voici la structure de base du projet avec le code de d\u00e9part :</p> <pre><code>// Fichier: Game.kt\n// package ???\n\nenum class CellState(val symbol: Char) {\n    EMPTY(' '),\n    PLAYER_X('X'),\n    PLAYER_O('O');\n\n    override fun toString(): String = symbol.toString()\n}\n\nclass Game {\n    private val board: Array&lt;Array&lt;CellState&gt;&gt; = Array(6) { Array(7) { CellState.EMPTY } }\n    private var currentPlayer: CellState = CellState.PLAYER_X\n\n    fun play() {\n        // TODO: Impl\u00e9menter la logique principale du jeu\n    }\n\n    fun displayBoard() {\n        // TODO: Afficher la grille de jeu\n    }\n\n    fun makeMove(column: Int): Boolean {\n        // TODO: Placer un jeton dans la colonne sp\u00e9cifi\u00e9e\n        return false\n    }\n\n    fun checkWin(): Boolean {\n        // TODO: V\u00e9rifier s'il y a un gagnant\n        return false\n    }\n\n    fun isBoardFull(): Boolean {\n        // TODO: V\u00e9rifier si la grille est pleine\n        return false\n    }\n\n    fun switchPlayer() {\n        currentPlayer = if (currentPlayer == CellState.PLAYER_X) CellState.PLAYER_O else CellState.PLAYER_X\n    }\n\n    fun getBoardCell(row: Int, col: Int): CellState {\n        return board[row][col]\n    }\n\n    fun getCurrentPlayer(): CellState {\n        return currentPlayer\n    }\n}\n\n// Fichier: Main.kt\n\nfun main() {\n    val game = Game()\n    game.play()\n}\n</code></pre>"},{"location":"1.%20Kotlin/04-puissance4/#tests-unitaires","title":"Tests unitaires","text":"<p>Voici quelques tests unitaires utilisant <code>kotlin.test</code> :</p> <pre><code>// Fichier: GameTest.kt\n\nimport kotlin.test.*\n// importer Game et CellState\n\nclass GameTest {\n\n    @Test\n    fun testInitialBoardIsEmpty() {\n        val game = Game()\n        for (row in 0..5) {\n            for (col in 0..6) {\n                assertEquals(CellState.EMPTY, game.getBoardCell(row, col))\n            }\n        }\n    }\n\n    @Test\n    fun testMakeValidMove() {\n        val game = Game()\n        assertTrue(game.makeMove(3))\n        assertEquals(CellState.PLAYER_X, game.getBoardCell(5, 3))\n    }\n\n    @Test\n    fun testMakeInvalidMove() {\n        val game = Game()\n        assertFalse(game.makeMove(7))  // Colonne invalide\n        assertFalse(game.makeMove(-1)) // Colonne invalide\n    }\n\n    @Test\n    fun testMakeMoveInFullColumn() {\n        val game = Game()\n        repeat(6) { game.makeMove(0) }\n        assertFalse(game.makeMove(0))\n    }\n\n    @Test\n    fun testSwitchPlayer() {\n        val game = Game()\n        assertEquals(CellState.PLAYER_X, game.getCurrentPlayer())\n        game.switchPlayer()\n        assertEquals(CellState.PLAYER_O, game.getCurrentPlayer())\n        game.switchPlayer()\n        assertEquals(CellState.PLAYER_X, game.getCurrentPlayer())\n    }\n\n    @Test\n    fun testCheckWinHorizontal() {\n        val game = Game()\n        repeat(4) { col -&gt;\n            game.makeMove(col)\n            if (col &lt; 3) game.makeMove(col)\n        }\n        assertTrue(game.checkWin())\n    }\n\n    @Test\n    fun testCheckWinVertical() {\n        val game = Game()\n        repeat(4) {\n            game.makeMove(0)\n            if (it &lt; 3) game.makeMove(1)\n        }\n        assertTrue(game.checkWin())\n    }\n\n    @Test\n    fun testCheckWinDiagonalAscending() {\n        val game = Game()\n        game.makeMove(0); game.makeMove(1)\n        game.makeMove(1); game.makeMove(2)\n        game.makeMove(2); game.makeMove(3)\n        game.makeMove(2); game.makeMove(3)\n        game.makeMove(3); game.makeMove(0)\n        game.makeMove(3)\n        assertTrue(game.checkWin())\n    }\n\n    @Test\n    fun testCheckWinDiagonalDescending() {\n        val game = Game()\n        game.makeMove(3); game.makeMove(2)\n        game.makeMove(2); game.makeMove(1)\n        game.makeMove(1); game.makeMove(0)\n        game.makeMove(1); game.makeMove(0)\n        game.makeMove(0); game.makeMove(3)\n        game.makeMove(0)\n        assertTrue(game.checkWin())\n    }\n\n    @Test\n    fun testNoWinYet() {\n        val game = Game()\n        game.makeMove(0); game.makeMove(1)\n        game.makeMove(2); game.makeMove(3)\n        assertFalse(game.checkWin())\n    }\n\n    @Test\n    fun testIsBoardFullWhenFull() {\n        val game = Game()\n        for (col in 0..6) {\n            repeat(6) { game.makeMove(col) }\n        }\n        assertTrue(game.isBoardFull())\n    }\n\n    @Test\n    fun testIsBoardFullWhenNotFull() {\n        val game = Game()\n        game.makeMove(0); game.makeMove(1)\n        assertFalse(game.isBoardFull())\n    }\n}\n</code></pre>"},{"location":"1.%20Kotlin/04-puissance4/#consignes","title":"Consignes","text":"<ol> <li>Cr\u00e9ez un projet kotlin dans IntelliJ.</li> </ol> <ul> <li>Choisissez \u201cGradle\u201d comme \u201cBuild System\u201d, et \u201cKotlin\u201d comme \u201cGradle DSL\u201d.</li> </ul> <ol> <li>Compl\u00e9tez les fonctions de la classe <code>Game</code>.</li> <li>Impl\u00e9mentez la logique du jeu dans la fonction <code>play()</code>.</li> <li>Assurez-vous que le jeu g\u00e8re correctement les entr\u00e9es utilisateur.</li> <li>Si n\u00e9cessaire, compl\u00e9tez et ajoutez des tests unitaires pour couvrir toutes les fonctionnalit\u00e9s.</li> <li>Commentez votre code de mani\u00e8re claire et concise.</li> </ol> <ul> <li>Au d\u00e9but de chaque fichier kotlin (extension <code>.kt</code>), \u00e9crivez votre nom et num\u00e9ro de DA dans un commentaire.</li> </ul>"},{"location":"1.%20Kotlin/04-puissance4/#criteres-devaluation","title":"Crit\u00e8res d\u2019\u00e9valuation","text":"<ul> <li>Exercice formatif</li> </ul>"},{"location":"1.%20Kotlin/04-puissance4/#fonctionnalites-supplementaires","title":"Fonctionnalit\u00e9s suppl\u00e9mentaires","text":"<ul> <li>Impl\u00e9menter un mode contre l\u2019ordinateur avec une IA simple</li> <li>Permettre de sauvegarder et charger une partie</li> </ul>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/01-survol/","title":"Survol de Kotlin","text":"<p>Source</p> <p>Note</p> <p>Ce parcours couvre les fondamentaux du langage de programmation Kotlin et peut \u00eatre compl\u00e8tement r\u00e9alis\u00e9 dans votre navigateur. Aucune installation n\u2019est n\u00e9cessaire.</p> <p>Chaque chapitre de ce parcours contient :</p> <ul> <li>De la th\u00e9orie pour introduire les concepts cl\u00e9s du langage avec des exemples.</li> <li>De la pratique avec des exercices pour tester votre compr\u00e9hension de ce que vous avez appris.</li> <li>Des solutions pour votre r\u00e9f\u00e9rence.</li> </ul> <p>Dans ce parcours, vous apprendrez \u00e0 propos de :</p> <ul> <li>Variables</li> <li>Types de base</li> <li>Collections</li> <li>Flux de commande</li> <li>Fonctions</li> <li>Classes</li> <li>Securit\u00e9 Null</li> </ul> <p>Pour avoir la meilleure exp\u00e9rience, nous recommandons que vous lisiez ces chapitres dans l\u2019ordre. Mais si vous le souhaitez, vous pouvez choisir les chapitres que vous voulez lire.</p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/02-variables/","title":"Variables","text":"<p>Source</p> <p>Voici un programme simple qui imprime \u201cHello, world!\u201d :</p> <pre><code>fun main() {\n    println(\"Hello, world!\")\n    // Hello, world!\n}\n</code></pre> <p>En Kotlin :</p> <ul> <li><code>fun</code> est utilis\u00e9 pour d\u00e9clarer une fonction</li> <li>la fonction <code>main()</code> est le point de d\u00e9part de votre programme</li> <li>le corps d\u2019une fonction est \u00e9crit entre accolades <code>{}</code></li> <li>les fonctions <code>println()</code>   et <code>print()</code> affichent leurs arguments en sortie   standard</li> </ul> <p>Note</p> <p>Les fonctions sont discut\u00e9es plus en d\u00e9tail dans quelques chapitres. Jusque-l\u00e0, tous les exemples utilisent la fonction <code>main()</code>.</p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/02-variables/#variables_1","title":"Variables","text":"<p>Tous les programmes doivent \u00eatre capables de stocker des donn\u00e9es, et les variables vous aident \u00e0 faire justement cela. En Kotlin, vous pouvez d\u00e9clarer :</p> <ul> <li>des variables en lecture seule avec <code>val</code></li> <li>des variables modifiables avec <code>var</code></li> </ul> <p>Pour attribuer une valeur, utilisez l\u2019op\u00e9rateur d\u2019affectation <code>=</code>.</p> <p>Par exemple :</p> <pre><code>fun main() { \n//sampleStart\n    val popcorn = 5    // Il y a 5 bo\u00eetes de popcorn\n    val hotdog = 7     // Il y a 7 hot-dogs\n    var clients = 10   // Il y a 10 clients dans la queue\n\n    // Certains clients quittent la queue\n    clients = 8\n    println(clients)\n    // 8\n//sampleEnd\n}\n</code></pre> <p>Note</p> <p>Les variables peuvent \u00eatre d\u00e9clar\u00e9es en dehors de la fonction <code>main()</code> au d\u00e9but de votre programme. On dit que les variables d\u00e9clar\u00e9es de cette mani\u00e8re sont d\u00e9clar\u00e9es au niveau sup\u00e9rieur.</p> <p>Comme <code>clients</code> est une variable modifiable, sa valeur peut \u00eatre r\u00e9attribu\u00e9e apr\u00e8s la d\u00e9claration.</p> <p>Note</p> <p>Nous recommandons que vous d\u00e9clariez toutes les variables en lecture seule (<code>val</code>) par d\u00e9faut. D\u00e9clarez des variables modifiables (<code>var</code>) seulement si n\u00e9cessaire.</p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/02-variables/#gabarits-de-chaine","title":"Gabarits de cha\u00eene","text":"<p>Il est utile de savoir comment imprimer le contenu des variables en sortie standard. Vous pouvez le faire avec les gabarits de cha\u00eene. Vous pouvez utiliser des expressions de mod\u00e8le pour acc\u00e9der aux donn\u00e9es stock\u00e9es dans les variables et d\u2019autres objets, et les convertir en cha\u00eenes. Une valeur de cha\u00eene est une s\u00e9quence de caract\u00e8res entre guillemets doubles <code>\"</code>. Les expressions de gabarit commencent toujours par un signe dollar <code>$</code>.</p> <p>Pour \u00e9valuer un bout de code dans une expression de gabarit, placez le code entre accolades <code>{}</code> apr\u00e8s le signe dollar <code>$</code>.</p> <p>Par exemple :</p> <pre><code>fun main() { \n//sampleStart\n    val clients = 10\n    println(\"Il y a $clients clients\")\n    // Il y a 10 clients\n\n    println(\"Il y a ${clients + 1} clients\")\n    // Il y a 11 clients\n//sampleEnd\n}\n</code></pre> <p>Pour plus d\u2019informations, voir Gabarits de cha\u00eene.</p> <p>Vous remarquerez qu\u2019il n\u2019y a pas de types d\u00e9clar\u00e9s pour les variables. Kotlin a inf\u00e9r\u00e9 le type lui-m\u00eame : <code>Int</code>. Ce parcours explique les diff\u00e9rents types de base de Kotlin et comment les d\u00e9clarer dans le chapitre suivant.</p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/02-variables/#pratique","title":"Pratique","text":""},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/02-variables/#exercice","title":"Exercice","text":"<p>Compl\u00e9tez le code pour que le programme imprime <code>\"Mary a 20 ans\"</code> en sortie standard :</p> <pre><code>fun main() {\n    val nom = \"Mary\"\n    val age = 20\n    // Ecrivez votre code ici\n}\n</code></pre> R\u00e9ponse <pre><code>fun main() {\n    val nom = \"Mary\"\n    val age = 20\n    println(\"$nom a $age ans\")\n}\n</code></pre> <p></p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/03-types/","title":"Types de base","text":"<p>Source</p> <p>Chaque variable et structure de donn\u00e9es en Kotlin ont un type de donn\u00e9es. Les types de donn\u00e9es sont importants, car ils indiquent au compilateur ce que vous avez le droit de faire avec cette variable ou structure de donn\u00e9es. En d\u2019autres termes, quelles fonctions et propri\u00e9t\u00e9s, elles poss\u00e8dent.</p> <p>Dans le dernier chapitre, Kotlin a pu d\u00e9duire dans l\u2019exemple pr\u00e9c\u00e9dent que <code>customers</code> est de type : <code>Int</code>. La capacit\u00e9 de Kotlin \u00e0 d\u00e9duire le type de donn\u00e9es est appel\u00e9e inf\u00e9rence de type. <code>customers</code> se voit attribuer une valeur enti\u00e8re. De cela, Kotlin d\u00e9duit que <code>customers</code> a un type de donn\u00e9es num\u00e9rique : <code>Int</code>. Par cons\u00e9quent, le compilateur sait que vous pouvez effectuer des op\u00e9rations arithm\u00e9tiques avec <code>customers</code> :</p> <pre><code>fun main() {\n//sampleStart\n    var customers = 10\n\n    // Certains clients quittent la file d'attente\n    customers = 8\n\n    customers = customers + 3 // Exemple d'addition : 11\n    customers += 7            // Exemple d'addition : 18\n    customers -= 3            // Exemple de soustraction : 15\n    customers *= 2            // Exemple de multiplication : 30\n    customers /= 3            // Exemple de division : 10\n\n    println(customers) // 10\n//sampleEnd\n}\n</code></pre> <p>Note</p> <p><code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, et <code>%=</code> sont des op\u00e9rateurs d\u2019affectation augment\u00e9s. Pour plus d\u2019informations, voir Affectations augment\u00e9es.</p> <p>Au total, Kotlin a les types de base suivants :</p> Cat\u00e9gorie Types de base Entiers <code>Byte</code>, <code>Short</code>, <code>Int</code>, <code>Long</code> Entiers non sign\u00e9s <code>UByte</code>, <code>UShort</code>, <code>UInt</code>, <code>ULong</code> Nombres \u00e0 virgule flottante <code>Float</code>, <code>Double</code> Bool\u00e9ens <code>Boolean</code> Caract\u00e8res <code>Char</code> Cha\u00eenes <code>String</code> <p>Pour plus d\u2019informations sur les types de base et leurs propri\u00e9t\u00e9s, voir Types de base.</p> <p>Avec ces connaissances, vous pouvez d\u00e9clarer des variables et les initialiser plus tard. Kotlin peut g\u00e9rer cela tant que les variables sont initialis\u00e9es avant la premi\u00e8re lecture.</p> <p>Pour d\u00e9clarer une variable sans l\u2019initialiser, sp\u00e9cifiez son type avec <code>:</code>.</p> <p>Par exemple :</p> <pre><code>fun main() {\n//sampleStart\n    // Variable d\u00e9clar\u00e9e sans initialisation\n    val d: Int\n    // Variable initialis\u00e9e\n    d = 3\n\n    // Variable de type explicite et initialis\u00e9e\n    val e: String = \"hello\"\n\n    // Les variables peuvent \u00eatre lues car elles ont \u00e9t\u00e9 initialis\u00e9es\n    println(d) // 3\n    println(e) // hello\n//sampleEnd\n}\n</code></pre> <p>Maintenant que vous savez comment d\u00e9clarer des types de base, il est temps d\u2019en savoir plus sur les collections.</p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/03-types/#pratique","title":"Pratique","text":""},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/03-types/#exercice","title":"Exercice","text":"<p>D\u00e9clarez explicitement le type correct pour chaque variable :</p> <pre><code>fun main() {\n    val a = 1000\n    val b = \"log message\"\n    val c = 3.14\n    val d = 100_000_000_000_000\n    val e = false\n    val f = '\\n'\n}\n</code></pre> R\u00e9ponse <pre><code>fun main() {\n    val a: Int = 1000\n    val b: String = \"log message\"\n    val c: Double = 3.14\n    val d: Long = 100_000_000_000\n    val e: Boolean = false\n    val f: Char = '\\n'\n}\n</code></pre> <p></p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/04-collections/","title":"Collections","text":"<p>Source</p> <p>Lors de la programmation, il est utile de pouvoir regrouper des donn\u00e9es dans des structures pour un traitement ult\u00e9rieur. Kotlin fournit des collections pour cet exact propos.</p> <p>Kotlin a les collections suivantes pour regrouper les \u00e9l\u00e9ments :</p> Type de collection Description Listes Collections ordonn\u00e9es d\u2019\u00e9l\u00e9ments Ensembles Collections non ordonn\u00e9es uniques d\u2019\u00e9l\u00e9ments Mappes Ensembles de paires cl\u00e9-valeur o\u00f9 les cl\u00e9s sont uniques et associent \u00e0 une seule valeur <p>Chaque type de collection peut \u00eatre modifiable ou en lecture seule.</p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/04-collections/#liste","title":"Liste","text":"<p>Les listes stockent les \u00e9l\u00e9ments dans l\u2019ordre dans lequel ils sont ajout\u00e9s, et autorisent des \u00e9l\u00e9ments en double.</p> <p>Pour cr\u00e9er une liste en lecture seule (<code>List</code>), utilisez la fonction <code>listOf()</code>.</p> <p>Pour cr\u00e9er une liste modifiable (<code>MutableList</code>), utilisez la fonction <code>mutableListOf()</code>.</p> <p>Lors de la cr\u00e9ation de listes, Kotlin peut inf\u00e9rer le type des \u00e9l\u00e9ments stock\u00e9s. Pour d\u00e9clarer le type explicitement, ajoutez le type entre des crochets <code>&lt;&gt;</code> apr\u00e8s la d\u00e9claration de liste :</p> <pre><code>fun main() { \n//sampleStart\n    // Liste en lecture seule\n    val formesLectureSeule = listOf(\"triangle\", \"carr\u00e9\", \"cercle\")\n    println(formesLectureSeule)\n    // [triangle, carr\u00e9, cercle]\n\n    // Liste modifiable avec d\u00e9claration de type explicite\n    val formes: MutableList&lt;String&gt; = mutableListOf(\"triangle\", \"carr\u00e9\", \"cercle\")\n    println(formes)\n    // [triangle, carr\u00e9, cercle]\n//sampleEnd\n}\n</code></pre> <p>Note</p> <p>Pour pr\u00e9venir les modifications ind\u00e9sirables, vous pouvez obtenir des vues en lecture seule de listes modifiables en les affectant \u00e0 une <code>List</code> : <pre><code>    val formes: MutableList&lt;String&gt; = mutableListOf(\"triangle\", \"carr\u00e9\", \"cercle\")\n    val formesVerrouill\u00e9es: List&lt;String&gt; = formes\n</code></pre> Ceci est \u00e9galement appel\u00e9 casting en anglais.</p> <p>Les listes sont ordonn\u00e9es donc pour acc\u00e9der \u00e0 un \u00e9l\u00e9ment dans une liste, utilisez l\u2019op\u00e9rateur d\u2019acc\u00e8s index\u00e9 <code>[]</code> :</p> <pre><code>fun main() { \n//sampleStart\n    val formesLectureSeule = listOf(\"triangle\", \"carr\u00e9\", \"cercle\")\n    println(\"Le premier \u00e9l\u00e9ment de la liste est : ${formesLectureSeule[0]}\")\n    // Le premier \u00e9l\u00e9ment de la liste est: triangle\n//sampleEnd\n}\n</code></pre> <p>Pour obtenir le premier ou le dernier \u00e9l\u00e9ment d\u2019une liste, utilisez respectivement les fonctions <code>.first()</code> et <code>.last()</code> :</p> <pre><code>fun main() { \n//sampleStart\n    val formesLectureSeule = listOf(\"triangle\", \"carr\u00e9\", \"cercle\")\n    println(\"Le premier \u00e9l\u00e9ment de la liste est : ${formesLectureSeule.first()}\")\n    // Le premier \u00e9l\u00e9ment de la liste est: triangle\n//sampleEnd\n}\n</code></pre> <p>Note</p> <p>Les fonctions <code>.first()</code> et <code>.last()</code> sont des exemples de fonctions d\u2019extension. Pour appeler une fonction d\u2019extension sur un objet, \u00e9crivez le nom de la fonction apr\u00e8s l\u2019objet en l\u2019appendant avec un point <code>.</code></p> <p>Pour plus d\u2019informations sur les fonctions d\u2019extension, voir Fonctions d\u2019extensions. Pour les objectifs de cette visite, vous avez juste besoin de savoir comment les appeler.</p> <p>Pour obtenir le nombre d\u2019\u00e9l\u00e9ments dans une liste, utilisez la fonction <code>.count()</code> :</p> <pre><code>fun main() { \n//sampleStart\n    val formesLectureSeule = listOf(\"triangle\", \"carr\u00e9\", \"cercle\")\n    println(\"Cette liste contient ${formesLectureSeule.count()} \u00e9l\u00e9ments\")\n    // Cette liste contient 3 \u00e9l\u00e9ments\n//sampleEnd\n}\n</code></pre> <p>Pour v\u00e9rifier qu\u2019un \u00e9l\u00e9ment se trouve dans une liste, utilisez l\u2019op\u00e9rateur <code>in</code> :</p> <pre><code>fun main() {\n//sampleStart\n    val formesLectureSeule = listOf(\"triangle\", \"carr\u00e9\", \"cercle\")\n    println(\"cercle\" in formesLectureSeule)\n    // true\n//sampleEnd\n}\n</code></pre> <p>Pour ajouter ou supprimer des \u00e9l\u00e9ments d\u2019une liste modifiable, utilisez respectivement les fonctions <code>.add()</code> et <code>.remove()</code> :</p> <pre><code>fun main() { \n//sampleStart\n    val formes: MutableList&lt;String&gt; = mutableListOf(\"triangle\", \"carr\u00e9\", \"cercle\")\n    // Ajoute \"pentagone\" \u00e0 la liste\n    formes.add(\"pentagone\") \n    println(formes)  \n    // [triangle, carr\u00e9, cercle, pentagone]\n\n    // Supprime le premier \"pentagone\" de la liste\n    formes.remove(\"pentagone\") \n    println(formes)  \n    // [triangle, carr\u00e9, cercle]\n//sampleEnd\n}\n</code></pre>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/04-collections/#ensemble","title":"Ensemble","text":"<p>Alors que les listes sont ordonn\u00e9es et autorisent des \u00e9l\u00e9ments en double, les ensembles sont non ordonn\u00e9s et stockent uniquement des \u00e9l\u00e9ments uniques.</p> <p>Pour cr\u00e9er un ensemble en lecture seule (<code>Set</code>), utilisez la fonction <code>setOf()</code>.</p> <p>Pour cr\u00e9er un ensemble modifiable (<code>MutableSet</code>), utilisez la fonction <code>mutableSetOf()</code>.</p> <p>Lors de la cr\u00e9ation des ensembles, Kotlin peut inf\u00e9rer le type des \u00e9l\u00e9ments stock\u00e9s. Pour d\u00e9clarer explicitement le type, ajoutez le type entre des crochets <code>&lt;&gt;</code> apr\u00e8s la d\u00e9claration de l\u2019ensemble :</p> <pre><code>fun main() {\n//sampleStart\n    // Ensemble en lecture seule\n    val fruitsLectureSeule = setOf(\"pomme\", \"banane\", \"cerise\", \"cerise\")\n\n    // Ensemble modifiable avec d\u00e9claration de type explicite\n    val fruits: MutableSet&lt;String&gt; = mutableSetOf(\"pomme\", \"banane\", \"cerise\", \"cerise\")\n\n    println(fruitsLectureSeule)\n    // [pomme, banane, cerise]\n//sampleEnd\n}\n</code></pre> <p>Vous pouvez voir dans l\u2019exemple pr\u00e9c\u00e9dent que comme les ensembles ne contiennent que des \u00e9l\u00e9ments uniques, l\u2019\u00e9l\u00e9ment <code>\"cerise\"</code> en double est supprim\u00e9.</p> <p>Note</p> <p>Pour pr\u00e9venir les modifications ind\u00e9sirables, obtenez des vues en lecture seule des ensembles modifiables en les affectant \u00e0 <code>Set</code> :</p> <p><code>val fruits: MutableSet&lt;String&gt; = mutableSetOf(\"pomme\", \"banane\", \"cerise\", \"cerise\")</code></p> <p><code>val fruitsVerrouill\u00e9s: Set&lt;String&gt; = fruits</code></p> <p>Note</p> <p>Comme les ensembles sont non ordonn\u00e9s, vous ne pouvez pas acc\u00e9der \u00e0 un \u00e9l\u00e9ment \u00e0 un index particulier.</p> <p>Pour obtenir le nombre d\u2019\u00e9l\u00e9ments dans un ensemble, utilisez la fonction <code>.count()</code> :</p> <pre><code>fun main() { \n//sampleStart\n    val fruitsLectureSeule = setOf(\"pomme\", \"banane\", \"cerise\", \"cerise\")\n    println(\"Cet ensemble contient ${fruitsLectureSeule.count()} \u00e9l\u00e9ments\")\n    // Cet ensemble contient 3 \u00e9l\u00e9ments\n//sampleEnd\n}\n</code></pre> <p>Pour v\u00e9rifier qu\u2019un \u00e9l\u00e9ment se trouve dans un ensemble, utilisez l\u2019op\u00e9rateur <code>in</code> :</p> <pre><code>fun main() {\n//sampleStart\n    val fruitsLectureSeule = setOf(\"pomme\", \"banane\", \"cerise\", \"cerise\")\n    println(\"banane\" in fruitsLectureSeule)\n    // true\n//sampleEnd\n}\n</code></pre> <p>Pour ajouter ou supprimer des \u00e9l\u00e9ments d\u2019un ensemble modifiable, utilisez respectivement les fonctions <code>.add()</code> et <code>.remove()</code> :</p> <pre><code>fun main() { \n//sampleStart\n    val fruits: MutableSet&lt;String&gt; = mutableSetOf(\"pomme\", \"banane\", \"cerise\", \"cerise\")\n    fruits.add(\"dragonfruit\")    // Ajoute \"dragonfruit\" \u00e0 l'ensemble\n    println(fruits)              // [pomme, banane, cerise, dragonfruit]\n\n    fruits.remove(\"dragonfruit\") // Supprime \"dragonfruit\" de l'ensemble\n    println(fruits)              // [pomme, banane, cerise]\n//sampleEnd\n}\n</code></pre> <p>Pour obtenir une collection des cl\u00e9s ou des valeurs d\u2019une mappe, utilisez les propri\u00e9t\u00e9s <code>keys</code> et <code>values</code> respectivement :</p> <pre><code>fun main() {\n//sampleStart\n    val menuJusLectureSeule = mapOf(\"pomme\" to 100, \"kiwi\" to 190, \"orange\" to 100)\n    println(menuJusLectureSeule.keys)\n    // [pomme, kiwi, orange]\n    println(menuJusLectureSeule.values)\n    // [100, 190, 100]\n//sampleEnd\n}\n</code></pre> <p>Note</p> <p><code>keys</code> et <code>values</code> sont des exemples de  propri\u00e9t\u00e9s d\u2019un objet. Pour acc\u00e9der \u00e0 la propri\u00e9t\u00e9 d\u2019un objet, \u00e9crivez le nom de la propri\u00e9t\u00e9 apr\u00e8s l\u2019objet, en ajoutant un point <code>.</code>. Les propri\u00e9t\u00e9s sont discut\u00e9es plus en d\u00e9tail dans le chapitre Classes. \u00c0 ce stade de la visite, vous devez seulement savoir comment y acc\u00e9der.</p> <p>Pour v\u00e9rifier qu\u2019une cl\u00e9 ou une valeur est dans une mappe, utilisez l\u2019op\u00e9rateur <code>in</code> :</p> <pre><code>fun main() {\n//sampleStart\n    val menuJusLectureSeule = mapOf(\"pomme\" to 100, \"kiwi\" to 190, \"orange\" to 100)\n    println(\"orange\" in menuJusLectureSeule.keys)\n    // true\n    println(200 in menuJusLectureSeule.values)\n    // false\n//sampleEnd\n}\n</code></pre> <p>Pour plus d\u2019informations sur ce que vous pouvez faire avec les collections, voir Collections.</p> <p>Maintenant que vous connaissez les types de base et comment g\u00e9rer les collections, il est temps d\u2019explorer la logique de contr\u00f4le que vous pouvez utiliser dans vos programmes.</p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/04-collections/#pratique","title":"Pratique","text":""},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/04-collections/#exercice-1","title":"Exercice 1","text":"<p>Vous disposez d\u2019une liste de nombres \u201cverts\u201d et d\u2019une liste de nombres \u201crouges\u201d. Compl\u00e9tez le code pour imprimer combien de nombres il y a en tout.</p> <pre><code>fun main() {\n    val nombresVerts = listOf(1, 4, 23)\n    val nombresRouges = listOf(17, 2)\n    // \u00c9crivez votre code ici\n}\n</code></pre> R\u00e9ponse <pre><code>fun main() {\n    val nombresVerts = listOf(1, 4, 23)\n    val nombresRouges = listOf(17, 2)\n    val totalCount = nombresVerts.count() + nombresRouges.count()\n    println(totalCount)\n}\n</code></pre> <p></p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/04-collections/#exercice-2","title":"Exercice 2","text":"<p>Vous avez un ensemble de protocoles pris en charge par votre serveur. Un utilisateur demande \u00e0 utiliser un protocole particulier. Compl\u00e9tez le programme pour v\u00e9rifier si le protocole demand\u00e9 est pris en charge ou non (<code>isSupported</code> doit \u00eatre une valeur bool\u00e9enne).</p> <pre><code>fun main() {\n    val SUPPORTED = setOf(\"HTTP\", \"HTTPS\", \"FTP\")\n    val requested = \"smtp\"\n    val isSupported = // \u00c9crivez votre code ici \n    println(\"Support pour $requested: $isSupported\")\n}\n</code></pre> Astuce  Assurez-vous de v\u00e9rifier le protocole demand\u00e9 en majuscule. Vous pouvez utiliser la fonction <code>.uppercase()</code> pour vous aider.  <p></p> R\u00e9ponse <pre><code>fun main() {\n    val SUPPORTED = setOf(\"HTTP\", \"HTTPS\", \"FTP\")\n    val requested = \"smtp\"\n    val isSupported = requested.uppercase() in SUPPORTED\n    println(\"Support pour $requested: $isSupported\")\n}\n</code></pre> <p></p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/04-collections/#exercice-3","title":"Exercice 3","text":"<p>D\u00e9finissez une mappe qui relie les nombres entiers de 1 \u00e0 3 \u00e0 leur orthographe correspondante. Utilisez cette mappe pour \u00e9peler le nombre donn\u00e9.</p> <pre><code>fun main() {\n    val number2word = // \u00c9crivez votre code ici\n    val n = 2\n    println(\"$n est \u00e9pel\u00e9 comme '${&lt;\u00c9crivez votre code ici&gt;}'\")\n}\n</code></pre> R\u00e9ponse <pre><code>fun main() {\n    val number2word = mapOf(1 to \"un\", 2 to \"deux\", 3 to \"trois\")\n    val n = 2\n    println(\"$n est \u00e9pel\u00e9 comme '${number2word[n]}'\")\n}\n</code></pre> <p></p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/05-flot/","title":"Flot de contr\u00f4le","text":"<p>Source</p> <p>Comme les autres langages de programmation, Kotlin est capable de prendre des d\u00e9cisions en fonction de l\u2019\u00e9valuation d\u2019un fragment de code \u00e0 vrai. De tels fragments de code sont appel\u00e9s expressions conditionnelles. Kotlin est \u00e9galement capable de cr\u00e9er et naviguer \u00e0 travers des boucles.</p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/05-flot/#expressions-conditionnelles","title":"Expressions conditionnelles","text":"<p>Kotlin propose <code>if</code> et <code>when</code> pour v\u00e9rifier des expressions conditionnelles.</p> <p>Note</p> <p>Si vous devez choisir entre <code>if</code> et <code>when</code>, nous vous recommandons d\u2019utiliser <code>when</code>, car cela conduit \u00e0 des programmes plus robustes et plus s\u00fbrs.</p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/05-flot/#if","title":"If","text":"<p>Pour utiliser <code>if</code>, ajoutez l\u2019expression conditionnelle entre parenth\u00e8ses <code>()</code> et l\u2019action \u00e0 effectuer si le r\u00e9sultat est vrai \u00e0 l\u2019int\u00e9rieur des accolades <code>{}</code> :</p> <pre><code>fun main() {\n//sampleStart\n    val d: Int\n    val check = true\n\n    if (check) {\n        d = 1\n    } else {\n        d = 2\n    }\n\n    println(d)\n    // 1\n//sampleEnd\n}\n</code></pre> <p>Il n\u2019y a pas d\u2019op\u00e9rateur ternaire <code>condition ? then : else</code> en Kotlin. En revanche, <code>if</code> peut \u00eatre utilis\u00e9 comme une expression. S\u2019il n\u2019y a qu\u2019une seule ligne de code par action, les accolades <code>{}</code> sont facultatives :</p> <pre><code>fun main() {\n//sampleStart\n    val a = 1\n    val b = 2\n\n    println(if (a &gt; b) a else b) // Returns a value: 2\n//sampleEnd\n}\n</code></pre>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/05-flot/#when","title":"When","text":"<p>Utilisez <code>when</code> lorsque vous avez une expression conditionnelle avec plusieurs branches. <code>when</code> peut \u00eatre utilis\u00e9 soit comme une instruction, soit comme une expression.</p> <p>Voici un exemple d\u2019utilisation de <code>when</code> en tant qu\u2019instruction :</p> <ul> <li>Placez l\u2019expression conditionnelle entre parenth\u00e8ses <code>()</code> et les actions \u00e0 effectuer   \u00e0 l\u2019int\u00e9rieur des accolades <code>{}</code>.</li> <li>Utilisez <code>-&gt;</code> dans chaque branche pour s\u00e9parer chaque condition de chaque action.</li> </ul> <pre><code>fun main() {\n//sampleStart\n    val obj = \"Hello\"\n\n    when (obj) {\n        // V\u00e9rifie si obj est \u00e9gal \u00e0 \"1\"\n        \"1\" -&gt; println(\"Un\")\n        // V\u00e9rifie si obj est \u00e9gal \u00e0 \"Hello\"\n        \"Hello\" -&gt; println(\"Salutation\")\n        // Instruction par d\u00e9faut\n        else -&gt; println(\"Inconnu\")\n    }\n    // Salutation\n//sampleEnd\n}\n</code></pre> <p>Note</p> <p>Notez que toutes les conditions des branches sont v\u00e9rifi\u00e9es s\u00e9quentiellement jusqu\u2019\u00e0 ce que l\u2019une d\u2019entre elles soit satisfaite. Seule la premi\u00e8re branche ad\u00e9quate est donc ex\u00e9cut\u00e9e.</p> <p>Voici un exemple d\u2019utilisation de <code>when</code> en tant qu\u2019expression. La syntaxe <code>when</code> est imm\u00e9diatement assign\u00e9e \u00e0 une variable :</p> <pre><code>fun main() {\n//sampleStart    \n    val obj = \"Hello\"\n\n    val result = when (obj) {\n        // Si obj est \u00e9gal \u00e0 \"1\", assigne \"Un\" \u00e0 result\n        \"1\" -&gt; \"Un\"\n        // Si obj est \u00e9gal \u00e0 \"Hello\", assigne \"Salutation\" \u00e0 result\n        \"Hello\" -&gt; \"Salutation\"\n        // Assign \"Inconnu\" \u00e0 result si aucune des conditions pr\u00e9c\u00e9dentes n'est satisfaite\n        else -&gt; \"Inconnu\"\n    }\n    println(result)\n    // Salutation\n//sampleEnd\n}\n</code></pre> <p>Si <code>when</code> est utilis\u00e9 comme une expression, la branche <code>else</code> est obligatoire, \u00e0 moins que le compilateur puisse d\u00e9tecter que tous les cas possibles sont couverts par les conditions des branches.</p> <p>L\u2019exemple pr\u00e9c\u00e9dent a montr\u00e9 que <code>when</code> est utile pour faire correspondre une variable. <code>when</code> est \u00e9galement utile lorsque vous avez besoin de v\u00e9rifier une cha\u00eene d\u2019expressions bool\u00e9ennes :</p> <pre><code>fun main() {\n//sampleStart\n    val temp = 18\n\n    val description = when {\n        // Si temp &lt; 0 est vrai, assigne \"voir froid\" \u00e0 description\n        temp &lt; 0 -&gt; \"tr\u00e8s froid\"\n        // Si temp &lt; 10 est vrai, assigne \"un peu froid\" \u00e0 description\n        temp &lt; 10 -&gt; \"un peu froid\"\n        // Si temp &lt; 20 est vrai, assigne \"chaud\" \u00e0 description\n        temp &lt; 20 -&gt; \"chaud\"\n        // Assigne \"tr\u00e8s chaud\" \u00e0 description si aucune des conditions pr\u00e9c\u00e9dentes n'est satisfaite\n        else -&gt; \"tr\u00e8s chaud\"\n    }\n    println(description)\n    // chaud\n//sampleEnd\n}\n</code></pre>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/05-flot/#intervalles","title":"Intervalles","text":"<p>Avant de parler des boucles, il est utile de savoir comment construire des intervalles pour que les boucles puissent les parcourir.</p> <p>La fa\u00e7on la plus courante de cr\u00e9er un intervalle en Kotlin est d\u2019utiliser l\u2019op\u00e9rateur <code>..</code>. Par exemple, <code>1..4</code> \u00e9quivaut \u00e0 <code>1, 2, 3, 4</code>.</p> <p>Pour d\u00e9clarer un intervalle qui n\u2019inclut pas la valeur de fin, utilisez l\u2019op\u00e9rateur <code>..&lt;</code>. Par exemple, <code>1..&lt;4</code> \u00e9quivaut \u00e0 <code>1, 2, 3</code>.</p> <p>Pour d\u00e9clarer un intervalle en ordre inverse, utilisez <code>downTo.</code>. Par exemple, <code>4 downTo 1</code> \u00e9quivaut \u00e0 <code>4, 3, 2, 1</code>.</p> <p>Pour d\u00e9clarer un intervalle qui augmente en pas qui n\u2019est pas de 1, utilisez <code>step</code> et la valeur d\u2019incr\u00e9ment souhait\u00e9e. Par exemple, <code>1..5 step 2</code> \u00e9quivaut \u00e0 <code>1, 3, 5</code>.</p> <p>Il est \u00e9galement possible de faire la m\u00eame chose avec des intervalles de caract\u00e8res <code>Char</code> :</p> <ul> <li><code>'a'..'d'</code> \u00e9quivaut \u00e0 <code>'a', 'b', 'c', 'd'</code></li> <li><code>'z' downTo 's' step 2</code> \u00e9quivaut \u00e0 <code>'z', 'x', 'v', 't'</code></li> </ul>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/05-flot/#boucles","title":"Boucles","text":"<p>Les deux structures de boucle les plus courantes en programmation sont <code>for</code> et <code>while</code>. Utilisez <code>for</code> pour it\u00e9rer sur une s\u00e9rie de valeurs et effectuer une action. Utilisez <code>while</code> pour poursuivre une action jusqu\u2019\u00e0 ce qu\u2019une condition particuli\u00e8re soit satisfaite.</p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/05-flot/#pour","title":"Pour","text":"<p>En utilisant votre nouvelle connaissance des intervalles, vous pouvez cr\u00e9er une boucle <code>for</code> qui it\u00e8re sur les num\u00e9ros 1 \u00e0 5 et imprime le num\u00e9ro \u00e0 chaque fois.</p> <p>Placez l\u2019it\u00e9rateur et l\u2019intervalle entre parenth\u00e8ses <code>()</code> avec le mot-cl\u00e9 <code>in</code>. Ajoutez l\u2019action que vous voulez terminer \u00e0 l\u2019int\u00e9rieur des accolades <code>{}</code> :</p> <pre><code>fun main() {\n//sampleStart\n    for (number in 1..5) {\n        // number est l'it\u00e9rateur et 1..5 est l'intervalle\n        print(number)\n    }\n    // 12345\n//sampleEnd\n}\n</code></pre> <p>Les collections peuvent \u00e9galement \u00eatre parcourues par des boucles :</p> <pre><code>fun main() {\n//sampleStart\n    val cakes = listOf(\"carotte\", \"fromage\", \"chocolat\")\n\n    for (cake in cakes) {\n        println(\"Miam, c'est un g\u00e2teau \u00e0 la $cake!\")\n    }\n    // Miam, c'est un g\u00e2teau \u00e0 la carotte!\n    // Miam, c'est un g\u00e2teau au fromage!\n    // Miam, c'est un g\u00e2teau au chocolat!\n//sampleEnd\n}\n</code></pre>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/05-flot/#tant-que","title":"Tant que","text":"<p><code>while</code> peut \u00eatre utilis\u00e9 de deux fa\u00e7ons :</p> <ul> <li>Pour ex\u00e9cuter un bloc de code tant qu\u2019une expression conditionnelle est vraie. (<code>while</code>)</li> <li>Pour ex\u00e9cuter le bloc de code en premier, puis v\u00e9rifier l\u2019expression conditionnelle. (<code>do-while</code>)</li> </ul> <p>Dans le premier cas d\u2019utilisation (<code>while</code>) :</p> <ul> <li>D\u00e9clarez l\u2019expression conditionnelle pour que votre boucle continue entre parenth\u00e8ses <code>()</code>.</li> <li>Ajoutez l\u2019action que vous voulez effectuer \u00e0 l\u2019int\u00e9rieur des accolades <code>{}</code>.</li> </ul> <p>Note</p> <p>Les exemples suivants utilisent l\u2019op\u00e9rateur d\u2019incr\u00e9mentation <code>++</code> pour incr\u00e9menter la valeur de la variable <code>g\u00e2teauxMang\u00e9s</code>.</p> <pre><code>fun main() {\n//sampleStart\n    var g\u00e2teauxMang\u00e9s = 0\n    while (g\u00e2teauxMang\u00e9s &lt; 3) {\n        println(\"Mange un g\u00e2teau\")\n        g\u00e2teauxMang\u00e9s++\n    }\n    // Mange un g\u00e2teau\n    // Mange un g\u00e2teau\n    // Mange un g\u00e2teau\n//sampleEnd\n}\n</code></pre> <p>Dans le second cas (<code>do-while</code>) :</p> <ul> <li>D\u00e9clarez l\u2019expression conditionnelle pour que votre boucle continue entre parenth\u00e8ses <code>()</code>.</li> <li>D\u00e9finissez l\u2019action que vous voulez effectuer entre les accolades <code>{}</code> avec le mot-cl\u00e9 <code>do</code>.</li> </ul> <pre><code>fun main() {\n//sampleStart\n    var g\u00e2teauxMang\u00e9s = 0\n    var g\u00e2teauxCuits = 0\n    while (g\u00e2teauxMang\u00e9s &lt; 3) {\n        println(\"Mange un g\u00e2teau\")\n        g\u00e2teauxMang\u00e9s++\n    }\n    do {\n        println(\"Cuit un g\u00e2teau\")\n        g\u00e2teauxCuits++\n    } while (g\u00e2teauxCuits &lt; g\u00e2teauxMang\u00e9s)\n    // Mange un g\u00e2teau\n    // Mange un g\u00e2teau\n    // Mange un g\u00e2teau\n    // Cuit un g\u00e2teau\n    // Cuit un g\u00e2teau\n    // Cuit un g\u00e2teau\n//sampleEnd\n}\n</code></pre> <p>Pour plus d\u2019informations et d\u2019exemples sur les expressions conditionnelles et les boucles, voir Conditions et boucles.</p> <p>Maintenant que vous connaissez les fondamentaux du flux de contr\u00f4le de Kotlin, il est temps d\u2019apprendre comment \u00e9crire vos propres fonctions.</p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/05-flot/#pratique","title":"Pratique","text":""},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/05-flot/#exercice-1","title":"Exercice 1","text":"<p>En utilisant une expression <code>when</code>, mettez \u00e0 jour le programme suivant de sorte que lorsque vous saisissez les noms des boutons du GameBoy, les actions soient affich\u00e9es en sortie.</p> Bouton Action A Oui B Non X Menu Y Rien Autre Il n\u2019y a pas de bouton de ce genre <pre><code>fun main() {\n    val bouton = \"A\"\n\n    println(\n        // \u00c9crivez votre code ici\n    )\n}\n</code></pre> R\u00e9ponse <pre><code>fun main() {\n    val bouton = \"A\"\n    println(\n        when (bouton) {\n            \"A\" -&gt; \"Oui\"\n            \"B\" -&gt; \"Non\"\n            \"X\" -&gt; \"Menu\"\n            \"Y\" -&gt; \"Rien\"\n            else -&gt; \"Il n'y a pas de bouton de ce genre\"\n        }\n    )\n}\n</code></pre> <p></p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/05-flot/#exercice-2","title":"Exercice 2","text":"<p>Vous avez un programme qui compte les tranches de pizza jusqu\u2019\u00e0 ce qu\u2019il y ait une pizza enti\u00e8re avec 8 tranches. Refactorisez ce programme de deux fa\u00e7ons :</p> <ul> <li>Utilisez une boucle <code>while</code>.</li> <li>Utilisez une boucle <code>do-while</code>.</li> </ul> <pre><code>fun main() {\n    var tranchesPizza = 0\n    // Commencez le refactoring ici\n    tranchesPizza++\n    println(\"Il n'y a que $tranchesPizza tranche/s de pizza :(\")\n    tranchesPizza++\n    println(\"Il n'y a que $tranchesPizza tranche/s de pizza :(\")\n    tranchesPizza++\n    println(\"Il n'y a que $tranchesPizza tranche/s de pizza :(\")\n    tranchesPizza++\n    println(\"Il n'y a que $tranchesPizza tranche/s de pizza :(\")\n    tranchesPizza++\n    println(\"Il n'y a que $tranchesPizza tranche/s de pizza :(\")\n    tranchesPizza++\n    println(\"Il n'y a que $tranchesPizza tranche/s de pizza :(\")\n    tranchesPizza++\n    println(\"Il n'y a que $tranchesPizza tranche/s de pizza :(\")\n    tranchesPizza++\n    // Terminez le refactoring ici\n    println(\"Il y a $tranchesPizza tranches de pizza. Hourra! Nous avons une pizza enti\u00e8re! :D\")\n}\n</code></pre> R\u00e9ponse <pre><code>fun main() {\n    var tranchesPizza = 0\n    while (tranchesPizza &lt; 7 ) {\n        tranchesPizza++\n        println(\"Il n 'y a que $tranchesPizza tranche/s de pizza :(\")\n    }\n    tranchesPizza++\n    println(\"Il y a $tranchesPizza tranches de pizza. Hourra!Nous avons une pizza enti\u00e8re!:D\")\n}\n</code></pre> <p></p> R\u00e9ponse <pre><code>fun main() {\n    var tranchesPizza = 0\n    tranchesPizza++\n    do {\n        println(\"Il n 'y a que $tranchesPizza tranche/s de pizza :(\")\n        tranchesPizza++\n    } while (tranchesPizza &lt; 8 )\n    println(\"Il y a $tranchesPizza tranches de pizza. Hourra!Nous avons une pizza enti\u00e8re!:D\")\n}\n</code></pre> <p></p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/05-flot/#exercice-3","title":"Exercice 3","text":"<p>\u00c9crivez un programme qui simule le jeu Fizz buzz. Votre t\u00e2che est d\u2019imprimer les nombres de 1 \u00e0 100 de mani\u00e8re incr\u00e9mentielle, en rempla\u00e7ant tout nombre divisible par trois par le mot \u201cfizz\u201d, et tout nombre divisible par cinq par le mot \u201cbuzz\u201d. Tout nombre divisible \u00e0 la fois par 3 et 5 doit \u00eatre remplac\u00e9 par le mot \u201cfizzbuzz\u201d.</p> Indice  Utilisez une boucle <code>for</code> pour compter les num\u00e9ros et une expression <code>when</code> pour d\u00e9cider de ce qu'il faut imprimer \u00e0 chaque \u00e9tape.  <p></p> <pre><code>fun main() {\n    // \u00c9crivez votre code ici\n}\n</code></pre> R\u00e9ponse <pre><code>fun main() {\n    for (number in 1..100) {\n        println(\n            when {\n                number % 15 == 0 -&gt; \"fizzbuzz\"\n                number % 3 == 0 -&gt; \"fizz\"\n                number % 5 == 0 -&gt; \"buzz\"\n                else -&gt; \"$number\"\n            }\n        )\n    }\n}\n</code></pre> <p></p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/05-flot/#exercice-4","title":"Exercice 4","text":"<p>Vous avez une liste de mots. Utilisez <code>for</code> et <code>if</code> pour imprimer seulement les mots qui commencent par la lettre <code>l</code>.</p> Indice  Utilisez la fonction  <code>.startsWith()</code> pour le type <code>String</code>.  <p></p> <pre><code>fun main() {\n    val mots = listOf(\"dinosaure\", \"limousine\", \"magazine\", \"langue\")\n    // \u00c9crivez votre code ici\n}\n</code></pre> R\u00e9ponse <pre><code>fun main() {\n    val mots = listOf(\"dinosaure\", \"limousine\", \"magazine\", \"langue\")\n    for (m in mots) {\n        if (m.startsWith(\"l\"))\n            println(m)\n    }\n}\n</code></pre> <p></p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/06-fonctions/","title":"Fonctions","text":"<p>Source</p> <p>Vous pouvez d\u00e9clarer vos propres fonctions en Kotlin en utilisant le mot-cl\u00e9 <code>fun</code>.</p> <pre><code>fun hello() {\n    return println(\"Bonjour, monde!\")\n}\n\nfun main() {\n    hello()\n    // Bonjour, monde!\n}\n</code></pre> <p>En Kotlin:</p> <ul> <li>les param\u00e8tres de fonction sont \u00e9crits entre parenth\u00e8ses <code>()</code>.</li> <li>chaque param\u00e8tre doit avoir un type, et plusieurs param\u00e8tres doivent \u00eatre s\u00e9par\u00e9s par des virgules <code>,</code> .</li> <li>le type de retour est \u00e9crit apr\u00e8s les parenth\u00e8ses de la fonction <code>()</code>, s\u00e9par\u00e9 par un deux-points <code>:</code>.</li> <li>le corps d\u2019une fonction est \u00e9crit entre accolades <code>{}</code>.</li> <li>le mot-cl\u00e9 <code>return</code> est utilis\u00e9 pour sortir ou retourner quelque chose d\u2019une fonction.</li> </ul> <p>Note</p> <p>Si une fonction ne renvoie rien d\u2019utile, le type de retour et le mot-cl\u00e9 <code>return</code> peuvent \u00eatre omis.</p> <p>Dans l\u2019exemple suivant :</p> <ul> <li><code>x</code> et <code>y</code> sont des param\u00e8tres de fonction.</li> <li><code>x</code> et <code>y</code> ont le type <code>Int</code>.</li> <li>le type de retour de la fonction est <code>Int</code>.</li> <li>la fonction renvoie une somme de <code>x</code> et <code>y</code> lorsqu\u2019elle est appel\u00e9e.</li> </ul> <pre><code>fun sum(x: Int, y: Int): Int {\n    return x + y\n}\n\nfun main() {\n    println(sum(1, 2))\n    // 3\n}\n</code></pre> <p>Note</p> <p>Nous recommandons dans nos conventions de codage que vous nommiez les fonctions en commen\u00e7ant par une lettre minuscule et utilisez camel case sans tirets du bas.</p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/06-fonctions/#arguments-nommes","title":"Arguments nomm\u00e9s","text":"<p>Pour un code concis, lors de l\u2019appel de votre fonction, vous n\u2019avez pas besoin d\u2019inclure les noms des param\u00e8tres. Cependant, l\u2019inclusion des noms des param\u00e8tres rend votre code plus facile \u00e0 lire. C\u2019est ce qu\u2019on appelle l\u2019utilisation des arguments nomm\u00e9s. Si vous incluez les noms des param\u00e8tres, vous pouvez alors \u00e9crire les param\u00e8tres dans n\u2019importe quel ordre.</p> <p>Note</p> <p>Dans l\u2019exemple suivant, les templates de cha\u00eenes de caract\u00e8res (<code>$</code>) sont utilis\u00e9s pour acc\u00e9der aux valeurs des param\u00e8tres, les convertir en type <code>String</code>, puis les concat\u00e9ner en une cha\u00eene pour l\u2019impression.</p> <pre><code>fun printMessageWithPrefix(message: String, prefix: String) {\n    println(\"[$prefix] $message\")\n}\n\nfun main() {\n    // Utilise des arguments nomm\u00e9s avec l'ordre des param\u00e8tres invers\u00e9\n    printMessageWithPrefix(prefix = \"Log\", message = \"Bonjour\")\n    // [Log] Bonjour\n}\n</code></pre>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/06-fonctions/#valeurs-par-defaut-des-parametres","title":"Valeurs par d\u00e9faut des param\u00e8tres","text":"<p>Vous pouvez d\u00e9finir des valeurs par d\u00e9faut pour vos param\u00e8tres de fonction. Tout param\u00e8tre ayant une valeur par d\u00e9faut peut \u00eatre omis lors de l\u2019appel de votre fonction. Pour d\u00e9clarer une valeur par d\u00e9faut, utilisez l\u2019op\u00e9rateur d\u2019affectation <code>=</code> apr\u00e8s le type :</p> <pre><code>fun printMessageWithPrefix(message: String, prefix: String = \"Info\") {\n    println(\"[$prefix] $message\")\n}\n\nfun main() {\n    // Fonction appel\u00e9e avec les deux param\u00e8tres\n    printMessageWithPrefix(\"Bonjour\", \"Log\")\n    // [Log] Bonjour\n\n    // Fonction appel\u00e9e uniquement avec le param\u00e8tre message\n    printMessageWithPrefix(\"Bonjour\")\n    // [Info] Bonjour\n\n    printMessageWithPrefix(prefix = \"Log\", message = \"Bonjour\")\n    // [Log] Bonjour\n}\n</code></pre> <p>Note</p> <p>Vous pouvez omettre des param\u00e8tres sp\u00e9cifiques ayant des valeurs par d\u00e9faut, plut\u00f4t que de tous les omettre. Cependant, apr\u00e8s le premier param\u00e8tre omis, vous devez nommer tous les param\u00e8tres suivants.</p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/06-fonctions/#fonctions-sans-retour","title":"Fonctions sans retour","text":"<p>Si votre fonction ne renvoie pas de valeur utile, alors son type de retour est <code>Unit</code>. <code>Unit</code> est un type avec une seule valeur - <code>Unit</code>. Vous n\u2019avez pas \u00e0 d\u00e9clarer explicitement dans le corps de votre fonction que <code>Unit</code> est renvoy\u00e9. Cela signifie que vous n\u2019avez pas \u00e0 utiliser le mot-cl\u00e9 <code>return</code> ou d\u00e9clarer un type de retour :</p> <pre><code>fun printMessage(message: String) {\n    println(message)\n    // `return Unit` ou `return` est optionnel\n}\n\nfun main() {\n    printMessage(\"Bonjour\")\n    // Bonjour\n}\n</code></pre>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/06-fonctions/#fonctions-a-expression-unique","title":"Fonctions \u00e0 expression unique","text":"<p>Pour rendre votre code plus concis, vous pouvez utiliser des fonctions \u00e0 expression unique. Par exemple, la fonction <code>sum()</code> peut \u00eatre raccourcie :</p> <pre><code>fun sum(x: Int, y: Int): Int {\n    return x + y\n}\n\nfun main() {\n    println(sum(1, 2))\n    // 3\n}\n</code></pre> <p>Vous pouvez retirer les accolades <code>{}</code> et d\u00e9clarer le corps de la fonction en utilisant l\u2019op\u00e9rateur d\u2019affectation <code>=</code>. Et gr\u00e2ce \u00e0 l\u2019inf\u00e9rence de types de Kotlin, vous pouvez \u00e9galement omettre le type de retour. La fonction <code>sum()</code> devient alors une ligne :</p> <pre><code>fun sum(x: Int, y: Int) = x + y\n\nfun main() {\n    println(sum(1, 2))\n    // 3\n}\n</code></pre> <p>Note</p> <p>Omettre le type de retour n\u2019est possible que lorsque votre fonction n\u2019a pas de corps (<code>{}</code>). \u00c0 moins que le type de retour de votre fonction ne soit <code>Unit</code>.</p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/06-fonctions/#pratique-des-fonctions","title":"Pratique des fonctions","text":""},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/06-fonctions/#exercice-1","title":"Exercice 1","text":"<p>\u00c9crivez une fonction appel\u00e9e <code>circleArea</code> qui prend le rayon d\u2019un cercle au format entier comme param\u00e8tre et affiche l\u2019aire de ce cercle.</p> <p>Note</p> <p>Dans cet exercice, vous importez un package afin de pouvoir acc\u00e9der \u00e0 la valeur de pi via <code>PI</code>. Pour plus d\u2019informations sur l\u2019importation de packages, voir Packages and imports.</p> <pre><code>import kotlin.math.PI\n\nfun circleArea() {\n    // \u00c9crivez votre code ici\n}\n\nfun main() {\n    println(circleArea(2))\n}\n</code></pre> R\u00e9ponse <pre><code>import kotlin.math.PI\n\nfun circleArea(radius: Int): Double {\n    return PI * radius * radius\n}\nfun main() {\n    println(circleArea(2)) // 12.566370614359172\n}\n</code></pre> <p></p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/06-fonctions/#exercice-2","title":"Exercice 2","text":"<p>R\u00e9\u00e9crivez la fonction <code>circleArea</code> de l\u2019exercice pr\u00e9c\u00e9dent comme une fonction \u00e0 expression unique.</p> <pre><code>import kotlin.math.PI\n\n// \u00c9crivez votre code ici\n\nfun main() {\n    println(circleArea(2))\n}\n</code></pre> R\u00e9ponse <pre><code>import kotlin.math.PI\n\nfun circleArea(radius: Int): Double = PI * radius * radius\n\nfun main() {\n    println(circleArea(2)) // 12.566370614359172\n}\n</code></pre> <p></p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/06-fonctions/#exercice-3","title":"Exercice 3","text":"<p>Vous avez une fonction qui traduit un intervalle de temps donn\u00e9 en heures, minutes et secondes en secondes. Dans la plupart des cas, vous devez passer seulement un ou deux param\u00e8tres de fonction alors que le reste est \u00e9gal \u00e0 0. Am\u00e9liorez la fonction et le code qui l\u2019appelle en utilisant des valeurs par d\u00e9faut pour les param\u00e8tres et des arguments nomm\u00e9s afin que le code soit plus facile \u00e0 lire.</p> <pre><code>fun intervalInSeconds(hours: Int, minutes: Int, seconds: Int) =\n    ((hours * 60) + minutes) * 60 + seconds\n\nfun main() {\n    println(intervalInSeconds(1, 20, 15))\n    println(intervalInSeconds(0, 1, 25))\n    println(intervalInSeconds(2, 0, 0))\n    println(intervalInSeconds(0, 10, 0))\n    println(intervalInSeconds(1, 0, 1))\n}\n</code></pre> R\u00e9ponse <pre><code>fun intervalInSeconds(hours: Int = 0, minutes: Int = 0, seconds: Int = 0) =\n    ((hours * 60) + minutes) * 60 + seconds\n\nfun main() {\n    println(intervalInSeconds(1, 20, 15))\n    println(intervalInSeconds(minutes = 1, seconds = 25))\n    println(intervalInSeconds(hours = 2))\n    println(intervalInSeconds(minutes = 10))\n    println(intervalInSeconds(hours = 1, seconds = 1))\n}\n</code></pre> <p></p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/06-fonctions/#expressions-lambda","title":"Expressions lambda","text":"<p>Kotlin vous permet d\u2019\u00e9crire un code encore plus concis pour les fonctions en utilisant des expressions lambda.</p> <p>Par exemple, la fonction <code>uppercaseString()</code> suivante :</p> <pre><code>fun uppercaseString(text: String): String {\n    return text.uppercase()\n}\nfun main() {\n    println(uppercaseString(\"bonjour\"))\n    // BONJOUR\n}\n</code></pre> <p>Peut \u00e9galement \u00eatre \u00e9crite comme une expression lambda :</p> <pre><code>fun main() {\n    println({ text: String -&gt; text.uppercase() }(\"bonjour\"))\n    // BONJOUR\n}\n</code></pre> <p>Les expressions lambda peuvent \u00eatre difficiles \u00e0 comprendre \u00e0 premi\u00e8re vue, alors d\u00e9composons-les. Les expressions lambda sont \u00e9crites entre accolades <code>{}</code>.</p> <p>Dans l\u2019expression lambda, vous \u00e9crivez :</p> <ul> <li>les param\u00e8tres suivis par un <code>-&gt;</code>.</li> <li>le corps de la fonction apr\u00e8s le <code>-&gt;</code>.</li> </ul> <p>Dans l\u2019exemple pr\u00e9c\u00e9dent :</p> <ul> <li><code>text</code> est un param\u00e8tre de fonction.</li> <li><code>text</code> a le type <code>String</code>.</li> <li>la fonction renvoie le r\u00e9sultat de la   fonction <code>.uppercase()</code>   appel\u00e9e sur <code>text</code>.</li> </ul> <p>Note</p> <p>Si vous d\u00e9clarez une lambda sans param\u00e8tres, alors il n\u2019est pas n\u00e9cessaire d\u2019utiliser <code>-&gt;</code>. Par exemple :</p> <pre><code>{ println(\"Message de log\") }\n</code></pre> <p>Les expressions lambda peuvent \u00eatre utilis\u00e9es de plusieurs fa\u00e7ons. Vous pouvez :</p> <ul> <li>attribuer une lambda \u00e0 une variable que vous pouvez ensuite invoquer plus tard</li> <li>passer une expression lambda comme param\u00e8tre \u00e0 une autre fonction</li> <li>retourner une expression lambda d\u2019une fonction</li> <li>invoquer une expression lambda ind\u00e9pendamment</li> </ul>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/06-fonctions/#assigner-a-une-variable","title":"Assigner \u00e0 une variable","text":"<p>Pour attribuer une expression lambda \u00e0 une variable, utilisez l\u2019op\u00e9rateur d\u2019affectation <code>=</code> :</p> <pre><code>fun main() {\n    val UpperCaseString = { text: String -&gt; text.uppercase() }\n    println(UpperCaseString(\"bonjour\"))\n    // BONJOUR\n}\n</code></pre>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/06-fonctions/#passer-a-une-autre-fonction","title":"Passer \u00e0 une autre fonction","text":"<p>Un excellent exemple de quand il est utile de passer une expression lambda \u00e0 une fonction est d\u2019utiliser la fonction <code>.filter()</code> sur des collections :</p> <pre><code>fun main() {\n    //sampleStart\n    val numbers = listOf(1, -2, 3, -4, 5, -6)\n    val positives = numbers.filter { x -&gt; x &gt; 0 }\n    val negatives = numbers.filter { x -&gt; x &lt; 0 }\n    println(positives)\n    // [1, 3, 5]\n    println(negatives)\n    // [-2, -4, -6]\n    //sampleEnd\n}\n</code></pre> <p>La fonction <code>.filter()</code> accepte une expression lambda en tant que pr\u00e9dicat :</p> <ul> <li><code>{ x -&gt; x &gt; 0 }</code> prend chaque \u00e9l\u00e9ment de la liste et ne renvoie que ceux qui sont positifs.</li> <li><code>{ x -&gt; x &lt; 0 }</code> prend chaque \u00e9l\u00e9ment de la liste et ne renvoie que ceux qui sont n\u00e9gatifs.</li> </ul> <p>Note</p> <p>Si une expression lambda est le seul param\u00e8tre de fonction, vous pouvez supprimer les parenth\u00e8ses de fonction <code>()</code>. Il s\u2019agit d\u2019un exemple de lambda de fin, qui est discut\u00e9 plus en d\u00e9tail \u00e0 la fin de ce chapitre.</p> <p>Un autre bon exemple est l\u2019utilisation de la fonction <code>.map()</code> pour transformer les \u00e9l\u00e9ments d\u2019une collection :</p> <pre><code>fun main() {\n    //sampleStart\n    val numbers = listOf(1, -2, 3, -4, 5, -6)\n    val doubled = numbers.map { x -&gt; x * 2 }\n    val tripled = numbers.map { x -&gt; x * 3 }\n    println(doubled)\n    // [2, -4, 6, -8, 10, -12]\n    println(tripled)\n    // [3, -6, 9, -12, 15, -18]\n    //sampleEnd\n}\n</code></pre> <p>La fonction <code>.map()</code> accepte une expression lambda en tant que fonction de transformation :</p> <ul> <li><code>{ x -&gt; x * 2 }</code> prend chaque \u00e9l\u00e9ment de la liste et renvoie cet \u00e9l\u00e9ment multipli\u00e9 par 2.</li> <li><code>{ x -&gt; x * 3 }</code> prend chaque \u00e9l\u00e9ment de la liste et renvoie cet \u00e9l\u00e9ment multipli\u00e9 par 3.</li> </ul>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/06-fonctions/#types-de-fonction","title":"Types de fonction","text":"<p>Avant de pouvoir renvoyer une expression lambda d\u2019une fonction, vous devez d\u2019abord comprendre les types de fonction.</p> <p>Vous avez d\u00e9j\u00e0 appris les types de base, mais les fonctions elles-m\u00eames ont aussi un type. L\u2019inf\u00e9rence de type de Kotlin peut d\u00e9duire le type d\u2019une fonction \u00e0 partir du type de param\u00e8tre. Mais il peut y avoir des moments o\u00f9 vous devez explicitement sp\u00e9cifier le type de la fonction. Le compilateur a besoin du type de fonction pour savoir ce qui est autoris\u00e9 et ce qui ne l\u2019est pas pour cette fonction.</p> <p>La syntaxe pour un type de fonction a :</p> <ul> <li>le type de chaque param\u00e8tre \u00e9crit entre parenth\u00e8ses <code>()</code> et s\u00e9par\u00e9 par des virgules <code>,</code>.</li> <li>le type de retour \u00e9crit apr\u00e8s <code>-&gt;</code>.</li> </ul> <p>Par exemple : <code>(String) -&gt; String</code> ou <code>(Int, Int) -&gt; Int</code>.</p> <p>Voici \u00e0 quoi ressemble une expression lambda si un type de fonction pour <code>upperCaseString()</code> est d\u00e9fini :</p> <pre><code>val upperCaseString: (String) -&gt; String = { text -&gt; text.uppercase() }\n\nfun main() {\n    println(upperCaseString(\"bonjour\"))\n    // BONJOUR\n}\n</code></pre> <p>Si votre expression lambda n\u2019a pas de param\u00e8tres, alors les parenth\u00e8ses <code>()</code> sont laiss\u00e9es vides. Par exemple : <code>() -&gt; Unit</code></p> <p>Note</p> <p>Vous devez d\u00e9clarer les types de param\u00e8tres et de retour soit dans l\u2019expression lambda, soit en tant que type de fonction. Sinon, le compilateur ne pourra pas savoir quelle est le type de votre expression lambda.</p> <p>Par exemple, la ligne suivante ne fonctionnera pas :</p> <p><code>val upperCaseString = { str -&gt; str.uppercase() }</code></p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/06-fonctions/#retour-dune-fonction","title":"Retour d\u2019une fonction","text":"<p>Des expressions lambda peuvent \u00eatre renvoy\u00e9es par une fonction. Ainsi, pour que le compilateur comprenne quel est le type de l\u2019expression lambda renvoy\u00e9e, vous devez d\u00e9clarer un type de fonction.</p> <p>Dans l\u2019exemple suivant, la fonction <code>toSeconds()</code> a un type de fonction <code>(Int) -&gt; Int</code> car elle renvoie toujours une expression lambda qui prend un param\u00e8tre de type <code>Int</code> et renvoie une valeur <code>Int</code>.</p> <p>Cet exemple utilise une expression <code>when</code> pour d\u00e9terminer quelle expression lambda est renvoy\u00e9e lorsque <code>toSeconds()</code> est appel\u00e9e :</p> <pre><code>fun toSeconds(time: String): (Int) -&gt; Int = when (time) {\n    \"heure\" -&gt; { value -&gt; value * 60 * 60 }\n    \"minute\" -&gt; { value -&gt; value * 60 }\n    \"seconde\" -&gt; { value -&gt; value }\n    else -&gt; { value -&gt; value }\n}\n\nfun main() {\n    val tempsEnMinutes = listOf(2, 10, 15, 1)\n    val min2sec = toSeconds(\"minute\")\n    val tempsTotalEnSecondes = tempsEnMinutes.map(min2sec).sum()\n    println(\"Le temps total est de $tempsTotalEnSecondes secondes\")\n    // Le temps total est de 1680 secondes\n}\n</code></pre>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/06-fonctions/#invoquer-separement","title":"Invoquer s\u00e9par\u00e9ment","text":"<p>Les expressions lambda peuvent \u00eatre invoqu\u00e9es seules en ajoutant des parenth\u00e8ses <code>()</code> apr\u00e8s les accolades <code>{}</code> et en incluant tous les param\u00e8tres dans les parenth\u00e8ses :</p> <pre><code>fun main() {\n    //sampleStart\n    println({ text: String -&gt; text.uppercase() }(\"bonjour\"))\n    // BONJOUR\n    //sampleEnd\n}\n</code></pre>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/06-fonctions/#lambdas-de-fin","title":"Lambdas de fin","text":"<p>Comme vous l\u2019avez d\u00e9j\u00e0 vu, si une expression lambda est le seul param\u00e8tre d\u2019une fonction, vous pouvez supprimer les parenth\u00e8ses de fonction <code>()</code>. Si une expression lambda est pass\u00e9e en tant que dernier param\u00e8tre d\u2019une fonction, alors l\u2019expression peut \u00eatre \u00e9crite en dehors des parenth\u00e8ses de fonction <code>()</code>. Dans les deux cas, cette syntaxe est appel\u00e9e un lambda de fin.</p> <p>Par exemple, la fonction <code>.fold()</code> accepte une valeur initiale et une op\u00e9ration :</p> <pre><code>fun main() {\n    //sampleStart\n    // La valeur initiale est z\u00e9ro.\n    // L'op\u00e9ration somme la valeur initiale avec chaque \u00e9l\u00e9ment de la liste cumulativement.\n    println(listOf(1, 2, 3).fold(0, { x, item -&gt; x + item })) // 6\n\n    // Sinon, sous la forme d'un lambda de fin\n    println(listOf(1, 2, 3).fold(0) { x, item -&gt; x + item })  // 6\n    //sampleEnd\n}\n</code></pre> <p>Pour plus d\u2019informations sur les expressions lambda, consultez Expressions lambda et fonctions anonymes.</p> <p>La prochaine \u00e9tape de notre tour est d\u2019apprendre \u00e0 propos des classes en Kotlin.</p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/06-fonctions/#pratique-avec-les-expressions-lambda","title":"Pratique avec les expressions lambda","text":""},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/06-fonctions/#exercice-1_1","title":"Exercice 1","text":"<p>Vous disposez d\u2019une liste d\u2019actions prises en charge par un service web, d\u2019un pr\u00e9fixe commun pour toutes les requ\u00eates et d\u2019un identifiant d\u2019une ressource particuli\u00e8re. Pour demander une action <code>titre</code> sur la ressource avec l\u2019ID : 5, vous devez cr\u00e9er l\u2019URL suivante : <code>https://example.com/informations-livre/5/titre</code>. Utilisez une expression lambda pour cr\u00e9er une liste d\u2019URL \u00e0 partir de la liste des actions.</p> <pre><code>fun main() {\n    val actions = listOf(\"titre\", \"ann\u00e9e\", \"auteur\")\n    val prefix = \"https://example.com/informations-livre\"\n    val id = 5\n    val urls = // \u00c9crivez votre code ici\n        println(urls)\n}\n</code></pre> R\u00e9ponse <pre><code>fun main() {\n    val actions = listOf(\"titre\", \"ann\u00e9e\", \"auteur\")\n    val prefix = \"https://example.com/informations-livre\"\n    val id = 5\n    val urls = actions.map { action -&gt; \"$prefix/$id/$action\" }\n    println(urls)\n}\n</code></pre> <p></p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/06-fonctions/#exercice-2_1","title":"Exercice 2","text":"<p>\u00c9crivez une fonction qui prend une valeur <code>Int</code> et une action (une fonction de type <code>() -&gt; Unit</code>) qui r\u00e9p\u00e8te ensuite l\u2019action le nombre de fois donn\u00e9. Ensuite, utilisez cette fonction pour imprimer \u201cBonjour\u201d 5 fois.</p> <pre><code>fun repeatN(n: Int, action: () -&gt; Unit) {\n    // \u00c9crivez votre code ici\n}\n\nfun main() {\n    // \u00c9crivez votre code ici\n}\n</code></pre> R\u00e9ponse <pre><code>fun repeatN(n: Int, action: () -&gt; Unit) {\n    for (i in 1..n) {\n        action()\n    }\n}\nfun main() {\n    repeatN(5) {\n        println(\"Bonjour\")\n    }\n}\n</code></pre> <p></p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/07-classes/","title":"Classes","text":"<p>Source</p> <p>Kotlin prend en charge la programmation orient\u00e9e objet avec des classes et des objets. Les objets sont utiles pour stocker des donn\u00e9es dans votre programme. Les classes vous permettent de d\u00e9clarer un ensemble de caract\u00e9ristiques pour un objet. Lorsque vous cr\u00e9ez des objets \u00e0 partir d\u2019une classe, vous pouvez gagner du temps et des efforts, car vous n\u2019avez pas \u00e0 d\u00e9clarer ces caract\u00e9ristiques \u00e0 chaque fois.</p> <p>Pour d\u00e9clarer une classe, utilisez le mot-cl\u00e9 <code>class</code> :</p> <pre><code>class Client\n</code></pre>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/07-classes/#proprietes","title":"Propri\u00e9t\u00e9s","text":"<p>Les caract\u00e9ristiques d\u2019un objet de classe peuvent \u00eatre d\u00e9clar\u00e9es dans des propri\u00e9t\u00e9s. Vous pouvez d\u00e9clarer des propri\u00e9t\u00e9s pour une classe :</p> <ul> <li>Dans les parenth\u00e8ses <code>()</code> apr\u00e8s le nom de la classe.</li> </ul> <pre><code>class Contact(val id: Int, var email: String)\n</code></pre> <ul> <li>Au sein du corps de la classe d\u00e9fini par des accolades <code>{}</code>.</li> </ul> <pre><code>class Contact(val id: Int, var email: String) {\n    val category: String = \"\"\n}\n</code></pre> <p>Nous vous recommandons de d\u00e9clarer les propri\u00e9t\u00e9s en lecture seule (<code>val</code>) \u00e0 moins qu\u2019elles ne doivent \u00eatre modifi\u00e9es apr\u00e8s la cr\u00e9ation d\u2019une instance de la classe.</p> <p>Vous pouvez d\u00e9clarer des propri\u00e9t\u00e9s sans <code>val</code> ou <code>var</code> dans les parenth\u00e8ses, mais ces propri\u00e9t\u00e9s ne sont pas accessibles apr\u00e8s la cr\u00e9ation d\u2019une instance.</p> <p>Note</p> <ul> <li>Le contenu entre parenth\u00e8ses <code>()</code> s\u2019appelle l\u2019en-t\u00eate de la classe.</li> <li>Vous pouvez utiliser une virgule finale lors   de la d\u00e9claration des propri\u00e9t\u00e9s de classe.</li> </ul> <p>Tout comme avec les param\u00e8tres de fonction, les propri\u00e9t\u00e9s de classe peuvent avoir des valeurs par d\u00e9faut :</p> <pre><code>class Contact(val id: Int, var email: String = \"example@gmail.com\") {\n    val category: String = \"travail\"\n}\n</code></pre>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/07-classes/#creer-une-instance","title":"Cr\u00e9er une instance","text":"<p>Pour cr\u00e9er un objet \u00e0 partir d\u2019une classe, vous d\u00e9clarez une instance de classe \u00e0 l\u2019aide d\u2019un constructeur.</p> <p>Par d\u00e9faut, Kotlin cr\u00e9e automatiquement un constructeur avec les param\u00e8tres d\u00e9clar\u00e9s dans l\u2019en-t\u00eate de la classe.</p> <p>Par exemple :</p> <pre><code>class Contact(val id: Int, var email: String)\n\nfun main() {\n    val contact = Contact(1, \"mary@gmail.com\")\n}\n</code></pre> <p>Dans cet exemple :</p> <ul> <li><code>Contact</code> est une classe.</li> <li><code>contact</code> est une instance de la classe <code>Contact</code>.</li> <li><code>id</code> et <code>email</code> sont des propri\u00e9t\u00e9s.</li> <li><code>id</code> et <code>email</code> sont utilis\u00e9s avec le constructeur par d\u00e9faut pour cr\u00e9er <code>contact</code>.</li> </ul> <p>Les classes Kotlin peuvent avoir de nombreux constructeurs, y compris ceux que vous d\u00e9finissez vous-m\u00eame. Pour en savoir plus sur la fa\u00e7on de d\u00e9clarer plusieurs constructeurs, voir Constructeurs.</p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/07-classes/#acceder-aux-proprietes","title":"Acc\u00e9der aux propri\u00e9t\u00e9s","text":"<p>Pour acc\u00e9der \u00e0 une propri\u00e9t\u00e9 d\u2019une instance, \u00e9crivez le nom de la propri\u00e9t\u00e9 apr\u00e8s le nom de l\u2019instance, pr\u00e9c\u00e9d\u00e9 d\u2019un point <code>.</code> :</p> <pre><code>class Contact(val id: Int, var email: String)\n\nfun main() {\n    val contact = Contact(1, \"mary@gmail.com\")\n\n    // Affiche la valeur de la propri\u00e9t\u00e9 : email\n    println(contact.email)\n    // mary@gmail.com\n\n    // Met \u00e0 jour la valeur de la propri\u00e9t\u00e9 : email\n    contact.email = \"jane@gmail.com\"\n\n    // Affiche la nouvelle valeur de la propri\u00e9t\u00e9 : email\n    println(contact.email)\n    // jane@gmail.com\n}\n</code></pre> <p>Note</p> <p>Pour concat\u00e9ner la valeur d\u2019une propri\u00e9t\u00e9 dans le cadre d\u2019une cha\u00eene de caract\u00e8res, vous pouvez utiliser des mod\u00e8les de cha\u00eene de caract\u00e8res (<code>$</code>).</p> <p>Par exemple : <pre><code>println(\"Leur adresse email est : ${contact.email}\")\n</code></pre></p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/07-classes/#fonctions-membres","title":"Fonctions membres","text":"<p>En plus de d\u00e9clarer des propri\u00e9t\u00e9s dans le cadre des caract\u00e9ristiques d\u2019un objet, vous pouvez \u00e9galement d\u00e9finir le comportement d\u2019un objet avec des fonctions membres.</p> <p>En Kotlin, les fonctions membres doivent \u00eatre d\u00e9clar\u00e9es \u00e0 l\u2019int\u00e9rieur du corps de la classe. Pour appeler une fonction membre sur une instance, \u00e9crivez le nom de la fonction apr\u00e8s le nom de l\u2019instance, pr\u00e9c\u00e9d\u00e9 d\u2019un point <code>.</code>. Par exemple :</p> <pre><code>class Contact(val id: Int, var email: String) {\n    fun printId() {\n        println(id)\n    }\n}\n\nfun main() {\n    val contact = Contact(1, \"mary@gmail.com\")\n    // Appelle la fonction membre printId()\n    contact.printId()\n    // 1\n}\n</code></pre>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/07-classes/#classes-de-donnees","title":"Classes de donn\u00e9es","text":"<p>Kotlin dispose de classes de donn\u00e9es particuli\u00e8rement utiles pour stocker des donn\u00e9es. Les classes de donn\u00e9es ont la m\u00eame fonctionnalit\u00e9 que les classes, mais elles viennent automatiquement avec des fonctions membres suppl\u00e9mentaires. Ces fonctions membres vous permettent de facilement imprimer l\u2019instance en sortie lisible, de comparer les instances d\u2019une classe, de copier les instances, et plus encore. Comme ces fonctions sont automatiquement disponibles, vous n\u2019avez pas \u00e0 passer de temps \u00e0 \u00e9crire le m\u00eame code standard pour chacune de vos classes.</p> <p>Pour d\u00e9clarer une classe de donn\u00e9es, utilisez le mot-cl\u00e9 <code>data</code> :</p> <pre><code>data class Utilisateur(val nom: String, val id: Int)\n</code></pre> <p>Les fonctions membres pr\u00e9d\u00e9finies les plus utiles des classes de donn\u00e9es sont :</p> Fonction Description <code>.toString()</code> Imprime une cha\u00eene de caract\u00e8res lisible de l\u2019instance de la classe et ses propri\u00e9t\u00e9s. <code>.equals()</code> or <code>==</code> Compare les instances d\u2019une classe. <code>.copy()</code> Cr\u00e9e une instance de classe en copiant une autre, potentiellement avec des propri\u00e9t\u00e9s diff\u00e9rentes. <p>Voir les sections suivantes pour des exemples d\u2019utilisation de chaque fonction :</p> <ul> <li>Imprimer comme une cha\u00eene</li> <li>Comparer les instances</li> <li>Copier une instance</li> </ul>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/07-classes/#imprimer-comme-une-chaine","title":"Imprimer comme une cha\u00eene","text":"<p>Pour imprimer une cha\u00eene de caract\u00e8res lisible d\u2019une instance de classe, vous pouvez appeler explicitement la fonction <code>.toString()</code>, ou utiliser des fonctions d\u2019impression (<code>println()</code> et <code>print()</code>) qui appellent automatiquement <code>.toString()</code> pour vous :</p> <pre><code>class User(val nom: String, val id: Int)\n\nfun main() {\n    //sampleStart\n    val utilisateur = User(\"Alex\", 1)\n\n    // Utilise automatiquement la fonction toString() afin que la sortie soit facile \u00e0 lire\n    println(utilisateur)\n    // User(nom=Alex, id=1)\n    //sampleEnd\n}\n</code></pre> <p>Cela est particuli\u00e8rement utile lors du d\u00e9bogage ou de la cr\u00e9ation de journaux.</p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/07-classes/#comparer-les-instances","title":"Comparer les instances","text":"<p>Pour comparer les instances de classes de donn\u00e9es, utilisez l\u2019op\u00e9rateur d\u2019\u00e9galit\u00e9 <code>==</code> :</p> <pre><code>data class User(val name: String, val id: Int)\n\nfun main() {\n    //sampleStart\n    val utilisateur = User(\"Alex\", 1)\n    val secondUtilisateur = User(\"Alex\", 1)\n    val troisiemeUtilisateur = User(\"Max\", 2)\n\n    // Compare l'utilisateur au deuxi\u00e8me utilisateur\n    println(\"utilisateur == secondUtilisateur : ${utilisateur == secondUtilisateur}\")\n    // utilisateur == secondUtilisateur : true\n\n    // Compare l'utilisateur au troisi\u00e8me utilisateur\n    println(\"utilisateur == troisiemeUtilisateur : ${utilisateur == troisiemeUtilisateur}\")\n    // utilisateur == troisiemeUtilisateur : false\n    //sampleEnd\n}\n</code></pre>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/07-classes/#copier-une-instance","title":"Copier une instance","text":"<p>Pour cr\u00e9er une copie exacte d\u2019une instance de classe de donn\u00e9es, appelez la fonction <code>.copy()</code> sur l\u2019instance.</p> <p>Pour cr\u00e9er une copie d\u2019une instance de classe de donn\u00e9es et changer certaines propri\u00e9t\u00e9s, appelez la fonction <code>.copy()</code> sur l\u2019instance et ajoutez des valeurs de remplacement pour les propri\u00e9t\u00e9s en tant que param\u00e8tres de fonction.</p> <p>Par exemple :</p> <pre><code>data class User(val name: String, val id: Int)\n\nfun main() {\n    //sampleStart\n    val utilisateur = User(\"Alex\", 1)\n    val secondUtilisateur = User(\"Alex\", 1)\n    val troisiemeUtilisateur = User(\"Max\", 2)\n\n    // Cr\u00e9e une copie exacte de l'utilisateur\n    println(utilisateur.copy())\n    // User(name=Alex, id=1)\n\n    // Cr\u00e9e une copie de l'utilisateur avec le nom : \"Max\"\n    println(utilisateur.copy(\"Max\"))\n    // User(name=Max, id=1)\n\n    // Cr\u00e9e une copie de l'utilisateur avec id : 3\n    println(utilisateur.copy(id = 3))\n    // User(name=Alex, id=3)\n    //sampleEnd\n}\n</code></pre> <p>Cr\u00e9er une copie d\u2019une instance est plus s\u00fbr que de modifier l\u2019instance d\u2019origine, car tout code qui d\u00e9pend de l\u2019instance d\u2019origine n\u2019est pas affect\u00e9 par la copie et ce que vous en faites.</p> <p>Pour plus d\u2019informations sur les classes de donn\u00e9es, voir Classes de donn\u00e9es.</p> <p>Le dernier chapitre de ce tour est \u00e0 propos de la s\u00e9curit\u00e9 contre null de Kotlin.</p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/07-classes/#pratique","title":"Pratique","text":""},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/07-classes/#exercice-1","title":"Exercice 1","text":"<p>D\u00e9finissez une classe de donn\u00e9es <code>Employ\u00e9</code> avec deux propri\u00e9t\u00e9s : une pour un nom, et une autre pour un salaire. Assurez-vous que la propri\u00e9t\u00e9 pour le salaire est modifiable, sinon vous n\u2019obtiendrez pas d\u2019augmentation de salaire \u00e0 la fin de l\u2019ann\u00e9e ! La fonction principale d\u00e9montre comment vous pouvez utiliser cette classe de donn\u00e9es.</p> <pre><code>// \u00c9crivez votre code ici\n\nfun main() {\n    val emp = Employe(\"Mary\", 20)\n    println(emp)\n    emp.salaire += 10\n    println(emp)\n}\n</code></pre> R\u00e9ponse <pre><code>data class Employ\u00e9(val nom: String, var salaire: Int)\n\nfun main() {\n    val emp = Employ\u00e9(\"Mary\", 20)\n    println(emp)\n    emp.salaire += 10\n    println(emp)\n}\n</code></pre> <p></p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/07-classes/#exercice-2","title":"Exercice 2","text":"<p>Pour tester votre code, vous avez besoin d\u2019un g\u00e9n\u00e9rateur capable de cr\u00e9er des employ\u00e9s al\u00e9atoires. D\u00e9finissez une classe avec une liste fixe de noms potentiels (\u00e0 l\u2019int\u00e9rieur du corps de la classe), et qui est configur\u00e9e par un salaire minimum et maximum (\u00e0 l\u2019int\u00e9rieur de l\u2019en-t\u00eate de la classe). Encore une fois, la fonction principale d\u00e9montre comment vous pouvez utiliser cette classe.</p> Indice  Les listes ont une fonction d'extension appel\u00e9e <code>.random()</code> qui renvoie un \u00e9l\u00e9ment al\u00e9atoire dans une liste.   <p></p> Indice <code>Random.nextInt(from = ..., until = ...)</code> vous donne un nombre al\u00e9atoire de type <code>Int</code> dans des limites sp\u00e9cifi\u00e9es.  <p></p> <pre><code>import kotlin.random.Random\n\ndata class Employe(val nom: String, var salaire: Int)\n\n// \u00c9crivez votre code ici\n\nfun main() {\n    val empGen = GenerateurEmployeAleatoire(10, 30)\n    println(empGen.genererEmploye())\n    println(empGen.genererEmploye())\n    println(empGen.genererEmploye())\n    empGen.salaireMin = 50\n    empGen.salaireMax = 100\n    println(empGen.genererEmploye())\n}\n</code></pre> R\u00e9ponse <pre><code>import kotlin.random.Random\ndata class Employe(val nom: String, var salaire: Int)\nclass GenerateurEmployeAleatoire(var salaireMin: Int, var salaireMax: Int) {\n    val noms = listOf(\"John\", \"Mary\", \"Ann\", \"Paul\", \"Jack\", \"Elizabeth\")\n    fun genererEmploye() = Employe(noms.random(), Random.nextInt(from = salaireMin, until = salaireMax))\n}\nfun main() {\n    val empGen = GenerateurEmployeAleatoire(10, 30)\n    println(empGen.genererEmploye())\n    println(empGen.genererEmploye())\n    println(empGen.genererEmploye())\n    empGen.salaireMin = 50\n    empGen.salaireMax = 100\n    println(empGen.genererEmploye())\n}\n</code></pre> <p></p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/08-valeurs-nulles/","title":"S\u00e9curit\u00e9 contre les valeurs nulles","text":"<p>Source</p> <p>En Kotlin, il est possible d\u2019avoir une valeur <code>null</code>. Pour aider \u00e0 pr\u00e9venir les probl\u00e8mes avec les valeurs <code>null</code> dans vos programmes, Kotlin a mis en place une s\u00e9curit\u00e9 contre les nullit\u00e9s. La s\u00e9curit\u00e9 contre les nullit\u00e9s d\u00e9tecte les probl\u00e8mes potentiels avec les valeurs <code>null</code> au moment de la compilation, plut\u00f4t qu\u2019au moment de l\u2019ex\u00e9cution.</p> <p>La s\u00e9curit\u00e9 contre les nullit\u00e9s est une combinaison de fonctionnalit\u00e9s qui vous permettent de :</p> <ul> <li>d\u00e9clarer explicitement quand les valeurs <code>null</code> sont autoris\u00e9es dans votre programme.</li> <li>v\u00e9rifier la pr\u00e9sence de valeurs <code>null</code>.</li> <li>utiliser des appels s\u00e9curis\u00e9s \u00e0 des propri\u00e9t\u00e9s ou des fonctions qui peuvent contenir des valeurs <code>null</code>.</li> <li>d\u00e9clarer des actions \u00e0 prendre si des valeurs <code>null</code> sont d\u00e9tect\u00e9es.</li> </ul>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/08-valeurs-nulles/#types-nullable","title":"Types Nullable","text":"<p>Kotlin supporte les types Nullable qui permettent la possibilit\u00e9 pour le type d\u00e9clar\u00e9 d\u2019avoir des valeurs <code>null</code>. Par d\u00e9faut, un type n\u2019est pas autoris\u00e9 \u00e0 accepter des valeurs <code>null</code>. Les types Nullable sont d\u00e9clar\u00e9s en ajoutant explicitement <code>?</code> apr\u00e8s la d\u00e9claration du type.</p> <p>Par exemple :</p> <pre><code>fun main() {\n    // neverNull a le type String\n    var neverNull: String = \"Ceci ne peut pas \u00eatre null\"\n\n    // L\u00e8ve une erreur de compilation\n    neverNull = null\n\n    // nullable a un type String nullable\n    var nullable: String? = \"Vous pouvez garder un null ici\"\n\n    // C'est OK\n    nullable = null\n\n    // Par d\u00e9faut, les valeurs null ne sont pas accept\u00e9es\n    var inferredNonNull = \"Le compilateur suppose non-nullable\"\n\n    // L\u00e8ve une erreur de compilation\n    inferredNonNull = null\n\n    // notNull n'accepte pas les valeurs null\n    fun strLength(notNull: String): Int {                 \n        return notNull.length\n    }\n\n    println(strLength(neverNull)) // 18\n    println(strLength(nullable))  // L\u00e8ve une erreur de compilation\n}\n</code></pre> <p>Note</p> <p><code>length</code> est une propri\u00e9t\u00e9 de la classe String qui contient le nombre de caract\u00e8res dans une cha\u00eene.</p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/08-valeurs-nulles/#verifier-les-valeurs-nulles","title":"V\u00e9rifier les valeurs nulles","text":"<p>Vous pouvez v\u00e9rifier la pr\u00e9sence de valeurs <code>null</code> dans les expressions conditionnelles. Dans l\u2019exemple suivant, la fonction <code>describeString()</code> a une instruction <code>if</code> qui v\u00e9rifie si <code>maybeString</code> n\u2019est pas <code>null</code> et si sa <code>length</code> est sup\u00e9rieure \u00e0 z\u00e9ro :</p> <pre><code>fun describeString(maybeString: String?): String {\n    if (maybeString != null &amp;&amp; maybeString.length &gt; 0) {\n        return \"Cha\u00eene de longueur ${maybeString.length}\"\n    } else {\n        return \"Cha\u00eene vide ou null\"\n    }\n}\n\nfun main() {\n    val nullString: String? = null\n    println(describeString(nullString))\n    // Cha\u00eene vide ou null\n}\n</code></pre>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/08-valeurs-nulles/#utiliser-des-appels-securises","title":"Utiliser des appels s\u00e9curis\u00e9s","text":"<p>Pour acc\u00e9der en toute s\u00e9curit\u00e9 aux propri\u00e9t\u00e9s d\u2019un objet qui peut contenir une valeur <code>null</code>, utilisez l\u2019op\u00e9rateur  d\u2019appel s\u00e9curis\u00e9 <code>?.</code>. L\u2019op\u00e9rateur d\u2019appel s\u00e9curis\u00e9 renvoie <code>null</code> si l\u2019objet ou l\u2019une de ses propri\u00e9t\u00e9s acc\u00e9d\u00e9es est <code>null</code>. Ceci est utile si vous voulez \u00e9viter que la pr\u00e9sence de valeurs <code>null</code> d\u00e9clenche des erreurs dans votre code.</p> <p>Dans l\u2019exemple suivant, la fonction <code>lengthString()</code> utilise un appel s\u00e9curis\u00e9 pour renvoyer soit la longueur de la cha\u00eene, soit <code>null</code> :</p> <pre><code>fun lengthString(maybeString: String?): Int? = maybeString?.length\n\nfun main() { \n    val nullString: String? = null\n    println(lengthString(nullString))\n    // null\n}\n</code></pre> <p>Note</p> <p>Les appels s\u00e9curis\u00e9s peuvent \u00eatre cha\u00een\u00e9s de mani\u00e8re \u00e0 ce que si une propri\u00e9t\u00e9 d\u2019un objet contient une valeur <code>null</code>,  alors <code>null</code> est renvoy\u00e9 sans qu\u2019une erreur soit lev\u00e9e. Par exemple : <pre><code>   person.company?.address?.country\n</code></pre></p> <p>L\u2019op\u00e9rateur d\u2019appel s\u00e9curis\u00e9 peut \u00e9galement \u00eatre utilis\u00e9 pour appeler en toute s\u00e9curit\u00e9 une fonction d\u2019extension ou de membre. Dans ce cas, une v\u00e9rification de nullit\u00e9 est effectu\u00e9e avant l\u2019appel de la fonction. Si la v\u00e9rification d\u00e9tecte une valeur <code>null</code>, alors l\u2019appel est saut\u00e9 et <code>null</code> est renvoy\u00e9.</p> <p>Dans l\u2019exemple suivant, <code>nullString</code> est <code>null</code> donc l\u2019invocation de <code>.uppercase()</code> est saut\u00e9e et <code>null</code> est renvoy\u00e9 :</p> <pre><code>fun main() {\n    val nullString: String? = null\n    println(nullString?.uppercase())\n    // null\n}\n</code></pre>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/08-valeurs-nulles/#utiliser-loperateur-elvis","title":"Utiliser l\u2019op\u00e9rateur Elvis","text":"<p>Vous pouvez fournir une valeur par d\u00e9faut \u00e0 retourner si une valeur <code>null</code> est d\u00e9tect\u00e9e en utilisant  l\u2019op\u00e9rateur Elvis <code>?:</code>.</p> <p>\u00c9crivez sur le c\u00f4t\u00e9 gauche de l\u2019op\u00e9rateur Elvis ce qui doit \u00eatre v\u00e9rifi\u00e9 pour une valeur <code>null</code>. \u00c9crivez sur le c\u00f4t\u00e9 droit de l\u2019op\u00e9rateur Elvis ce qui doit \u00eatre renvoy\u00e9 si une valeur <code>null</code> est d\u00e9tect\u00e9e.</p> <p>Dans l\u2019exemple suivant, <code>nullString</code> est <code>null</code> donc l\u2019appel s\u00e9curis\u00e9 pour acc\u00e9der \u00e0 la propri\u00e9t\u00e9 <code>length</code> renvoie une valeur <code>null</code>. En cons\u00e9quence, l\u2019op\u00e9rateur Elvis renvoie <code>0</code> :</p> <pre><code>fun main() {\n    val nullString: String? = null\n    println(nullString?.length ?: 0)\n    // 0\n}\n</code></pre> <p>Pour plus d\u2019informations sur la s\u00e9curit\u00e9 des nullit\u00e9s en Kotlin, voir Null safety.</p>"},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/08-valeurs-nulles/#pratique","title":"Pratique","text":""},{"location":"1.%20Kotlin/Survol%20de%20Kotlin/08-valeurs-nulles/#exercice","title":"Exercice","text":"<p>Vous avez la fonction <code>employeeById</code> qui vous donne acc\u00e8s \u00e0 une base de donn\u00e9es d\u2019employ\u00e9s d\u2019une entreprise. Malheureusement, cette fonction renvoie une valeur du type <code>Employee?</code>, donc le r\u00e9sultat peut \u00eatre <code>null</code>. Votre but est d\u2019\u00e9crire une fonction qui renvoie le salaire d\u2019un employ\u00e9 quand son <code>id</code> est fourni, ou <code>0</code> si l\u2019employ\u00e9 est manquant dans la base de donn\u00e9es.</p> <pre><code>data class Employee (val name: String, var salary: Int)\n\nfun employeeById(id: Int) = when(id) {\n    1 -&gt; Employee(\"Mary\", 20)\n    2 -&gt; null\n    3 -&gt; Employee(\"John\", 21)\n    4 -&gt; Employee(\"Ann\", 23)\n    else -&gt; null\n}\n\nfun salaryById(id: Int) = // \u00c9crivez votre code ici\n\nfun main() {\n    println((1..5).sumOf { id -&gt; salaryById(id) })\n}\n</code></pre> R\u00e9ponse <pre><code>data class Employee (val name: String, var salary: Int)\nfun employeeById(id: Int) = when(id) {\n    1 -&gt; Employee(\"Mary\", 20)\n    2 -&gt; null\n    3 -&gt; Employee(\"John\", 21)\n    4 -&gt; Employee(\"Ann\", 23)\n    else -&gt; null\n}\nfun salaryById(id: Int) = employeeById(id)?.salary ?: 0\nfun main() {\n    println((1..5).sumOf { id -&gt; salaryById(id) })\n}\n</code></pre> <p></p>"},{"location":"2.%20Android/01-intro/","title":"1. Introduction \u00e0 la programmation mobile et Android","text":"<p>La programmation mobile repr\u00e9sente un domaine passionnant et en constante \u00e9volution dans le monde du d\u00e9veloppement logiciel. Elle offre aux d\u00e9veloppeurs la possibilit\u00e9 de cr\u00e9er des applications qui accompagnent les utilisateurs partout, transformant la fa\u00e7on dont nous interagissons avec la technologie au quotidien.</p>"},{"location":"2.%20Android/01-intro/#defis-de-la-programmation-mobile","title":"D\u00e9fis de la programmation mobile","text":"<p>Le d\u00e9veloppement d\u2019applications mobiles pr\u00e9sente des d\u00e9fis uniques par rapport aux plateformes traditionnelles :</p> <ol> <li> <p>Ressources limit\u00e9es : Les appareils mobiles ont g\u00e9n\u00e9ralement moins de puissance de traitement, de m\u00e9moire et de    batterie que les ordinateurs de bureau.</p> </li> <li> <p>Diversit\u00e9 des appareils : Il existe une grande vari\u00e9t\u00e9 de tailles d\u2019\u00e9cran, de r\u00e9solutions et de capacit\u00e9s    mat\u00e9rielles \u00e0 prendre en compte.</p> </li> <li> <p>Connectivit\u00e9 intermittente : Les applications mobiles doivent souvent fonctionner avec une connexion Internet    instable ou inexistante.</p> </li> <li> <p>Interactions tactiles : L\u2019interface utilisateur doit \u00eatre con\u00e7ue pour des interactions tactiles plut\u00f4t que pour    la souris et le clavier.</p> </li> <li> <p>Cycle de vie des applications : Les applications mobiles peuvent \u00eatre interrompues \u00e0 tout moment par des appels,    des notifications ou d\u2019autres \u00e9v\u00e9nements syst\u00e8me.</p> </li> </ol>"},{"location":"2.%20Android/01-intro/#android-vs-autres-plateformes","title":"Android vs autres plateformes","text":"<p>Android se distingue par plusieurs aspects :</p> <ul> <li>Open source : Contrairement \u00e0 iOS, Android est un syst\u00e8me d\u2019exploitation open source, offrant plus de flexibilit\u00e9   aux d\u00e9veloppeurs.</li> <li>Part de march\u00e9 : Android domine le march\u00e9 mondial des smartphones avec plus de 70% de part de march\u00e9.</li> <li>Diversit\u00e9 des appareils : Android fonctionne sur une grande vari\u00e9t\u00e9 d\u2019appareils de diff\u00e9rents fabricants,   contrairement \u00e0 iOS qui est limit\u00e9 aux appareils Apple.</li> <li>Processus de publication : La publication d\u2019applications sur le Google Play Store est g\u00e9n\u00e9ralement plus rapide et   moins restrictive que sur l\u2019App Store d\u2019Apple.</li> </ul>"},{"location":"2.%20Android/01-intro/#historique-des-versions-dandroid","title":"Historique des versions d\u2019Android","text":"<ul> <li>2008 : Android 1.0 (API 1)</li> <li>2009 : Android 2.0 (Eclair, API 5)</li> <li>2010 : Android 2.2 (Froyo, API 8) et 2.3 (Gingerbread, API 9)</li> <li>2011 : Android 3.0 (Honeycomb, API 11) et 4.0 (Ice Cream Sandwich, API 14)</li> <li>2012 : Android 4.1 (Jelly Bean, API 16)</li> <li>2013 : Android 4.4 (KitKat, API 19)</li> <li>2014 : Android 5.0 (Lollipop, API 21)</li> <li>2015 : Android 6.0 (Marshmallow, API 23)</li> <li>2016 : Android 7.0 (Nougat, API 24)</li> <li>2017 : Android 8.0 (Oreo, API 26)</li> <li>2018 : Android 9 (Pie, API 28)</li> <li>2019 : Android 10 (API 29)</li> <li>2020 : Android 11 (API 30)</li> <li>2021 : Android 12 (API 31)</li> <li>2022 : Android 13 (API 33)</li> <li>2023 : Android 14 (API 34)</li> </ul> <p>Cette liste met en \u00e9vidence la progression des versions d\u2019Android et leurs API correspondantes. Il est important de noter que chaque nouvelle version d\u2019API apporte g\u00e9n\u00e9ralement de nouvelles fonctionnalit\u00e9s, des am\u00e9liorations de performance et des changements dans la fa\u00e7on dont les d\u00e9veloppeurs interagissent avec le syst\u00e8me Android.</p> <p>Les num\u00e9ros d\u2019API sont particuli\u00e8rement importants pour les d\u00e9veloppeurs car ils d\u00e9terminent :</p> <ol> <li>Les fonctionnalit\u00e9s disponibles pour l\u2019application.</li> <li>La compatibilit\u00e9 de l\u2019application avec diff\u00e9rents appareils Android.</li> <li>Les exigences minimales et cibles pour la publication sur le Google Play Store.</li> </ol> <p>Lors du d\u00e9veloppement d\u2019une application Android, les d\u00e9veloppeurs doivent choisir une version d\u2019API minimale (qui d\u00e9termine les appareils les plus anciens support\u00e9s) et une version d\u2019API cible (g\u00e9n\u00e9ralement la plus r\u00e9cente pour profiter des derni\u00e8res fonctionnalit\u00e9s et optimisations).</p> <p>Cette progression constante des versions d\u2019API souligne l\u2019importance pour les d\u00e9veloppeurs Android de rester \u00e0 jour avec les derni\u00e8res \u00e9volutions de la plateforme et d\u2019adapter leurs applications en cons\u00e9quence.</p>"},{"location":"2.%20Android/01-intro/#applications-classiques-vs-modernes-sur-android","title":"Applications classiques vs modernes sur Android","text":""},{"location":"2.%20Android/01-intro/#applications-classiques-java","title":"Applications classiques (Java)","text":"<ul> <li>Utilisation de Java comme langage principal</li> <li>Interface utilisateur d\u00e9finie en XML</li> <li>Utilisation d\u2019Activities et de Fragments pour la structure de l\u2019application</li> <li>Cycle de vie des composants plus complexe \u00e0 g\u00e9rer</li> </ul>"},{"location":"2.%20Android/01-intro/#applications-modernes-kotlin-avec-jetpack-compose","title":"Applications modernes (Kotlin avec Jetpack Compose)","text":"<ul> <li>Utilisation de Kotlin, un langage plus moderne et concis</li> <li>Interface utilisateur d\u00e9finie de mani\u00e8re d\u00e9clarative avec Jetpack Compose</li> <li>Structure d\u2019application plus flexible et modulaire</li> <li>Gestion simplifi\u00e9e du cycle de vie des composants</li> <li>Meilleure performance et moins de code boilerplate</li> <li>Support natif pour la programmation asynchrone et r\u00e9active</li> </ul> <p>Le passage de Java \u00e0 Kotlin et l\u2019adoption de Jetpack Compose repr\u00e9sentent une \u00e9volution majeure dans le d\u00e9veloppement Android, offrant aux d\u00e9veloppeurs des outils plus puissants et une exp\u00e9rience de d\u00e9veloppement plus agr\u00e9able.</p> <p>En conclusion, la programmation mobile Android offre de nombreuses opportunit\u00e9s et d\u00e9fis. Avec l\u2019\u00e9volution constante de la plateforme et des outils de d\u00e9veloppement, il est crucial pour les d\u00e9veloppeurs de rester \u00e0 jour et d\u2019adopter les meilleures pratiques pour cr\u00e9er des applications performantes et attrayantes.</p>"},{"location":"2.%20Android/01-intro/#etapes-de-developpement-dune-application-mobile-android","title":"\u00c9tapes de d\u00e9veloppement d\u2019une application mobile Android","text":"<p>Le d\u00e9veloppement d\u2019une application mobile est un processus complexe qui implique plusieurs \u00e9tapes, de la conception initiale au d\u00e9ploiement final. Voici un aper\u00e7u d\u00e9taill\u00e9 des principales \u00e9tapes pour d\u00e9velopper une application mobile Android, en incluant les phases de test et de d\u00e9ploiement :</p>"},{"location":"2.%20Android/01-intro/#1-conception-et-planification","title":"1. Conception et planification","text":"<ul> <li>D\u00e9finir les objectifs et les fonctionnalit\u00e9s de l\u2019application</li> <li>R\u00e9aliser une \u00e9tude de march\u00e9 et une analyse de la concurrence</li> <li>Cr\u00e9er des wireframes et des maquettes de l\u2019interface utilisateur</li> <li>\u00c9laborer un plan de d\u00e9veloppement et un calendrier</li> </ul>"},{"location":"2.%20Android/01-intro/#2-configuration-de-lenvironnement-de-developpement","title":"2. Configuration de l\u2019environnement de d\u00e9veloppement","text":"<ul> <li>Installer Android Studio</li> <li>Configurer le SDK Android et les outils n\u00e9cessaires</li> <li>Mettre en place un syst\u00e8me de contr\u00f4le de version (ex: Git)</li> </ul>"},{"location":"2.%20Android/01-intro/#3-developpement","title":"3. D\u00e9veloppement","text":"<ul> <li>Coder l\u2019interface utilisateur (UI) avec Jetpack Compose</li> <li>Impl\u00e9menter la logique m\u00e9tier en Kotlin</li> <li>Int\u00e9grer les API n\u00e9cessaires (Google Maps, paiement, etc.)</li> <li>G\u00e9rer le stockage local des donn\u00e9es (SharedPreferences, Room)</li> <li>Impl\u00e9menter les fonctionnalit\u00e9s de connectivit\u00e9 r\u00e9seau</li> </ul>"},{"location":"2.%20Android/01-intro/#4-tests","title":"4. Tests","text":""},{"location":"2.%20Android/01-intro/#a-tests-unitaires","title":"a. Tests unitaires","text":"<ul> <li>\u00c9crire et ex\u00e9cuter des tests unitaires pour les composants individuels</li> <li>Utiliser JUnit et Mockito pour tester la logique m\u00e9tier</li> </ul>"},{"location":"2.%20Android/01-intro/#b-tests-dintegration","title":"b. Tests d\u2019int\u00e9gration","text":"<ul> <li>Tester l\u2019interaction entre diff\u00e9rents modules de l\u2019application</li> <li>Utiliser Espresso pour les tests d\u2019interface utilisateur automatis\u00e9s</li> </ul>"},{"location":"2.%20Android/01-intro/#c-tests-manuels","title":"c. Tests manuels","text":"<ul> <li>Effectuer des tests fonctionnels sur diff\u00e9rents appareils et versions d\u2019Android</li> <li>Tester les sc\u00e9narios d\u2019utilisation r\u00e9els</li> </ul>"},{"location":"2.%20Android/01-intro/#d-tests-de-performance","title":"d. Tests de performance","text":"<ul> <li>Analyser les performances de l\u2019application (utilisation CPU, m\u00e9moire, batterie)</li> <li>Utiliser Android Profiler pour identifier les goulots d\u2019\u00e9tranglement</li> </ul>"},{"location":"2.%20Android/01-intro/#5-debogage-et-optimisation","title":"5. D\u00e9bogage et optimisation","text":"<ul> <li>Corriger les bugs identifi\u00e9s lors des tests</li> <li>Optimiser les performances de l\u2019application</li> <li>Am\u00e9liorer l\u2019exp\u00e9rience utilisateur en fonction des retours</li> </ul>"},{"location":"2.%20Android/01-intro/#6-preparation-au-deploiement","title":"6. Pr\u00e9paration au d\u00e9ploiement","text":"<ul> <li>G\u00e9n\u00e9rer une version sign\u00e9e de l\u2019APK ou du bundle App</li> <li>Pr\u00e9parer les ressources marketing (ic\u00f4nes, captures d\u2019\u00e9cran, descriptions)</li> <li>R\u00e9diger la politique de confidentialit\u00e9 et les conditions d\u2019utilisation</li> </ul>"},{"location":"2.%20Android/01-intro/#7-deploiement-sur-le-google-play-store","title":"7. D\u00e9ploiement sur le Google Play Store","text":"<ul> <li>Cr\u00e9er un compte d\u00e9veloppeur Google Play</li> <li>Configurer la fiche de l\u2019application sur la console Google Play</li> <li>T\u00e9l\u00e9verser l\u2019APK ou le bundle App</li> <li>D\u00e9finir les pays de distribution et les prix (si applicable)</li> <li>Soumettre l\u2019application pour examen</li> </ul>"},{"location":"2.%20Android/01-intro/#8-surveillance-et-maintenance-post-lancement","title":"8. Surveillance et maintenance post-lancement","text":"<ul> <li>Surveiller les statistiques d\u2019installation et d\u2019utilisation</li> <li>Collecter et analyser les retours des utilisateurs</li> <li>R\u00e9pondre aux commentaires et aux questions des utilisateurs</li> <li>Planifier et d\u00e9velopper des mises \u00e0 jour r\u00e9guli\u00e8res</li> </ul>"},{"location":"2.%20Android/01-intro/#9-mises-a-jour-et-iterations","title":"9. Mises \u00e0 jour et it\u00e9rations","text":"<ul> <li>Corriger les bugs signal\u00e9s par les utilisateurs</li> <li>Ajouter de nouvelles fonctionnalit\u00e9s bas\u00e9es sur les retours</li> <li>Adapter l\u2019application aux nouvelles versions d\u2019Android et aux nouveaux appareils</li> </ul>"},{"location":"2.%20Android/01-intro/#10-marketing-et-promotion-continus","title":"10. Marketing et promotion continus","text":"<ul> <li>Mettre en \u0153uvre des strat\u00e9gies d\u2019ASO (App Store Optimization)</li> <li>Promouvoir l\u2019application sur les r\u00e9seaux sociaux et autres canaux</li> <li>Analyser les m\u00e9triques de performance et ajuster la strat\u00e9gie marketing</li> </ul> <p>Ce processus est it\u00e9ratif, et de nombreuses \u00e9tapes peuvent se chevaucher ou \u00eatre r\u00e9p\u00e9t\u00e9es au fur et \u00e0 mesure du d\u00e9veloppement et de l\u2019\u00e9volution de l\u2019application. Il est crucial de rester flexible et r\u00e9actif aux changements du march\u00e9, aux retours des utilisateurs et aux avanc\u00e9es technologiques tout au long du cycle de vie de l\u2019application.</p> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des  explications, des exemples et/ou des suggestions de structure. Toutes les informations ont  \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"2.%20Android/02-intro-compose/","title":"2. Introduction \u00e0 Jetpack Compose","text":"<p>Jetpack Compose est une bo\u00eete \u00e0 outils moderne pour le d\u00e9veloppement d\u2019interfaces utilisateur natives sur Android. Lanc\u00e9 par Google, il repr\u00e9sente une \u00e9volution majeure dans la fa\u00e7on dont les d\u00e9veloppeurs cr\u00e9ent des interfaces pour les applications Android.</p>"},{"location":"2.%20Android/02-intro-compose/#motivations-et-historique","title":"Motivations et historique","text":""},{"location":"2.%20Android/02-intro-compose/#motivations","title":"Motivations","text":"<ol> <li>Simplification du d\u00e9veloppement UI : R\u00e9duire la complexit\u00e9 et le code boilerplate associ\u00e9s \u00e0 la cr\u00e9ation    d\u2019interfaces utilisateur.</li> <li>Approche d\u00e9clarative : Permettre aux d\u00e9veloppeurs de d\u00e9crire ce qu\u2019ils veulent afficher plut\u00f4t que comment le    construire.</li> <li>Performances am\u00e9lior\u00e9es : Optimiser le rendu et les mises \u00e0 jour de l\u2019interface utilisateur.</li> <li>Coh\u00e9rence avec les tendances modernes : S\u2019aligner sur les approches modernes de d\u00e9veloppement UI comme React et    SwiftUI.</li> </ol>"},{"location":"2.%20Android/02-intro-compose/#historique","title":"Historique","text":"<ul> <li>2019 : Annonce initiale de Jetpack Compose lors de la Google I/O.</li> <li>2020 : Sortie des premi\u00e8res versions alpha pour les d\u00e9veloppeurs.</li> <li>Juillet 2021 : Lancement officiel de la version 1.0 stable.</li> <li>Depuis, Compose continue d\u2019\u00e9voluer avec des mises \u00e0 jour r\u00e9guli\u00e8res apportant de nouvelles fonctionnalit\u00e9s et   am\u00e9liorations.</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#entreprises-et-organisations-utilisant-kotlin-et-compose","title":"Entreprises et organisations utilisant Kotlin et Compose","text":"<ol> <li> <p>Google : Utilise Kotlin et Compose dans de nombreuses applications comme Google Play, Google Home, et Google    Drive.</p> <ul> <li>Raison : Am\u00e9lioration de la productivit\u00e9 des d\u00e9veloppeurs et coh\u00e9rence avec les recommandations Android.</li> </ul> </li> <li> <p>Netflix : A adopt\u00e9 Kotlin pour son application Android.</p> <ul> <li>Raison : S\u00e9curit\u00e9 du type, r\u00e9duction des erreurs, et expressivit\u00e9 du code.</li> </ul> </li> <li> <p>Airbnb : Utilise Kotlin dans son application mobile.</p> <ul> <li>Raison : Interop\u00e9rabilit\u00e9 avec Java existant et am\u00e9lioration de la qualit\u00e9 du code.</li> </ul> </li> <li> <p>Pinterest : A migr\u00e9 vers Kotlin pour son d\u00e9veloppement Android.</p> <ul> <li>Raison : Syntaxe concise et fonctionnalit\u00e9s modernes du langage.</li> </ul> </li> <li> <p>Uber : Utilise Kotlin dans ses applications mobiles.</p> <ul> <li>Raison : Am\u00e9lioration de la productivit\u00e9 des d\u00e9veloppeurs et r\u00e9duction des bugs.</li> </ul> </li> <li> <p>Trello : A adopt\u00e9 Kotlin pour son application Android.</p> <ul> <li>Raison : Expressivit\u00e9 du langage et meilleures pratiques de programmation.</li> </ul> </li> <li> <p>Evernote : Utilise Kotlin dans son application Android.</p> <ul> <li>Raison : Code plus propre et plus facile \u00e0 maintenir.</li> </ul> </li> <li> <p>Basecamp : A migr\u00e9 son application vers Kotlin.</p> <ul> <li>Raison : S\u00e9curit\u00e9 accrue et syntaxe plus agr\u00e9able pour les d\u00e9veloppeurs.</li> </ul> </li> <li> <p>Corda : Plateforme blockchain d\u00e9velopp\u00e9e enti\u00e8rement en Kotlin.</p> <ul> <li>Raison : Robustesse du langage pour les syst\u00e8mes critiques.</li> </ul> </li> <li> <p>Coursera : Utilise Kotlin pour son application mobile.</p> <ul> <li>Raison : Am\u00e9lioration de la qualit\u00e9 du code et de la vitesse de d\u00e9veloppement.</li> </ul> </li> </ol> <p>Ces entreprises ont choisi Kotlin et, pour certaines, Compose, principalement pour :</p> <ul> <li>La productivit\u00e9 accrue des d\u00e9veloppeurs</li> <li>La r\u00e9duction des erreurs et des crashs</li> <li>La modernit\u00e9 et l\u2019expressivit\u00e9 du langage</li> <li>La compatibilit\u00e9 avec l\u2019\u00e9cosyst\u00e8me Java existant</li> <li>L\u2019am\u00e9lioration de la maintenabilit\u00e9 du code</li> </ul> <p>L\u2019adoption croissante de Compose, bien que plus r\u00e9cente, est motiv\u00e9e par sa capacit\u00e9 \u00e0 simplifier et acc\u00e9l\u00e9rer le d\u00e9veloppement d\u2019interfaces utilisateur modernes et performantes sur Android.</p>"},{"location":"2.%20Android/02-intro-compose/#principes-de-base-dune-application-compose","title":"Principes de base d\u2019une application Compose","text":""},{"location":"2.%20Android/02-intro-compose/#structure-de-lapplication","title":"Structure de l\u2019application","text":"<ol> <li>Composables : Fonctions annot\u00e9es avec <code>@Composable</code> qui d\u00e9crivent une partie de l\u2019interface utilisateur.</li> <li>\u00c9tat : Donn\u00e9es qui peuvent changer au fil du temps et qui influencent l\u2019IU (interface utilisateur).</li> <li>Recomposition : Processus de mise \u00e0 jour de l\u2019IU lorsque l\u2019\u00e9tat change.</li> </ol>"},{"location":"2.%20Android/02-intro-compose/#composants-typiques","title":"Composants typiques","text":"<ol> <li>Agencement des composables (Layout) : <code>Column</code>, <code>Row</code>, <code>Box</code> pour structurer l\u2019IU.</li> <li>Elements de l\u2019IU : <code>Text</code>, <code>Button</code>, <code>Image</code>, etc., pour afficher du contenu.</li> <li>Modificateurs : Pour personnaliser l\u2019apparence et le comportement des composables.</li> <li>Ascension de l\u2019\u00e9tat (State Hoisting) : Technique pour g\u00e9rer et partager l\u2019\u00e9tat entre composants.</li> <li>Navigation : Gestion des diff\u00e9rents \u00e9crans et du flux de l\u2019application.</li> <li>Th\u00e8mes : Personnalisation coh\u00e9rente de l\u2019apparence de l\u2019application.</li> </ol> <p>Jetpack Compose offre plusieurs avantages significatifs par rapport aux m\u00e9thodes de d\u00e9veloppement Android traditionnelles bas\u00e9es sur XML et le syst\u00e8me de vues. Voici les principaux avantages de Jetpack Compose :</p>"},{"location":"2.%20Android/02-intro-compose/#avantages-de-jetpack-compose","title":"Avantages de Jetpack Compose","text":""},{"location":"2.%20Android/02-intro-compose/#1-simplicite-et-concision-du-code","title":"1. Simplicit\u00e9 et concision du code","text":"<ul> <li>Moins de code boilerplate : Compose r\u00e9duit consid\u00e9rablement la quantit\u00e9 de code n\u00e9cessaire pour cr\u00e9er des   interfaces utilisateur complexes.</li> <li>Code plus lisible : La nature d\u00e9clarative de Compose rend le code plus facile \u00e0 lire et \u00e0 comprendre.</li> <li>Unification du code UI : Plus besoin de jongler entre XML et Java/Kotlin, tout est dans un seul langage (Kotlin).</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#2-developpement-plus-rapide","title":"2. D\u00e9veloppement plus rapide","text":"<ul> <li>Pr\u00e9visualisation en temps r\u00e9el : Les d\u00e9veloppeurs peuvent voir les changements d\u2019UI instantan\u00e9ment sans avoir \u00e0   recompiler l\u2019application enti\u00e8re.</li> <li>It\u00e9rations plus rapides : La combinaison de la pr\u00e9visualisation en temps r\u00e9el et du code plus concis permet des   it\u00e9rations de d\u00e9veloppement plus rapides.</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#3-approche-declarative","title":"3. Approche d\u00e9clarative","text":"<ul> <li>Description de l\u2019\u00e9tat final : Les d\u00e9veloppeurs d\u00e9crivent ce que l\u2019UI devrait \u00eatre, plut\u00f4t que les \u00e9tapes pour y   arriver.</li> <li>Gestion d\u2019\u00e9tat simplifi\u00e9e : Compose facilite la gestion de l\u2019\u00e9tat de l\u2019application et sa synchronisation avec   l\u2019UI.</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#4-flexibilite-et-reutilisabilite","title":"4. Flexibilit\u00e9 et r\u00e9utilisabilit\u00e9","text":"<ul> <li>Composants hautement r\u00e9utilisables : Il est facile de cr\u00e9er des composants UI r\u00e9utilisables et de les partager   entre diff\u00e9rentes parties de l\u2019application.</li> <li>Personnalisation facile : Les composants peuvent \u00eatre facilement personnalis\u00e9s gr\u00e2ce aux modifiers et aux   param\u00e8tres.</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#5-performance-amelioree","title":"5. Performance am\u00e9lior\u00e9e","text":"<ul> <li>Optimisations automatiques : Compose optimise automatiquement les recompositions pour minimiser les mises \u00e0 jour   inutiles de l\u2019UI.</li> <li>Rendu efficace : Le syst\u00e8me de rendu de Compose est con\u00e7u pour \u00eatre plus efficace que le syst\u00e8me de vues   traditionnel.</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#6-meilleure-interoperabilite","title":"6. Meilleure interop\u00e9rabilit\u00e9","text":"<ul> <li>Int\u00e9gration avec les vues existantes : Compose peut \u00eatre int\u00e9gr\u00e9 progressivement dans des applications existantes,   permettant une migration en douceur.</li> <li>Support des biblioth\u00e8ques Android existantes : Compose fonctionne bien avec les biblioth\u00e8ques et composants   Android existants.</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#7-tests-simplifies","title":"7. Tests simplifi\u00e9s","text":"<ul> <li>Tests unitaires plus faciles : Les composables \u00e9tant des fonctions Kotlin, ils sont plus faciles \u00e0 tester   unitairement.</li> <li>Moins de tests d\u2019UI n\u00e9cessaires : La nature d\u00e9clarative de Compose r\u00e9duit le besoin de tests d\u2019UI exhaustifs.</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#8-coherence-avec-material-design","title":"8. Coh\u00e9rence avec Material Design","text":"<ul> <li>Impl\u00e9mentation native de Material Design : Compose fournit des composants Material Design pr\u00eats \u00e0 l\u2019emploi,   facilitant la cr\u00e9ation d\u2019interfaces conformes aux directives de Google.</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#9-support-multiplateforme","title":"9. Support multiplateforme","text":"<ul> <li>Potentiel pour le d\u00e9veloppement multiplateforme : Bien que principalement pour Android, Compose a le potentiel   d\u2019\u00eatre utilis\u00e9 pour le d\u00e9veloppement d\u2019applications de bureau et web (avec Compose for Desktop et Compose for Web).</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#10-courbe-dapprentissage-reduite","title":"10. Courbe d\u2019apprentissage r\u00e9duite","text":"<ul> <li>Concepts unifi\u00e9s : Une fois les concepts de base ma\u00eetris\u00e9s, il est plus facile de cr\u00e9er des interfaces complexes.</li> <li>Documentation et ressources de qualit\u00e9 : Google fournit une documentation extensive et des codelabs pour faciliter   l\u2019apprentissage.</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#11-meilleure-gestion-des-animations","title":"11. Meilleure gestion des animations","text":"<ul> <li>API d\u2019animation intuitive : Compose offre des API d\u2019animation plus simples et plus puissantes que les m\u00e9thodes   traditionnelles.</li> </ul>"},{"location":"2.%20Android/02-intro-compose/#12-adaptation-aux-differentes-tailles-decran","title":"12. Adaptation aux diff\u00e9rentes tailles d\u2019\u00e9cran","text":"<ul> <li>Responsive design facilit\u00e9 : Compose simplifie la cr\u00e9ation d\u2019interfaces qui s\u2019adaptent \u00e0 diff\u00e9rentes tailles   d\u2019\u00e9cran, un aspect crucial pour les applications Android modernes.</li> </ul> <p>En conclusion, Jetpack Compose repr\u00e9sente une \u00e9volution majeure dans le d\u00e9veloppement Android, offrant une approche plus moderne, efficace et agr\u00e9able pour cr\u00e9er des interfaces utilisateur. Bien qu\u2019il y ait une courbe d\u2019apprentissage initiale, les avantages \u00e0 long terme en termes de productivit\u00e9, de maintenabilit\u00e9 et de qualit\u00e9 du code sont significatifs.</p> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des  explications, des exemples et/ou des suggestions de structure. Toutes les informations ont  \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"2.%20Android/03-premi%C3%A8re-app/","title":"3. Premi\u00e8re application avec Jetpack Compose","text":"<p>Voici un exemple simple d\u2019une application \u201cBonjour !\u201d utilisant Jetpack Compose. Je vais vous pr\u00e9senter le code, puis expliquer chaque \u00e9l\u00e9ment important \u00e9tape par \u00e9tape.</p> <pre><code>import android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material.Text\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            Box(modifier = Modifier.fillMaxSize()) {\n                Text(\n                    text = \"Bonjour !\",\n                    modifier = Modifier.align(Alignment.Center)\n                )\n            }\n        }\n    }\n}\n</code></pre> <p>Maintenant, expliquons les \u00e9l\u00e9ments importants de cette application \u00e9tape par \u00e9tape :</p>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#explication-des-elements-cles","title":"Explication des \u00e9l\u00e9ments cl\u00e9s","text":""},{"location":"2.%20Android/03-premi%C3%A8re-app/#1-imports","title":"1. Imports","text":"<pre><code>import android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material.Text\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\n</code></pre> <ul> <li>Ces imports sont n\u00e9cessaires pour utiliser les classes et fonctions de Jetpack Compose.</li> </ul>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#2-definition-de-lactivite-principale","title":"2. D\u00e9finition de l\u2019activit\u00e9 principale","text":"<pre><code>class MainActivity : ComponentActivity() {\n    // ...\n}\n</code></pre> <ul> <li><code>MainActivity</code> h\u00e9rite de <code>ComponentActivity</code>, qui est la classe de base recommand\u00e9e pour les activit\u00e9s utilisant   Compose.</li> </ul>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#3-methode-oncreate","title":"3. M\u00e9thode onCreate","text":"<pre><code>override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    // ...\n}\n</code></pre> <ul> <li>Cette m\u00e9thode est appel\u00e9e lorsque l\u2019activit\u00e9 est cr\u00e9\u00e9e.</li> </ul>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#4-setcontent","title":"4. setContent","text":"<pre><code>setContent {\n    // Contenu Compose\n}\n</code></pre> <ul> <li><code>setContent</code> est une fonction sp\u00e9cifique \u00e0 Compose qui d\u00e9finit le contenu de l\u2019interface utilisateur.</li> <li>Tout ce qui est \u00e0 l\u2019int\u00e9rieur de cette fonction est du code Compose.</li> </ul>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#5-box-layout","title":"5. Box Layout","text":"<pre><code>Box(modifier = Modifier.fillMaxSize()) {\n    // Contenu du Box\n}\n</code></pre> <ul> <li><code>Box</code> est un composant de mise en page qui permet d\u2019empiler des \u00e9l\u00e9ments.</li> <li><code>Modifier.fillMaxSize()</code> fait en sorte que le Box occupe tout l\u2019espace disponible \u00e0 l\u2019\u00e9cran.</li> </ul>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#6-text-composable","title":"6. Text Composable","text":"<pre><code>Text(\n    text = \"Bonjour !\",\n    modifier = Modifier.align(Alignment.Center)\n)\n</code></pre> <ul> <li><code>Text</code> est un composant Compose pour afficher du texte.</li> <li><code>text = \"Bonjour !\"</code> d\u00e9finit le texte \u00e0 afficher.</li> <li><code>Modifier.align(Alignment.Center)</code> centre le texte dans le Box.</li> </ul>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#points-cles-a-retenir","title":"Points cl\u00e9s \u00e0 retenir","text":"<ol> <li> <p>Composables : Dans Compose, l\u2019interface utilisateur est construite \u00e0 partir de fonctions composables (    comme <code>Text</code>).</p> </li> <li> <p>D\u00e9claratif : Le code d\u00e9crit ce qui doit \u00eatre affich\u00e9, pas comment le construire \u00e9tape par \u00e9tape.</p> </li> <li> <p>Modifiers : Les <code>Modifier</code> sont utilis\u00e9s pour personnaliser l\u2019apparence et le comportement des composants.</p> </li> <li> <p>Hi\u00e9rarchie : Les composants sont organis\u00e9s de mani\u00e8re hi\u00e9rarchique (ici, <code>Text</code> est \u00e0 l\u2019int\u00e9rieur de <code>Box</code>).</p> </li> <li> <p>Pas de XML : Contrairement au d\u00e9veloppement Android traditionnel, il n\u2019y a pas de fichiers XML pour d\u00e9finir la    mise en page.</p> </li> </ol> <p>Cette application simple affiche \u201cBonjour !\u201d au centre de l\u2019\u00e9cran. C\u2019est un point de d\u00e9part id\u00e9al pour commencer \u00e0 explorer Jetpack Compose, car elle illustre les concepts de base sans trop de complexit\u00e9.</p>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#definition-de-fonctions-composables","title":"D\u00e9finition de fonctions composables","text":"<p>Excellent ! Voici l\u2019exemple modifi\u00e9 avec une fonction composable d\u00e9finie pour la <code>Box</code>, et son appel dans <code>onCreate</code>. Je vais ensuite expliquer les modifications.</p> <pre><code>import android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.tooling.preview.Preview\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            BonjourScreen()\n        }\n    }\n}\n\n@Composable\nfun BonjourScreen() {\n    Box(modifier = Modifier.fillMaxSize()) {\n        Text(\n            text = \"Hello World!\",\n            modifier = Modifier.align(Alignment.Center)\n        )\n    }\n}\n\n@Preview(showBackground = true)\n@Composable\nfun BonjourPreview() {\n    BonjourScreen()\n}\n</code></pre> <p>Expliquons maintenant les modifications et leurs implications :</p>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#explications-des-modifications","title":"Explications des modifications","text":""},{"location":"2.%20Android/03-premi%C3%A8re-app/#1-nouvelle-fonction-composable-bonjourscreen","title":"1. Nouvelle fonction composable <code>BonjourScreen</code>","text":"<pre><code>@Composable\nfun BonjourScreen() {\n    Box(modifier = Modifier.fillMaxSize()) {\n        Text(\n            text = \"Hello World!\",\n            modifier = Modifier.align(Alignment.Center)\n        )\n    }\n}\n</code></pre> <ul> <li>Cette nouvelle fonction est annot\u00e9e avec <code>@Composable</code>, indiquant qu\u2019il s\u2019agit d\u2019une fonction composable Jetpack   Compose.</li> <li>Elle encapsule la logique d\u2019affichage qui \u00e9tait pr\u00e9c\u00e9demment directement dans <code>setContent</code>.</li> <li>Cette approche am\u00e9liore la r\u00e9utilisabilit\u00e9 et la lisibilit\u00e9 du code.</li> </ul>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#2-modification-de-oncreate","title":"2. Modification de <code>onCreate</code>","text":"<pre><code>override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContent {\n        BonjourScreen()\n    }\n}\n</code></pre> <ul> <li>Au lieu de d\u00e9finir directement le contenu dans <code>setContent</code>, nous appelons maintenant notre fonction   composable <code>BonjourScreen</code>.</li> <li>Cela rend le code de <code>onCreate</code> plus concis et plus clair.</li> </ul>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#3-ajout-dune-fonction-de-previsualisation","title":"3. Ajout d\u2019une fonction de pr\u00e9visualisation","text":"<pre><code>@Preview(showBackground = true)\n@Composable\nfun BonjourPreview() {\n    BonjourScreen()\n}\n</code></pre> <ul> <li>Cette nouvelle fonction est annot\u00e9e avec <code>@Preview</code>, ce qui permet de pr\u00e9visualiser le composant dans Android Studio   sans avoir \u00e0 ex\u00e9cuter l\u2019application.</li> <li><code>showBackground = true</code> ajoute un arri\u00e8re-plan \u00e0 la pr\u00e9visualisation pour une meilleure visibilit\u00e9.</li> <li>Elle appelle <code>BonjourScreen()</code>, permettant de voir exactement ce qui sera affich\u00e9 dans l\u2019application.</li> </ul>"},{"location":"2.%20Android/03-premi%C3%A8re-app/#implications-et-avantages-de-ces-modifications","title":"Implications et avantages de ces modifications","text":"<ol> <li> <p>S\u00e9paration des pr\u00e9occupations : La logique d\u2019affichage est maintenant s\u00e9par\u00e9e de la logique de l\u2019activit\u00e9, ce qui    est une bonne pratique de programmation.</p> </li> <li> <p>R\u00e9utilisabilit\u00e9 : <code>BonjourScreen</code> peut \u00eatre facilement r\u00e9utilis\u00e9 ailleurs dans l\u2019application si n\u00e9cessaire.</p> </li> <li> <p>Testabilit\u00e9 : Il est plus facile de tester <code>BonjourScreen</code> de mani\u00e8re isol\u00e9e.</p> </li> <li> <p>Pr\u00e9visualisation : L\u2019ajout de la fonction de pr\u00e9visualisation permet aux d\u00e9veloppeurs de voir rapidement les    changements d\u2019interface sans avoir \u00e0 compiler et ex\u00e9cuter l\u2019application enti\u00e8re.</p> </li> <li> <p>Modularit\u00e9 : Cette structure facilite l\u2019ajout futur de fonctionnalit\u00e9s ou de modifications \u00e0 l\u2019interface    utilisateur.</p> </li> <li> <p>Lisibilit\u00e9 : Le code est plus clair et plus facile \u00e0 comprendre, chaque partie ayant un r\u00f4le bien d\u00e9fini.</p> </li> <li> <p>\u00c9volutivit\u00e9 : \u00c0 mesure que l\u2019application se d\u00e9veloppe, cette structure permet d\u2019ajouter facilement de nouveaux    composants et \u00e9crans.</p> </li> </ol> <p>Cette approche est typique du d\u00e9veloppement avec Jetpack Compose, o\u00f9 l\u2019interface utilisateur est construite \u00e0 partir de composants r\u00e9utilisables et pr\u00e9visualisables. C\u2019est une base solide pour d\u00e9velopper des applications plus complexes tout en maintenant un code propre et organis\u00e9.</p> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des  explications, des exemples et/ou des suggestions de structure. Toutes les informations ont  \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"2.%20Android/04-hockey-v1/","title":"4. Application Hockey Version 1","text":"<p>Ce code d\u00e9finit une structure pour repr\u00e9senter des joueurs de hockey et cr\u00e9e des composants d\u2019interface utilisateur en utilisant Jetpack Compose pour afficher ces joueurs dans une liste. Il comprend une classe de donn\u00e9es pour les joueurs, une fonction pour g\u00e9n\u00e9rer des exemples de joueurs, et deux fonctions composables principales : une pour afficher une carte de joueur individuelle et une autre pour afficher une liste de ces cartes.</p>"},{"location":"2.%20Android/04-hockey-v1/#explication-detaillee-des-fonctions-composables","title":"Explication d\u00e9taill\u00e9e des fonctions composables","text":""},{"location":"2.%20Android/04-hockey-v1/#playercard","title":"<code>PlayerCard</code>","text":"<pre><code>@Composable\nfun PlayerCard(player: Player, modifier: Modifier = Modifier) {\n    // ...\n}\n</code></pre> <p>Cette fonction composable cr\u00e9e une carte pour afficher les informations d\u2019un joueur individuel.</p> <ul> <li>Elle prend en param\u00e8tre un objet <code>Player</code> et un <code>Modifier</code> optionnel.</li> <li>Utilise un composant <code>Card</code> pour cr\u00e9er une carte avec des coins arrondis et une bordure.</li> <li>\u00c0 l\u2019int\u00e9rieur de la carte, elle organise le contenu dans une <code>Column</code> (colonne verticale).</li> <li>La premi\u00e8re <code>Row</code> (ligne horizontale) contient l\u2019image du joueur.</li> <li>La deuxi\u00e8me <code>Row</code> affiche le num\u00e9ro et le nom du joueur.</li> </ul> <p>Composants utilis\u00e9s :</p> <ul> <li><code>Card</code> : Cr\u00e9e une surface \u00e9lev\u00e9e avec une ombre et un contenu.</li> <li><code>Column</code> : Organise les \u00e9l\u00e9ments verticalement.</li> <li><code>Row</code> : Organise les \u00e9l\u00e9ments horizontalement.</li> <li><code>Image</code> : Affiche l\u2019image du joueur.</li> <li><code>Text</code> : Affiche le texte (num\u00e9ro et nom du joueur).</li> <li><code>Spacer</code> : Cr\u00e9e un espace entre les \u00e9l\u00e9ments.</li> </ul> <p>Modificateurs utilis\u00e9s :</p> <ul> <li><code>fillMaxWidth()</code> : Remplit toute la largeur disponible.</li> <li><code>padding()</code> : Ajoute de l\u2019espace autour des \u00e9l\u00e9ments.</li> <li><code>background()</code> : D\u00e9finit la couleur de fond.</li> <li><code>width()</code> : D\u00e9finit une largeur sp\u00e9cifique.</li> </ul>"},{"location":"2.%20Android/04-hockey-v1/#playerlist","title":"<code>PlayerList</code>","text":"<pre><code>@Composable\nfun PlayerList(modifier: Modifier = Modifier) {\n    LazyColumn(modifier = modifier) {\n        items(getSamplePlayers()) {\n            PlayerCard(player = it)\n        }\n    }\n}\n</code></pre> <p>Cette fonction composable cr\u00e9e une liste d\u00e9roulante de cartes de joueurs.</p> <ul> <li>Elle utilise <code>LazyColumn</code>, qui est optimis\u00e9e pour afficher de longues listes d\u2019\u00e9l\u00e9ments.</li> <li>La fonction <code>items()</code> est utilis\u00e9e pour g\u00e9n\u00e9rer dynamiquement les \u00e9l\u00e9ments de la liste \u00e0 partir de la liste de joueurs   retourn\u00e9e par <code>getSamplePlayers()</code>.</li> <li>Pour chaque joueur dans la liste, elle cr\u00e9e une <code>PlayerCard</code>.</li> </ul> <p>Composant principal :</p> <ul> <li><code>LazyColumn</code> : Un conteneur de d\u00e9filement vertical qui charge et affiche uniquement les \u00e9l\u00e9ments visibles \u00e0 l\u2019\u00e9cran,   ce qui le rend efficace pour les longues listes.</li> </ul> <p>Ces deux fonctions composables travaillent ensemble pour cr\u00e9er une interface utilisateur interactive et efficace pour afficher une liste de joueurs de hockey. <code>PlayerCard</code> g\u00e8re l\u2019affichage des d\u00e9tails individuels des joueurs, tandis que <code>PlayerList</code> organise ces cartes dans une liste d\u00e9roulante.</p> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des  explications, des exemples et/ou des suggestions de structure. Toutes les informations ont  \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"2.%20Android/05-etats-evenements/","title":"5. Gestion des \u00e9tats et des \u00e9v\u00e9nements","text":""},{"location":"2.%20Android/05-etats-evenements/#exemple-exemplesentrees","title":"Exemple : ExemplesEntrees","text":"<p>Exemple sur GitHub</p>"},{"location":"2.%20Android/05-etats-evenements/#fonction-textlengthcounter","title":"Fonction <code>TextLengthCounter</code>","text":"<p>La fonction <code>TextLengthCounter</code> est un composable Jetpack Compose qui cr\u00e9e une interface utilisateur permettant \u00e0 l\u2019utilisateur de saisir du texte et d\u2019afficher sa longueur en caract\u00e8res. Elle utilise des \u00e9tats pour g\u00e9rer le texte saisi et sa longueur, et met \u00e0 jour dynamiquement l\u2019affichage.</p> <p>Voici une description d\u00e9taill\u00e9e de la fonction :</p>"},{"location":"2.%20Android/05-etats-evenements/#declaration-de-la-fonction","title":"D\u00e9claration de la fonction :","text":"<p><pre><code>@Composable\nfun TextLengthCounter(modifier: Modifier = Modifier)\n</code></pre> - C\u2019est une fonction composable qui peut recevoir un <code>Modifier</code> en param\u00e8tre.</p>"},{"location":"2.%20Android/05-etats-evenements/#gestion-de-letat","title":"Gestion de l\u2019\u00e9tat :","text":"<p><pre><code>var text by remember { mutableStateOf(\"\") }\nvar length by remember { mutableIntStateOf(0) }\n</code></pre> - Deux variables d\u2019\u00e9tat sont cr\u00e9\u00e9es : <code>text</code> pour stocker le texte saisi et <code>length</code> pour la longueur du texte. - <code>remember</code> est utilis\u00e9 pour conserver ces \u00e9tats entre les recompositions.</p>"},{"location":"2.%20Android/05-etats-evenements/#structure-de-linterface","title":"Structure de l\u2019interface :","text":"<pre><code>Column(\n    modifier = Modifier\n        .padding(16.dp)\n        .fillMaxWidth(),\n    horizontalAlignment = Alignment.CenterHorizontally\n) {\n    // Contenu de la colonne\n}\n</code></pre> <ul> <li>Un <code>Column</code> est utilis\u00e9 pour organiser verticalement les \u00e9l\u00e9ments de l\u2019interface.</li> <li>Un padding de 16dp est appliqu\u00e9, et la colonne occupe toute la largeur disponible.</li> <li>Les \u00e9l\u00e9ments sont centr\u00e9s horizontalement.</li> </ul>"},{"location":"2.%20Android/05-etats-evenements/#champ-de-saisie","title":"Champ de saisie :","text":"<pre><code>TextField(\n    value = text,\n    onValueChange = {\n        text = it\n        length = text.length\n    },\n    label = { Text(\"Entrez du texte\") },\n    modifier = Modifier.fillMaxWidth()\n)\n</code></pre> <ul> <li>Un <code>TextField</code> permet \u00e0 l\u2019utilisateur de saisir du texte.</li> <li>La valeur du champ est li\u00e9e \u00e0 l\u2019\u00e9tat <code>text</code>.</li> <li>\u00c0 chaque changement, <code>text</code> est mis \u00e0 jour et <code>length</code> est recalcul\u00e9.</li> </ul>"},{"location":"2.%20Android/05-etats-evenements/#espacement","title":"Espacement :","text":"<pre><code>Spacer(modifier = Modifier.height(16.dp))\n</code></pre> <ul> <li>Des <code>Spacer</code> sont utilis\u00e9s pour ajouter de l\u2019espace vertical entre les \u00e9l\u00e9ments.</li> </ul>"},{"location":"2.%20Android/05-etats-evenements/#bouton-de-calcul","title":"Bouton de calcul :","text":"<pre><code>Button(\n    onClick = { length = text.length }\n) {\n    Text(\"Calculer la longueur\")\n}\n</code></pre> <ul> <li>Un bouton permet de recalculer manuellement la longueur du texte.</li> </ul>"},{"location":"2.%20Android/05-etats-evenements/#affichage-de-la-longueur","title":"Affichage de la longueur :","text":"<pre><code>Text(\"Longueur du texte : $length caract\u00e8res\")\n</code></pre> <ul> <li>Un <code>Text</code> affiche la longueur actuelle du texte.</li> </ul> <p>Cette fonction illustre plusieurs concepts importants de Jetpack Compose, notamment la gestion de l\u2019\u00e9tat, la r\u00e9activit\u00e9 des composants, et l\u2019organisation de l\u2019interface utilisateur. Elle montre comment cr\u00e9er une interface interactive simple, mais fonctionnelle.</p>"},{"location":"2.%20Android/05-etats-evenements/#gestion-de-letat-avec-remember-et-mutablestateof","title":"Gestion de l\u2019\u00e9tat avec <code>remember</code> et <code>mutableStateOf</code>","text":"<p>Dans Jetpack Compose, l\u2019\u00e9tat est un concept crucial. Il repr\u00e9sente toute donn\u00e9e qui peut changer au fil du temps et qui, lorsqu\u2019elle change, peut d\u00e9clencher une recomposition de l\u2019interface utilisateur.</p> <pre><code>var text by remember { mutableStateOf(\"\") }\nvar length by remember { mutableIntStateOf(0) }\n</code></pre>"},{"location":"2.%20Android/05-etats-evenements/#role-de-remember","title":"R\u00f4le de <code>remember</code>","text":"<ul> <li><code>remember</code> est une fonction qui permet de conserver un objet entre les recompositions.</li> <li>Sans <code>remember</code>, chaque recomposition cr\u00e9erait un nouvel objet, perdant ainsi l\u2019\u00e9tat pr\u00e9c\u00e9dent.</li> <li><code>remember</code> \u201cm\u00e9morise\u201d l\u2019objet initial et le r\u00e9utilise lors des recompositions suivantes.</li> </ul>"},{"location":"2.%20Android/05-etats-evenements/#fonction-de-mutablestateof","title":"Fonction de <code>mutableStateOf</code>","text":"<ul> <li><code>mutableStateOf</code> cr\u00e9e un objet <code>MutableState&lt;T&gt;</code> qui encapsule une valeur mutable.</li> <li>Lorsque cette valeur change, Compose est notifi\u00e9 et peut d\u00e9clencher une recomposition si n\u00e9cessaire.</li> <li><code>mutableIntStateOf</code> est une version sp\u00e9cialis\u00e9e pour les entiers, optimis\u00e9e pour les performances.</li> </ul>"},{"location":"2.%20Android/05-etats-evenements/#delegation-avec-by","title":"D\u00e9l\u00e9gation avec <code>by</code>","text":"<ul> <li>Le mot-cl\u00e9 <code>by</code> est utilis\u00e9 pour la d\u00e9l\u00e9gation de propri\u00e9t\u00e9 en Kotlin.</li> <li>Il permet d\u2019utiliser directement <code>text</code> et <code>length</code> comme s\u2019ils \u00e9taient des variables normales, tout en b\u00e9n\u00e9ficiant de   la r\u00e9activit\u00e9 de <code>MutableState</code>.</li> </ul>"},{"location":"2.%20Android/05-etats-evenements/#lambdas-et-mise-a-jour-de-letat","title":"Lambdas et mise \u00e0 jour de l\u2019\u00e9tat","text":"<p>Les lambdas sont utilis\u00e9es pour d\u00e9finir des comportements en r\u00e9ponse \u00e0 des \u00e9v\u00e9nements, comme les changements de valeur ou les clics.</p>"},{"location":"2.%20Android/05-etats-evenements/#dans-le-textfield","title":"Dans le TextField","text":"<pre><code>onValueChange = {\n    text = it\n    length = text.length\n}\n</code></pre> <ul> <li>Cette lambda est appel\u00e9e chaque fois que le contenu du <code>TextField</code> change.</li> <li><code>it</code> repr\u00e9sente la nouvelle valeur du champ texte.</li> <li>La lambda met \u00e0 jour <code>text</code> avec la nouvelle valeur et recalcule imm\u00e9diatement <code>length</code>.</li> <li>Ces mises \u00e0 jour d\u00e9clenchent une recomposition, mettant \u00e0 jour l\u2019interface utilisateur.</li> </ul>"},{"location":"2.%20Android/05-etats-evenements/#dans-le-button","title":"Dans le Button","text":"<pre><code>onClick = { length = text.length }\n</code></pre> <ul> <li>Cette lambda est plus simple, elle est appel\u00e9e lors d\u2019un clic sur le bouton.</li> <li>Elle recalcule <code>length</code> bas\u00e9 sur la valeur actuelle de <code>text</code>.</li> <li>Bien que cela semble redondant ici (car <code>length</code> est d\u00e9j\u00e0 \u00e0 jour), cela pourrait \u00eatre utile dans des sc\u00e9narios plus   complexes.</li> </ul>"},{"location":"2.%20Android/05-etats-evenements/#reactivite-et-flux-de-donnees","title":"R\u00e9activit\u00e9 et flux de donn\u00e9es","text":"<ol> <li>Lorsque l\u2019utilisateur tape du texte, <code>onValueChange</code> est appel\u00e9.</li> <li><code>text</code> est mis \u00e0 jour, ce qui notifie Compose d\u2019un changement d\u2019\u00e9tat.</li> <li><code>length</code> est \u00e9galement mis \u00e0 jour imm\u00e9diatement.</li> <li>Compose d\u00e9tecte ces changements d\u2019\u00e9tat et d\u00e9clenche une recomposition.</li> <li>Lors de la recomposition, le <code>TextField</code> affiche le nouveau texte, et le <code>Text</code> en bas affiche la nouvelle longueur.</li> </ol> <p>Cette approche assure que l\u2019interface utilisateur reste toujours synchronis\u00e9e avec l\u2019\u00e9tat interne de l\u2019application, offrant une exp\u00e9rience r\u00e9active et coh\u00e9rente \u00e0 l\u2019utilisateur.</p> <p>En r\u00e9sum\u00e9, cet exemple illustre comment Jetpack Compose utilise la gestion de l\u2019\u00e9tat, les lambdas, et la recomposition pour cr\u00e9er une interface utilisateur dynamique et r\u00e9active. La combinaison de <code>remember</code> et <code>mutableStateOf</code> permet de maintenir et de g\u00e9rer efficacement l\u2019\u00e9tat, tandis que les lambdas fournissent un moyen \u00e9l\u00e9gant de r\u00e9agir aux interactions de l\u2019utilisateur et de mettre \u00e0 jour l\u2019\u00e9tat en cons\u00e9quence.</p>"},{"location":"2.%20Android/05-etats-evenements/#fonction-fruitselector","title":"Fonction <code>FruitSelector</code>","text":"<p>La fonction <code>FruitSelector</code> est un composable Jetpack Compose qui cr\u00e9e un s\u00e9lecteur de fruits sous forme de menu d\u00e9roulant. Elle permet \u00e0 l\u2019utilisateur de choisir un fruit parmi une liste pr\u00e9d\u00e9finie et affiche le fruit s\u00e9lectionn\u00e9.</p> <pre><code>@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun FruitSelector(modifier: Modifier = Modifier) {\n</code></pre>"},{"location":"2.%20Android/05-etats-evenements/#declaration-de-la-fonction_1","title":"D\u00e9claration de la fonction","text":"<pre><code>- `@OptIn(ExperimentalMaterial3Api::class)` indique l'utilisation d'API exp\u00e9rimentales de Material 3.\n- C'est une fonction composable qui accepte un `modifier` optionnel.\n</code></pre> <pre><code>    val fruits = listOf(\"Pomme\", \"Banane\", \"Orange\", \"Fraise\", \"Kiwi\")\n    var expanded by remember { mutableStateOf(false) }\n    var selectedFruit by rememberSaveable { mutableStateOf(\"\") }\n</code></pre>"},{"location":"2.%20Android/05-etats-evenements/#initialisation-des-etats","title":"Initialisation des \u00e9tats","text":"<ul> <li><code>fruits</code> est une liste statique de fruits.</li> <li><code>expanded</code> est un \u00e9tat bool\u00e9en pour contr\u00f4ler l\u2019ouverture/fermeture du menu d\u00e9roulant.</li> <li><code>selectedFruit</code> est un \u00e9tat pour stocker le fruit s\u00e9lectionn\u00e9. <code>rememberSaveable</code> est utilis\u00e9 pour conserver la   s\u00e9lection m\u00eame apr\u00e8s une reconfiguration (comme une rotation d\u2019\u00e9cran).</li> </ul> <pre><code>    Column(modifier = modifier.padding(16.dp)) {\n       ExposedDropdownMenuBox(\n           expanded = expanded,\n           onExpandedChange = { expanded = !expanded }\n       ) {\n</code></pre>"},{"location":"2.%20Android/05-etats-evenements/#structure-de-linterface_1","title":"Structure de l\u2019interface","text":"<ul> <li>Un <code>Column</code> contient tous les \u00e9l\u00e9ments avec un padding de 16dp.</li> <li><code>ExposedDropdownMenuBox</code> est le conteneur principal du menu d\u00e9roulant.</li> </ul> <pre><code>            TextField(\n                value = selectedFruit,\n                onValueChange = {},\n                readOnly = true,\n                label = { Text(\"Choisissez un fruit\") },\n                trailingIcon = {\n                    ExposedDropdownMenuDefaults\n                        .TrailingIcon(expanded = expanded)\n                },\n                modifier = Modifier\n                    .menuAnchor()\n                    .fillMaxWidth()\n            )\n</code></pre>"},{"location":"2.%20Android/05-etats-evenements/#champ-de-texte-du-selecteur","title":"Champ de texte du s\u00e9lecteur","text":"<ul> <li>Un <code>TextField</code> affiche le fruit s\u00e9lectionn\u00e9.</li> <li>Il est en lecture seule (<code>readOnly = true</code>).</li> <li>Une ic\u00f4ne de menu d\u00e9roulant est ajout\u00e9e \u00e0 droite.</li> <li><code>.menuAnchor()</code> lie ce champ au menu d\u00e9roulant.</li> </ul> <pre><code>            ExposedDropdownMenu(\n                expanded = expanded,\n                onDismissRequest = { expanded = false }\n            ) {\n                fruits.forEach { fruit -&gt;\n                    DropdownMenuItem(\n                        text = { Text(fruit) },\n                        onClick = {\n                            selectedFruit = fruit\n                            expanded = false\n                        }\n                    )\n                }\n            }\n</code></pre>"},{"location":"2.%20Android/05-etats-evenements/#menu-deroulant","title":"Menu d\u00e9roulant","text":"<ul> <li><code>ExposedDropdownMenu</code> contient la liste des fruits.</li> <li>Chaque fruit est repr\u00e9sent\u00e9 par un <code>DropdownMenuItem</code>.</li> <li>Lors du clic sur un fruit, <code>selectedFruit</code> est mis \u00e0 jour et le menu se ferme.</li> </ul> <pre><code>        Spacer(modifier = Modifier.height(16.dp))\n\n        if (selectedFruit.isNotEmpty()) {\n            Text(\"Fruit s\u00e9lectionn\u00e9 : $selectedFruit\")\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/05-etats-evenements/#affichage-de-la-selection","title":"Affichage de la s\u00e9lection","text":"<ul> <li>Un espace vertical est ajout\u00e9.</li> <li>Si un fruit est s\u00e9lectionn\u00e9, il est affich\u00e9 en dessous du menu.</li> </ul>"},{"location":"2.%20Android/05-etats-evenements/#fonctionnement-global","title":"Fonctionnement global","text":"<ul> <li>L\u2019utilisateur voit un champ de texte avec un label \u201cChoisissez un fruit\u201d.</li> <li>En cliquant sur le champ, un menu d\u00e9roulant s\u2019ouvre avec la liste des fruits.</li> <li>La s\u00e9lection d\u2019un fruit met \u00e0 jour l\u2019\u00e9tat <code>selectedFruit</code> et ferme le menu.</li> <li>Le fruit s\u00e9lectionn\u00e9 est affich\u00e9 dans le champ de texte et en dessous.</li> </ul> <p>Cette fonction illustre plusieurs concepts avanc\u00e9s de Jetpack Compose :</p> <ul> <li>Utilisation de composants Material 3 pour cr\u00e9er un menu d\u00e9roulant interactif.</li> <li>Gestion d\u2019\u00e9tats avec <code>remember</code> et <code>rememberSaveable</code>.</li> <li>Cr\u00e9ation d\u2019une interface utilisateur dynamique et r\u00e9active.</li> <li>Utilisation de lambdas pour g\u00e9rer les interactions utilisateur.</li> <li>Conditionnement de l\u2019affichage bas\u00e9 sur l\u2019\u00e9tat (<code>if (selectedFruit.isNotEmpty())</code>).</li> </ul> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des  explications, des exemples et/ou des suggestions de structure. Toutes les informations ont  \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"2.%20Android/06-hockey-v2/","title":"6. Application Hockey Version 2","text":""},{"location":"2.%20Android/06-hockey-v2/#explication-de-playerlistwithsearch","title":"Explication de <code>PlayerListWithSearch</code>","text":"<p>Cette nouvelle version ajoute une fonctionnalit\u00e9 de recherche \u00e0 la liste des joueurs. Voici une explication d\u00e9taill\u00e9e des modifications :</p>"},{"location":"2.%20Android/06-hockey-v2/#fonction-getplayers","title":"Fonction <code>getPlayers</code>","text":"<pre><code>fun getPlayers(name: String? = null): List&lt;Player&gt; =\n    if (name == null)\n        getSamplePlayers()\n    else\n        getSamplePlayers().filter { it.name.lowercase().contains(name.lowercase()) }.toList()\n</code></pre> <p>Cette fonction permet de filtrer la liste des joueurs en fonction d\u2019un crit\u00e8re de recherche :</p> <ul> <li>Si <code>name</code> est <code>null</code>, elle retourne tous les joueurs.</li> <li>Sinon, elle filtre la liste pour ne retourner que les joueurs dont le nom contient la cha\u00eene de recherche (insensible   \u00e0 la casse).</li> </ul>"},{"location":"2.%20Android/06-hockey-v2/#composable-playerlistwithsearch","title":"Composable <code>PlayerListWithSearch</code>","text":"<pre><code>@Composable\nfun PlayerListWithSearch(modifier: Modifier = Modifier) {\n    var searchCriteria by rememberSaveable { mutableStateOf(\"\") }\n    Column {\n        TextField(\n            value = searchCriteria,\n            onValueChange = { searchCriteria = it },\n            modifier = modifier\n        )\n        LazyColumn(modifier = modifier.fillMaxSize()) {\n            items(getPlayers(searchCriteria)) {\n                PlayerCard(player = it)\n            }\n        }\n    }\n}\n</code></pre> <p>Ce composable remplace <code>PlayerList</code> et ajoute une fonctionnalit\u00e9 de recherche :</p> <ol> <li> <p><code>searchCriteria</code> :</p> <ul> <li>Utilise <code>rememberSaveable</code> pour conserver l\u2019\u00e9tat de la recherche m\u00eame lors des recompositions.</li> <li><code>mutableStateOf(\"\")</code> initialise la valeur de recherche \u00e0 une cha\u00eene vide.</li> </ul> </li> <li> <p><code>Column</code> :</p> <ul> <li>Organise verticalement le champ de recherche et la liste des joueurs.</li> </ul> </li> <li> <p><code>TextField</code> :</p> <ul> <li>Permet \u00e0 l\u2019utilisateur d\u2019entrer un crit\u00e8re de recherche.</li> <li><code>value = searchCriteria</code> affiche la valeur actuelle.</li> <li><code>onValueChange = { searchCriteria = it }</code> met \u00e0 jour <code>searchCriteria</code> \u00e0 chaque modification.</li> </ul> </li> <li> <p><code>LazyColumn</code> :</p> <ul> <li>Similaire \u00e0 la version pr\u00e9c\u00e9dente, mais utilise maintenant <code>getPlayers(searchCriteria)</code>.</li> <li>Cela filtre dynamiquement la liste des joueurs en fonction du crit\u00e8re de recherche.</li> </ul> </li> <li> <p><code>items</code> :</p> <ul> <li>Cr\u00e9e une <code>PlayerCard</code> pour chaque joueur filtr\u00e9.</li> </ul> </li> </ol> <p>Cette nouvelle version offre une exp\u00e9rience utilisateur plus interactive, permettant de rechercher des joueurs sp\u00e9cifiques dans la liste. La liste se met \u00e0 jour automatiquement \u00e0 chaque modification du texte dans le champ de recherche, gr\u00e2ce \u00e0 l\u2019utilisation de l\u2019\u00e9tat (<code>searchCriteria</code>) et de la recomposition automatique de Jetpack Compose.</p> <p>Certainement. Voici une explication plus d\u00e9taill\u00e9e des connexions entre ces \u00e9l\u00e9ments, format\u00e9e en markdown avec le code Kotlin appropri\u00e9 :</p>"},{"location":"2.%20Android/06-hockey-v2/#connexions-entre-textfield-mutablestateof-onvaluechange-et-getplayers","title":"Connexions entre <code>TextField</code>, <code>mutableStateOf</code>, <code>onValueChange</code>, et <code>getPlayers()</code>","text":""},{"location":"2.%20Android/06-hockey-v2/#1-mutablestateof-et-etat-composable","title":"1. <code>mutableStateOf</code> et \u00c9tat Composable","text":"<pre><code>var searchCriteria by rememberSaveable { mutableStateOf(\"\") }\n</code></pre> <ul> <li><code>mutableStateOf(\"\")</code> cr\u00e9e un \u00e9tat mutable initialis\u00e9 avec une cha\u00eene vide.</li> <li><code>rememberSaveable</code> permet de conserver cet \u00e9tat m\u00eame lors des recompositions ou des changements de configuration.</li> <li><code>by</code> est utilis\u00e9 pour d\u00e9l\u00e9guer la propri\u00e9t\u00e9, permettant d\u2019acc\u00e9der et de modifier <code>searchCriteria</code> directement.</li> </ul>"},{"location":"2.%20Android/06-hockey-v2/#2-textfield-et-onvaluechange","title":"2. <code>TextField</code> et <code>onValueChange</code>","text":"<pre><code>TextField(\n    value = searchCriteria,\n    onValueChange = { searchCriteria = it },\n    modifier = modifier\n)\n</code></pre> <ul> <li><code>value = searchCriteria</code> : Le <code>TextField</code> affiche la valeur actuelle de <code>searchCriteria</code>.</li> <li><code>onValueChange = { searchCriteria = it }</code> : Lorsque l\u2019utilisateur tape dans le champ :<ul> <li><code>it</code> repr\u00e9sente la nouvelle valeur du champ.</li> <li>Cette nouvelle valeur est assign\u00e9e \u00e0 <code>searchCriteria</code>.</li> <li>Cela d\u00e9clenche une recomposition du composable.</li> </ul> </li> </ul>"},{"location":"2.%20Android/06-hockey-v2/#3-connexion-avec-getplayers","title":"3. Connexion avec <code>getPlayers()</code>","text":"<pre><code>LazyColumn(modifier = modifier.fillMaxSize()) {\n    items(getPlayers(searchCriteria)) {\n        PlayerCard(player = it)\n    }\n}\n</code></pre> <ul> <li><code>getPlayers(searchCriteria)</code> est appel\u00e9 avec la valeur actuelle de <code>searchCriteria</code>.</li> <li>Chaque fois que <code>searchCriteria</code> change :<ul> <li><code>getPlayers()</code> est rappel\u00e9 avec la nouvelle valeur.</li> <li>La liste des joueurs est filtr\u00e9e en fonction de cette nouvelle valeur.</li> <li><code>LazyColumn</code> se recompose avec la nouvelle liste filtr\u00e9e.</li> </ul> </li> </ul>"},{"location":"2.%20Android/06-hockey-v2/#4-flux-de-donnees-et-recomposition","title":"4. Flux de donn\u00e9es et recomposition","text":"<ol> <li>L\u2019utilisateur tape dans le <code>TextField</code>.</li> <li><code>onValueChange</code> est appel\u00e9, mettant \u00e0 jour <code>searchCriteria</code>.</li> <li>La mise \u00e0 jour de <code>searchCriteria</code> d\u00e9clenche une recomposition.</li> <li>Lors de la recomposition :<ul> <li><code>TextField</code> affiche la nouvelle valeur de <code>searchCriteria</code>.</li> <li><code>getPlayers(searchCriteria)</code> est appel\u00e9 avec la nouvelle valeur.</li> <li><code>LazyColumn</code> se recompose avec la nouvelle liste filtr\u00e9e.</li> </ul> </li> </ol> <p>Cette architecture r\u00e9active permet une mise \u00e0 jour en temps r\u00e9el de l\u2019interface utilisateur. Chaque frappe dans le champ de recherche d\u00e9clenche une cha\u00eene de r\u00e9actions qui aboutit \u00e0 l\u2019affichage filtr\u00e9 des joueurs, offrant une exp\u00e9rience utilisateur fluide et r\u00e9active.</p> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des  explications, des exemples et/ou des suggestions de structure. Toutes les informations ont  \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"2.%20Android/07-orientation/","title":"7. Orientation de l\u2019\u00e9cran","text":"<p>Pour d\u00e9tecter l\u2019orientation de l\u2019\u00e9cran (portrait ou paysage) avec Jetpack Compose, vous pouvez utiliser le <code>LocalConfiguration</code> composable. Voici comment proc\u00e9der :</p> <p>1- Importez les d\u00e9pendances n\u00e9cessaires :</p> <pre><code>import android.content.res.Configuration\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.platform.LocalConfiguration\n</code></pre> <p>2- Utilisez le <code>LocalConfiguration</code> dans votre composable pour obtenir la configuration actuelle :</p> <pre><code>@Composable\nfun MyScreen() {\n    val configuration = LocalConfiguration.current\n\n    when (configuration.orientation) {\n        Configuration.ORIENTATION_LANDSCAPE -&gt; {\n            // Code pour l'orientation paysage\n            Text(\"L'\u00e9cran est en mode paysage\")\n        }\n        else -&gt; {\n            // Code pour l'orientation portrait\n            Text(\"L'\u00e9cran est en mode portrait\")\n        }\n    }\n}\n</code></pre> <p>3- Pour observer les changements d\u2019orientation, vous pouvez utiliser un <code>State</code> :</p> <pre><code>@Composable\nfun OrientationAwareLayout() {\n    val configuration = LocalConfiguration.current\n    val orientation by remember { mutableStateOf(configuration.orientation) }\n\n    LaunchedEffect(configuration) {\n        snapshotFlow { configuration.orientation }\n            .collect { orientation = it }\n    }\n\n    when (orientation) {\n        Configuration.ORIENTATION_LANDSCAPE -&gt; {\n            // Mise en page pour le mode paysage\n        }\n        else -&gt; {\n            // Mise en page pour le mode portrait\n        }\n    }\n}\n</code></pre> <p>Cette approche permet \u00e0 votre composable de se recomposer automatiquement lorsque l\u2019orientation change[2].</p> <p>En utilisant ces m\u00e9thodes, vous pouvez cr\u00e9er des interfaces utilisateur r\u00e9actives qui s\u2019adaptent \u00e0 l\u2019orientation de l\u2019\u00e9cran. Cela est particuli\u00e8rement utile pour optimiser l\u2019exp\u00e9rience utilisateur sur diff\u00e9rents appareils et dans diff\u00e9rentes configurations d\u2019\u00e9cran[1][2].</p> <p>Citations:</p> <ul> <li>[1] https://developer.android.com/guide/practices/device-compatibility-mode?hl=fr</li> <li>[2] https://www.geeksforgeeks.org/detect-screen-orientation-in-android-using-jetpack-compose/</li> <li>[3] https://blog.ippon.fr/2023/04/28/developper-app-jetpack-compose-smartphones-pliables/</li> <li>[4] https://developer.android.com/develop/ui/compose/touch-input/pointer-input/drag-swipe-fling?hl=fr</li> <li>[5] https://developer.android.com/develop/ui/compose/touch-input/stylus-input/advanced-stylus-features?hl=fr</li> <li>[6] https://stackoverflow.com/questions/64753944/orientation-on-jetpack-compose</li> <li>[7] https://appmaster.io/fr/blog/comment-creer-une-interface-utilisateur-adaptative-avec-jetpack-compose</li> </ul>"},{"location":"2.%20Android/07-orientation/#exemple-complet","title":"Exemple complet","text":"<pre><code>import android.content.res.Configuration\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextField\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalConfiguration\nimport androidx.compose.ui.unit.dp\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun OrientationResponsiveLayout(modifier: Modifier = Modifier) {\n    var text1 by remember { mutableStateOf(\"\") }\n    var text2 by remember { mutableStateOf(\"\") }\n\n    val configuration = LocalConfiguration.current\n    val isLandscape = configuration.orientation == Configuration.ORIENTATION_LANDSCAPE\n\n    if (isLandscape) {\n        Column(\n            modifier = modifier\n                .fillMaxSize()\n                .padding(16.dp),\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            Row(\n                modifier = Modifier.fillMaxWidth(),\n                horizontalArrangement = Arrangement.SpaceBetween\n            ) {\n                TextField(\n                    value = text1,\n                    onValueChange = { text1 = it },\n                    label = { Text(\"Champ 1\") },\n                    modifier = Modifier.weight(1f).padding(end = 8.dp)\n                )\n                TextField(\n                    value = text2,\n                    onValueChange = { text2 = it },\n                    label = { Text(\"Champ 2\") },\n                    modifier = Modifier.weight(1f).padding(start = 8.dp)\n                )\n            }\n            Spacer(modifier = Modifier.height(16.dp))\n            Button(onClick = { /* Action du bouton */ }) {\n                Text(\"Valider\")\n            }\n        }\n    } else {\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(16.dp),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.spacedBy(16.dp)\n        ) {\n            TextField(\n                value = text1,\n                onValueChange = { text1 = it },\n                label = { Text(\"Champ 1\") },\n                modifier = Modifier.fillMaxWidth()\n            )\n            TextField(\n                value = text2,\n                onValueChange = { text2 = it },\n                label = { Text(\"Champ 2\") },\n                modifier = Modifier.fillMaxWidth()\n            )\n            Button(onClick = { /* Action du bouton */ }) {\n                Text(\"Valider\")\n            }\n        }\n    }\n}\n</code></pre> <p>Dans cet exemple :</p> <ol> <li> <p>Nous utilisons <code>LocalConfiguration.current</code> pour obtenir la configuration actuelle de l\u2019\u00e9cran[5].</p> </li> <li> <p>Nous v\u00e9rifions si l\u2019orientation est en mode paysage en comparant <code>configuration.orientation</code> avec <code>Configuration.ORIENTATION_LANDSCAPE</code>[5].</p> </li> <li> <p>En mode portrait (par d\u00e9faut) :</p> </li> </ol> <ul> <li>Nous utilisons une <code>Column</code> pour agencer verticalement deux <code>TextField</code> et un <code>Button</code>[5].</li> <li>Les \u00e9l\u00e9ments sont espac\u00e9s uniform\u00e9ment gr\u00e2ce \u00e0 <code>verticalArrangement = Arrangement.spacedBy(16.dp)</code>.</li> </ul> <ol> <li>En mode paysage :</li> </ol> <ul> <li>Nous utilisons une <code>Column</code> principale pour l\u2019agencement global.</li> <li>\u00c0 l\u2019int\u00e9rieur, nous utilisons une <code>Row</code> pour placer les deux <code>TextField</code> c\u00f4te \u00e0 c\u00f4te.</li> <li>Le <code>Button</code> est plac\u00e9 en dessous de la <code>Row</code> avec un <code>Spacer</code> pour ajouter un espacement.</li> </ul> <ol> <li> <p>Les <code>TextField</code> utilisent <code>Modifier.weight(1f)</code> en mode paysage pour occuper un espace \u00e9gal dans la <code>Row</code>[2].</p> </li> <li> <p>Nous utilisons <code>remember</code> et <code>mutableStateOf</code> pour g\u00e9rer l\u2019\u00e9tat des champs de texte, permettant ainsi \u00e0 l\u2019utilisateur d\u2019interagir avec eux[5].</p> </li> </ol> <p>Ce composable s\u2019adaptera automatiquement \u00e0 l\u2019orientation de l\u2019\u00e9cran, offrant une mise en page optimis\u00e9e pour les modes portrait et paysage. Il d\u00e9montre comment cr\u00e9er des interfaces utilisateur r\u00e9actives qui s\u2019adaptent aux diff\u00e9rentes configurations d\u2019\u00e9cran en utilisant Jetpack Compose.</p> <p>Citations:</p> <ul> <li>[1] https://developer.android.com/develop/ui/compose/layouts/adaptive</li> <li>[2] https://www.blog.finotes.com/post/creating-responsive-layouts-in-android-using-jetpack-compose</li> <li>[3] https://stackoverflow.com/questions/67157309/how-to-create-responsive-layouts-with-jetpack-compose</li> <li>[4] https://composables.com/jetpack-compose-tutorials/responsive-layout</li> <li>[5] https://www.geeksforgeeks.org/detect-screen-orientation-in-android-using-jetpack-compose/</li> <li>[6] https://eevis.codes/blog/2024-07-18/dont-lock-the-screen-orientation-handling-orientation-in-compose/</li> </ul> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des  explications, des exemples et/ou des suggestions de structure. Toutes les informations ont  \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"2.%20Android/08-hockey-v3/","title":"8. Application Hockey Version 3","text":""},{"location":"2.%20Android/08-hockey-v3/#differentes-versions-de-playerlistwithsearch","title":"Diff\u00e9rentes versions de <code>PlayerListWithSearch</code>","text":""},{"location":"2.%20Android/08-hockey-v3/#version-precedente","title":"Version pr\u00e9c\u00e9dente","text":"<pre><code>@Composable\nfun PlayerListWithSearch(modifier: Modifier = Modifier) {\n    var nameSearch by rememberSaveable { mutableStateOf(\"\") }\n    var numberSearch: Int? by rememberSaveable { mutableStateOf(null) }\n    Column(modifier = modifier) {\n        Column(modifier = Modifier.padding(top = 20.dp, bottom = 20.dp)) {\n            TextField(\n                value = nameSearch,\n                label = { Text(text = \"Nom\") },\n                onValueChange = { nameSearch = it },\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(start = 20.dp, end = 20.dp)\n            )\n            TextField(\n                value = (numberSearch ?: \"\").toString(),\n                label = { Text(text = \"Num\u00e9ro\") },\n                onValueChange = {\n                    numberSearch = if (it.isEmpty()) null else it.toIntOrNull() ?: numberSearch\n                },\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(start = 20.dp, end = 20.dp)\n            )\n        }\n\n        LazyColumn(modifier = Modifier.fillMaxSize()) {\n            items(getPlayers(nameSearch, numberSearch)) {\n                HockeyPlayerCard(player = it)\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/08-hockey-v3/#description-generale","title":"Description g\u00e9n\u00e9rale","text":"<p>Ce code d\u00e9finit une fonction composable nomm\u00e9e <code>PlayerListWithSearch</code> qui cr\u00e9e une interface utilisateur pour afficher une liste de joueurs de hockey avec une fonctionnalit\u00e9 de recherche. L\u2019interface comprend deux champs de texte pour la recherche (un pour le nom et un pour le num\u00e9ro) et une liste d\u00e9roulante des joueurs correspondant aux crit\u00e8res de recherche.</p>"},{"location":"2.%20Android/08-hockey-v3/#description-detaillee","title":"Description d\u00e9taill\u00e9e","text":"<p>1- D\u00e9claration de la fonction :</p> <pre><code>@Composable\nfun PlayerListWithSearch(modifier: Modifier = Modifier)\n</code></pre> <ul> <li>C\u2019est une fonction composable qui accepte un <code>modifier</code> optionnel comme param\u00e8tre.</li> </ul> <p>2- Variables d\u2019\u00e9tat :</p> <pre><code>var nameSearch by rememberSaveable { mutableStateOf(\"\") }\nvar numberSearch: Int? by rememberSaveable { mutableStateOf(null) }\n</code></pre> <ul> <li><code>nameSearch</code> : Une cha\u00eene de caract\u00e8res pour stocker la recherche par nom.</li> <li><code>numberSearch</code> : Un entier nullable pour stocker la recherche par num\u00e9ro.</li> <li>Ces variables utilisent <code>rememberSaveable</code> pour conserver leur \u00e9tat m\u00eame apr\u00e8s une reconfiguration.</li> </ul> <p>3- Structure principale :</p> <pre><code>Column(modifier = modifier) {\n    // Contenu\n}\n</code></pre> <ul> <li>Utilise un <code>Column</code> comme conteneur principal avec le modificateur pass\u00e9 en param\u00e8tre.</li> </ul> <p>4- Champs de recherche :</p> <pre><code>Column(modifier = Modifier.padding(top = 20.dp, bottom = 20.dp)) {\n    // Champs de texte\n}\n</code></pre> <ul> <li>Un <code>Column</code> interne avec un padding pour contenir les champs de recherche.</li> </ul> <p>5- Champ de recherche par nom :</p> <pre><code>TextField(\n    value = nameSearch,\n    label = { Text(text = \"Nom\") },\n    onValueChange = { nameSearch = it },\n    modifier = Modifier\n        .fillMaxWidth()\n        .padding(start = 20.dp, end = 20.dp)\n)\n</code></pre> <ul> <li>Un <code>TextField</code> pour la recherche par nom.</li> <li>La valeur est li\u00e9e \u00e0 <code>nameSearch</code>.</li> <li>Le label affiche \u201cNom\u201d.</li> <li><code>onValueChange</code> met \u00e0 jour <code>nameSearch</code> avec la nouvelle valeur.</li> </ul> <p>6- Champ de recherche par num\u00e9ro :</p> <pre><code>TextField(\n    value = (numberSearch ?: \"\").toString(),\n    label = { Text(text = \"Num\u00e9ro\") },\n    onValueChange = {\n        numberSearch = if (it.isEmpty()) null else it.toIntOrNull() ?: numberSearch\n    },\n    modifier = Modifier\n        .fillMaxWidth()\n        .padding(start = 20.dp, end = 20.dp)\n)\n</code></pre> <ul> <li>Un <code>TextField</code> pour la recherche par num\u00e9ro.</li> <li>La valeur affich\u00e9e est la conversion en cha\u00eene de <code>numberSearch</code> (ou une cha\u00eene vide si null).</li> <li>Le label affiche \u201cNum\u00e9ro\u201d.</li> <li><code>onValueChange</code> tente de convertir l\u2019entr\u00e9e en entier, conservant la valeur pr\u00e9c\u00e9dente si la conversion \u00e9choue.</li> </ul> <p>7- Liste des joueurs :</p> <pre><code>LazyColumn(modifier = Modifier.fillMaxSize()) {\n    items(getPlayers(nameSearch, numberSearch)) {\n        HockeyPlayerCard(player = it)\n    }\n}\n</code></pre> <ul> <li>Utilise un <code>LazyColumn</code> pour afficher efficacement une liste potentiellement longue de joueurs.</li> <li><code>getPlayers(nameSearch, numberSearch)</code> est appel\u00e9 pour obtenir la liste filtr\u00e9e des joueurs.</li> <li>Chaque joueur est affich\u00e9 en utilisant un composant <code>HockeyPlayerCard</code>.</li> </ul> <p>Ce code cr\u00e9e une interface utilisateur interactive permettant aux utilisateurs de rechercher des joueurs de hockey par nom et num\u00e9ro, avec une mise \u00e0 jour dynamique de la liste affich\u00e9e en fonction des crit\u00e8res de recherche.</p>"},{"location":"2.%20Android/08-hockey-v3/#nouvelle-version","title":"Nouvelle version","text":"<pre><code>@Composable\nfun PlayerListWithSearch(modifier: Modifier = Modifier) {\n    var nameSearch by rememberSaveable { mutableStateOf(\"\") }\n    var numberSearch: Int? by rememberSaveable { mutableStateOf(null) }\n    Column(modifier = modifier) {\n        SearchTextFields(\n            nameSearch = nameSearch,\n            onNameChange = { nameSearch = it },\n            numberSearch = numberSearch,\n            onNumberChange =\n            { numberSearch = if (it.isEmpty()) null else it.toIntOrNull() ?: numberSearch })\n\n        LazyColumn(modifier = Modifier.fillMaxSize()) {\n            items(getPlayers(nameSearch, numberSearch)) {\n                HockeyPlayerCard(player = it)\n            }\n        }\n    }\n}\n\n@Composable\nprivate fun SearchTextFields(\n    nameSearch: String,\n    onNameChange: (String) -&gt; Unit,\n    numberSearch: Int?,\n    onNumberChange: (String) -&gt; Unit,\n\n    ) {\n    Column(modifier = Modifier.padding(top = 20.dp, bottom = 20.dp)) {\n        TextField(\n            value = nameSearch,\n            label = { Text(text = \"Nom\") },\n            onValueChange = onNameChange,\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(start = 20.dp, end = 20.dp)\n        )\n        TextField(\n            value = (numberSearch ?: \"\").toString(),\n            label = { Text(text = \"Num\u00e9ro\") },\n            onValueChange = onNumberChange,\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(start = 20.dp, end = 20.dp)\n        )\n    }\n}\n</code></pre> <p>Cette refactorisation illustre bien comment on peut am\u00e9liorer la structure et la r\u00e9utilisabilit\u00e9 du code en Jetpack Compose. Voici une explication d\u00e9taill\u00e9e de la transition entre les deux versions, en mettant l\u2019accent sur la gestion des variables d\u2019\u00e9tat et des fonctions lambda :</p> <ol> <li> <p>Cr\u00e9ation du nouveau composable <code>SearchTextFields</code> :</p> <ul> <li>Un nouveau composable priv\u00e9 a \u00e9t\u00e9 cr\u00e9\u00e9 pour encapsuler la logique des champs de recherche.</li> <li>Cela am\u00e9liore la lisibilit\u00e9 et la r\u00e9utilisabilit\u00e9 du code.</li> </ul> </li> <li> <p>Param\u00e8tres du nouveau composable :</p> <ul> <li><code>nameSearch: String</code> : La valeur actuelle de la recherche par nom.</li> <li><code>onNameChange: (String) -&gt; Unit</code> : Une fonction lambda pour g\u00e9rer les changements de nom.</li> <li><code>numberSearch: Int?</code> : La valeur actuelle de la recherche par num\u00e9ro.</li> <li><code>onNumberChange: (String) -&gt; Unit</code> : Une fonction lambda pour g\u00e9rer les changements de num\u00e9ro.</li> </ul> </li> <li> <p>Passage des variables d\u2019\u00e9tat :</p> <ul> <li>Dans <code>PlayerListWithSearch</code>, les variables d\u2019\u00e9tat <code>nameSearch</code> et <code>numberSearch</code> sont pass\u00e9es directement \u00e0   <code>SearchTextFields</code>.</li> <li>Cela permet \u00e0 <code>SearchTextFields</code> d\u2019utiliser ces valeurs sans les poss\u00e9der ou les modifier directement.</li> </ul> </li> <li> <p>Passage des fonctions lambda :</p> <ul> <li>Pour <code>onNameChange</code>, une simple lambda est pass\u00e9e : <code>{ nameSearch = it }</code>.   Cette lambda met \u00e0 jour directement la variable d\u2019\u00e9tat <code>nameSearch</code>.</li> <li>Pour <code>onNumberChange</code>, la logique de conversion est pass\u00e9e en tant que lambda :   <pre><code>{ numberSearch = if (it.isEmpty()) null else it.toIntOrNull() ?: numberSearch }\n</code></pre>   Cette lambda g\u00e8re la conversion de la cha\u00eene en entier et la mise \u00e0 jour de <code>numberSearch</code>.</li> </ul> </li> <li> <p>Utilisation dans <code>SearchTextFields</code> :</p> <ul> <li>Les <code>TextField</code> utilisent maintenant les param\u00e8tres pass\u00e9s au lieu d\u2019acc\u00e9der directement aux variables d\u2019\u00e9tat.</li> <li><code>value = nameSearch</code> et <code>value = (numberSearch ?: \"\").toString()</code> utilisent les valeurs pass\u00e9es.</li> <li><code>onValueChange = onNameChange</code> et <code>onValueChange = onNumberChange</code> utilisent les lambdas pass\u00e9es.</li> </ul> </li> <li> <p>Avantages de cette approche :</p> <ul> <li>S\u00e9paration des pr\u00e9occupations : <code>SearchTextFields</code> ne g\u00e8re que l\u2019affichage et la collecte des entr\u00e9es.</li> <li>\u00c9tat \u00e9lev\u00e9 (State hoisting) : L\u2019\u00e9tat reste dans le composant parent, rendant <code>SearchTextFields</code> plus flexible et   r\u00e9utilisable.</li> <li>Testabilit\u00e9 am\u00e9lior\u00e9e : Il est plus facile de tester <code>SearchTextFields</code> ind\u00e9pendamment.</li> </ul> </li> <li> <p>Implications pour la gestion de l\u2019\u00e9tat :</p> <ul> <li>L\u2019\u00e9tat (<code>nameSearch</code> et <code>numberSearch</code>) est toujours g\u00e9r\u00e9 dans <code>PlayerListWithSearch</code>.</li> <li><code>SearchTextFields</code> devient un composant \u201csans \u00e9tat\u201d (stateless), ne faisant que refl\u00e9ter l\u2019\u00e9tat qui lui est pass\u00e9.</li> </ul> </li> </ol> <p>Cette refactorisation est un excellent exemple de la fa\u00e7on dont on peut appliquer le principe de \u201cstate hoisting\u201d en Jetpack Compose, en \u00e9levant l\u2019\u00e9tat et les fonctions de modification d\u2019\u00e9tat vers le composant parent. Cela rend le code plus modulaire, plus facile \u00e0 maintenir et \u00e0 tester, tout en conservant une s\u00e9paration claire des responsabilit\u00e9s entre les composants.</p>"},{"location":"2.%20Android/09-etats-evenements-v2/","title":"9. Gestion des \u00e9tats et des \u00e9v\u00e9nements","text":""},{"location":"2.%20Android/09-etats-evenements-v2/#exemple-exemplesentrees","title":"Exemple : ExemplesEntrees","text":"<p>Exemple sur GitHub</p>"},{"location":"2.%20Android/09-etats-evenements-v2/#premiere-version","title":"Premi\u00e8re version","text":"<pre><code>@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun FruitSelector(modifier: Modifier = Modifier) {\n    val fruits = listOf(\"Pomme\", \"Banane\", \"Orange\", \"Fraise\", \"Kiwi\")\n    var expanded by remember { mutableStateOf(false) }\n    var selectedFruit by remember { mutableStateOf(\"\") }\n\n    Column(modifier = modifier.padding(16.dp)) {\n        ExposedDropdownMenuBox(\n            expanded = expanded,\n            onExpandedChange = { expanded = !expanded }\n        ) {\n            TextField(\n                value = selectedFruit,\n                onValueChange = {},\n                readOnly = true,\n                label = { Text(\"Choisissez un fruit\") },\n                trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },\n                modifier = Modifier\n                    .menuAnchor()\n                    .fillMaxWidth()\n            )\n\n            ExposedDropdownMenu(\n                expanded = expanded,\n                onDismissRequest = { expanded = false }\n            ) {\n                fruits.forEach { fruit -&gt;\n                    DropdownMenuItem(\n                        text = { Text(fruit) },\n                        onClick = {\n                            selectedFruit = fruit\n                            expanded = false\n                        }\n                    )\n                }\n            }\n        }\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        if (selectedFruit.isNotEmpty()) {\n            Text(\"Fruit s\u00e9lectionn\u00e9 : $selectedFruit\")\n        }\n    }\n}\n\n@Composable\nfun App(modifier: Modifier = Modifier) {\n    Column(modifier = modifier) {\n        TextLengthCounter()\n        Spacer(modifier = Modifier.height(100.dp))\n        FruitSelector()\n    }\n}\n</code></pre> <p>Bien s\u00fbr, je vais vous donner une description g\u00e9n\u00e9rale de ces deux fonctions, en me concentrant particuli\u00e8rement sur <code>FruitSelector</code>.</p>"},{"location":"2.%20Android/09-etats-evenements-v2/#description-generale","title":"Description g\u00e9n\u00e9rale","text":"<ol> <li> <p><code>FruitSelector</code> : C\u2019est une fonction composable qui cr\u00e9e un s\u00e9lecteur de fruits sous forme de menu d\u00e9roulant.</p> </li> <li> <p><code>App</code> : C\u2019est la fonction composable principale qui structure l\u2019interface utilisateur de l\u2019application en combinant    diff\u00e9rents composants.</p> </li> </ol>"},{"location":"2.%20Android/09-etats-evenements-v2/#focus-sur-fruitselector","title":"Focus sur FruitSelector","text":"<p>La fonction <code>FruitSelector</code> est un composant Jetpack Compose qui cr\u00e9e un menu d\u00e9roulant permettant \u00e0 l\u2019utilisateur de s\u00e9lectionner un fruit parmi une liste pr\u00e9d\u00e9finie. Voici ses principales caract\u00e9ristiques :</p> <ol> <li> <p>Liste de fruits : Une liste statique de fruits est d\u00e9finie au d\u00e9but de la fonction.</p> </li> <li> <p>\u00c9tats :</p> <ul> <li><code>expanded</code> : Un \u00e9tat bool\u00e9en qui contr\u00f4le si le menu d\u00e9roulant est ouvert ou ferm\u00e9.</li> <li><code>selectedFruit</code> : Un \u00e9tat qui stocke le fruit actuellement s\u00e9lectionn\u00e9.</li> </ul> </li> <li> <p>Interface utilisateur :</p> <ul> <li>Utilise <code>ExposedDropdownMenuBox</code> pour cr\u00e9er le conteneur du menu d\u00e9roulant.</li> <li>Affiche un <code>TextField</code> qui sert de d\u00e9clencheur pour ouvrir le menu. Ce champ est en lecture seule et affiche le   fruit s\u00e9lectionn\u00e9.</li> <li>Le menu d\u00e9roulant (<code>ExposedDropdownMenu</code>) contient la liste des fruits, chacun repr\u00e9sent\u00e9 par un   <code>DropdownMenuItem</code>.</li> </ul> </li> <li> <p>Interaction :</p> <ul> <li>Lorsqu\u2019un fruit est s\u00e9lectionn\u00e9, le menu se ferme et le fruit choisi est affich\u00e9 dans le TextField.</li> <li>Un texte suppl\u00e9mentaire s\u2019affiche en dessous pour confirmer le fruit s\u00e9lectionn\u00e9.</li> </ul> </li> <li> <p>Mise en page :</p> <ul> <li>Utilise une <code>Column</code> pour organiser verticalement les \u00e9l\u00e9ments.</li> <li>Ajoute des espacements et du rembourrage pour am\u00e9liorer l\u2019apparence.</li> </ul> </li> <li> <p>Personnalisation :</p> <ul> <li>Accepte un <code>modifier</code> en param\u00e8tre pour permettre une personnalisation suppl\u00e9mentaire si n\u00e9cessaire.</li> </ul> </li> </ol> <p>Cette fonction d\u00e9montre l\u2019utilisation de plusieurs concepts importants de Jetpack Compose, tels que la gestion d\u2019\u00e9tat, les composants d\u2019interface utilisateur Material 3, et la cr\u00e9ation de composants interactifs. Elle offre une interface utilisateur intuitive pour la s\u00e9lection d\u2019\u00e9l\u00e9ments dans une liste, ce qui est une fonctionnalit\u00e9 courante dans de nombreuses applications.</p>"},{"location":"2.%20Android/09-etats-evenements-v2/#deuxieme-version","title":"Deuxi\u00e8me version","text":"<pre><code>@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun FruitSelector(\n    modifier: Modifier = Modifier,\n    fruits: List&lt;String&gt;,\n    selectedFruit: String,\n    onFruitSelected: (String) -&gt; Unit = {}\n) {\n    var expanded by remember { mutableStateOf(false) }\n\n    Column(modifier = modifier.padding(16.dp)) {\n        ExposedDropdownMenuBox(\n            expanded = expanded,\n            onExpandedChange = { expanded = !expanded }\n        ) {\n            TextField(\n                value = selectedFruit,\n                onValueChange = {},\n                readOnly = true,\n                label = { Text(\"Choisissez un fruit\") },\n                trailingIcon = {\n                    ExposedDropdownMenuDefaults\n                        .TrailingIcon(expanded = expanded)\n                },\n                modifier = Modifier\n                    .menuAnchor()\n                    .fillMaxWidth()\n            )\n\n            ExposedDropdownMenu(\n                expanded = expanded,\n                onDismissRequest = { expanded = false }\n            ) {\n                fruits.forEach { fruit -&gt;\n                    DropdownMenuItem(\n                        text = { Text(fruit) },\n                        onClick = {\n                            onFruitSelected(fruit)\n                            expanded = false\n                        }\n                    )\n                }\n            }\n        }\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        if (selectedFruit.isNotEmpty()) {\n            Text(\"Fruit s\u00e9lectionn\u00e9 : $selectedFruit\")\n        }\n    }\n}\n\n@Composable\nfun App(modifier: Modifier = Modifier) {\n    var selectedFruit1 by rememberSaveable { mutableStateOf(\"\") }\n    var selectedFruit2 by rememberSaveable { mutableStateOf(\"\") }\n\n    Column(modifier = modifier) {\n        TextLengthCounter()\n        Spacer(modifier = Modifier.height(100.dp))\n        FruitSelector(\n            fruits = listOf(\"Pomme\", \"Banane\", \"Orange\", \"Fraise\", \"Kiwi\"),\n            selectedFruit = selectedFruit1,\n            onFruitSelected = { fruit -&gt; selectedFruit1 = fruit }\n        )\n        Spacer(modifier = Modifier.height(10.dp))\n        FruitSelector(\n            fruits = listOf(\"Poire\", \"Mangue\", \"Orange\", \"Bleuet\", \"Pamplemousse\"),\n            selectedFruit = selectedFruit2,\n            onFruitSelected = { fruit -&gt; selectedFruit2 = fruit }\n        )\n        Spacer(modifier = Modifier.height(10.dp))\n        Text(\"Fruit s\u00e9lectionn\u00e9 1 : ${selectedFruit1 ?: \"Aucun\"}\")\n        Text(\"Fruit s\u00e9lectionn\u00e9 2 : ${selectedFruit2 ?: \"Aucun\"}\")\n    }\n}\n</code></pre> <p>Cette nouvelle version de l\u2019application d\u00e9montre une refactorisation importante, principalement ax\u00e9e sur l\u2019\u00e9l\u00e9vation de l\u2019\u00e9tat (state hoisting) et la r\u00e9utilisabilit\u00e9 des composants. Examinons en d\u00e9tail les changements et leurs implications :</p>"},{"location":"2.%20Android/09-etats-evenements-v2/#refactorisation-de-fruitselector","title":"Refactorisation de FruitSelector","text":"<ol> <li> <p>\u00c9l\u00e9vation de l\u2019\u00e9tat :</p> <ul> <li><code>selectedFruit</code> n\u2019est plus g\u00e9r\u00e9 \u00e0 l\u2019int\u00e9rieur de <code>FruitSelector</code>. Il est maintenant pass\u00e9 en tant que param\u00e8tre.</li> <li>Une nouvelle fonction <code>onFruitSelected</code> est ajout\u00e9e comme param\u00e8tre pour g\u00e9rer les changements de s\u00e9lection.</li> </ul> </li> <li> <p>Param\u00e8tres ajout\u00e9s :</p> <ul> <li><code>fruits: List&lt;String&gt;</code> : La liste des fruits est maintenant un param\u00e8tre, rendant le composant plus flexible.</li> <li><code>selectedFruit: String</code> : L\u2019\u00e9tat du fruit s\u00e9lectionn\u00e9 est pass\u00e9 en param\u00e8tre.</li> <li><code>onFruitSelected: (String) -&gt; Unit</code> : Une fonction de rappel pour g\u00e9rer la s\u00e9lection d\u2019un fruit.</li> </ul> </li> <li> <p>\u00c9tat local restant :</p> <ul> <li><code>expanded</code> reste un \u00e9tat local car il concerne uniquement l\u2019affichage du menu d\u00e9roulant.</li> </ul> </li> </ol>"},{"location":"2.%20Android/09-etats-evenements-v2/#modifications-dans-app","title":"Modifications dans App","text":"<ol> <li> <p>Gestion de l\u2019\u00e9tat :</p> <ul> <li>Deux nouvelles variables d\u2019\u00e9tat sont introduites : <code>selectedFruit1</code> et <code>selectedFruit2</code>.</li> <li>Ces \u00e9tats sont cr\u00e9\u00e9s avec <code>rememberSaveable</code> pour persister \u00e0 travers les recompositions et les changements de   configuration.</li> </ul> </li> <li> <p>Utilisation de FruitSelector :</p> <ul> <li>Deux instances de <code>FruitSelector</code> sont cr\u00e9\u00e9es, chacune avec sa propre liste de fruits et son propre \u00e9tat.</li> <li>L\u2019\u00e9tat et la fonction de mise \u00e0 jour sont pass\u00e9s \u00e0 chaque <code>FruitSelector</code>.</li> </ul> </li> <li> <p>Affichage des s\u00e9lections :</p> <ul> <li>Les fruits s\u00e9lectionn\u00e9s sont affich\u00e9s en bas de l\u2019App, d\u00e9montrant que l\u2019\u00e9tat est maintenant g\u00e9r\u00e9 au niveau   sup\u00e9rieur.</li> </ul> </li> </ol>"},{"location":"2.%20Android/09-etats-evenements-v2/#avantages-de-cette-refactorisation","title":"Avantages de cette refactorisation","text":"<ol> <li> <p>R\u00e9utilisabilit\u00e9 : <code>FruitSelector</code> peut maintenant \u00eatre utilis\u00e9 plusieurs fois avec diff\u00e9rentes listes de fruits.</p> </li> <li> <p>S\u00e9paration des responsabilit\u00e9s : La gestion de l\u2019\u00e9tat est s\u00e9par\u00e9e de l\u2019affichage, rendant le code plus modulaire.</p> </li> <li> <p>Contr\u00f4le accru : L\u2019App a maintenant un contr\u00f4le total sur l\u2019\u00e9tat des s\u00e9lections, permettant des interactions plus    complexes si n\u00e9cessaire.</p> </li> <li> <p>Testabilit\u00e9 am\u00e9lior\u00e9e : Il est plus facile de tester <code>FruitSelector</code> car son comportement d\u00e9pend enti\u00e8rement des    props pass\u00e9es.</p> </li> <li> <p>Flexibilit\u00e9 : La liste de fruits peut \u00eatre dynamique, provenant par exemple d\u2019une API ou d\u2019une base de donn\u00e9es.</p> </li> </ol>"},{"location":"2.%20Android/09-etats-evenements-v2/#focus-sur-les-variables-detat","title":"Focus sur les variables d\u2019\u00e9tat","text":"<ul> <li> <p>Dans <code>App</code>, <code>selectedFruit1</code> et <code>selectedFruit2</code> sont des variables d\u2019\u00e9tat cr\u00e9\u00e9es avec <code>rememberSaveable</code>. Cela   signifie qu\u2019elles conserveront leur valeur m\u00eame lors des changements de configuration (comme la rotation de l\u2019\u00e9cran).</p> </li> <li> <p>Dans <code>FruitSelector</code>, seul <code>expanded</code> reste une variable d\u2019\u00e9tat locale, car elle ne concerne que l\u2019affichage interne   du composant.</p> </li> </ul> <p>Cette refactorisation illustre des principes importants de Jetpack Compose, notamment l\u2019\u00e9l\u00e9vation de l\u2019\u00e9tat et la cr\u00e9ation de composants r\u00e9utilisables et ind\u00e9pendants. Elle permet une meilleure gestion de l\u2019\u00e9tat de l\u2019application et une plus grande flexibilit\u00e9 dans la construction de l\u2019interface utilisateur.</p>"},{"location":"2.%20Android/10-localisation/","title":"10. Localisation","text":"<p>Voici un guide pour int\u00e9grer la localisation dans une application Android d\u00e9velopp\u00e9e avec Jetpack Compose :</p>"},{"location":"2.%20Android/10-localisation/#principes-generaux-de-la-localisation","title":"Principes g\u00e9n\u00e9raux de la localisation","text":"<p>La localisation d\u2019une application Android consiste \u00e0 adapter son contenu et son interface utilisateur \u00e0 diff\u00e9rentes langues et cultures. Voici les principes cl\u00e9s \u00e0 suivre :</p> <ol> <li>Externalisez toutes les cha\u00eenes de caract\u00e8res dans des fichiers de ressources.</li> <li>Utilisez des identifiants neutres pour les ressources (ex: \u201cwelcome_message\u201d au lieu de \u201cenglish_welcome\u201d).</li> <li>\u00c9vitez de coder en dur du texte dans votre code.</li> <li>Tenez compte des diff\u00e9rences culturelles (formats de date, unit\u00e9s de mesure, etc.).</li> <li>Pr\u00e9voyez de l\u2019espace suppl\u00e9mentaire dans votre interface pour les traductions plus longues.</li> <li>Testez votre application dans diff\u00e9rentes langues et configurations.</li> </ol>"},{"location":"2.%20Android/10-localisation/#exemple-simple-avec-des-string-en-anglais-et-francais","title":"Exemple simple avec des <code>String</code> en anglais et fran\u00e7ais","text":""},{"location":"2.%20Android/10-localisation/#etape-1-configurer-les-ressources-linguistiques","title":"\u00c9tape 1 : Configurer les ressources linguistiques","text":"<p>1- Dans le dossier <code>res</code>, cr\u00e9ez un dossier <code>values-fr</code> pour les ressources en fran\u00e7ais.</p> <p>2- Dans <code>res/values/strings.xml</code> (anglais par d\u00e9faut) : <pre><code>    &lt;resources&gt;\n        &lt;string name=\"app_name\"&gt;My App&lt;/string&gt;\n        &lt;string name=\"welcome_message\"&gt;Welcome to My App!&lt;/string&gt;\n        &lt;string name=\"language_selection\"&gt;Select a language&lt;/string&gt;\n    &lt;/resources&gt;\n</code></pre></p> <p>3- Dans <code>res/values-fr/strings.xml</code> : <pre><code>&lt;resources&gt;\n   &lt;string name=\"app_name\"&gt;Mon Application&lt;/string&gt;\n   &lt;string name=\"welcome_message\"&gt;Bienvenue dans Mon Application !&lt;/string&gt;\n   &lt;string name=\"language_selection\"&gt;S\u00e9lectionnez une langue&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre></p>"},{"location":"2.%20Android/10-localisation/#etape-2-utiliser-les-chaines-localisees-dans-jetpack-compose","title":"\u00c9tape 2 : Utiliser les cha\u00eenes localis\u00e9es dans Jetpack Compose","text":"<pre><code>@Composable\nfun WelcomeScreen() {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        verticalArrangement = Arrangement.Center,\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Text(\n            text = stringResource(R.string.welcome_message),\n            style = MaterialTheme.typography.h4\n        )\n        Spacer(modifier = Modifier.height(16.dp))\n        Text(\n            text = stringResource(R.string.language_selection),\n            style = MaterialTheme.typography.body1\n        )\n    }\n}\n</code></pre>"},{"location":"2.%20Android/10-localisation/#formatage-des-dates","title":"Formatage des dates","text":"<p>Pour formater les dates en fonction de la locale de l\u2019utilisateur, utilisez la classe <code>DateTimeFormatter</code> avec <code>ofLocalizedDate()</code> :</p> <pre><code>import java.time.LocalDate\nimport java.time.format.DateTimeFormatter\nimport java.time.format.FormatStyle\n\n@Composable\nfun DisplayLocalizedDate() {\n    val currentDate = LocalDate.now()\n    val dateFormatter = DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)\n    val formattedDate = remember(currentDate) {\n        currentDate.format(dateFormatter)\n    }\n\n    Text(\n        text = formattedDate,\n        style = MaterialTheme.typography.body1\n    )\n}\n</code></pre> <p>Ce code affichera la date actuelle dans le format long appropri\u00e9 pour la locale de l\u2019utilisateur. Par exemple :</p> <ul> <li>En anglais (US) : \u201cSeptember 18, 2024\u201d</li> <li>En fran\u00e7ais : \u201c18 septembre 2024\u201d</li> </ul> <p>En suivant ces \u00e9tapes, votre application Jetpack Compose sera correctement localis\u00e9e en anglais et en fran\u00e7ais, avec la possibilit\u00e9 d\u2019ajouter facilement d\u2019autres langues \u00e0 l\u2019avenir[1][2][4].</p> <p>Citations:</p> <ul> <li>[1] https://www.translized.com/blog/android-localization-with-jetpack-compose\u2014a-comprehensive-guide</li> <li>[2] https://phrase.com/blog/posts/localized-date-time-android/</li> <li>[3] https://www.youtube.com/watch?v=VdwDawvfH98</li> <li>[4] https://phrase.com/blog/posts/internationalizing-jetpack-compose-android-apps/</li> <li>[5] https://www.adamormsby.com/posts/013-android-localization-formatting-dates/</li> </ul>"},{"location":"2.%20Android/10-localisation/#exemple-complet","title":"Exemple complet","text":"<p>Voici un exemple complet d\u2019une application simple utilisant Jetpack Compose avec localisation, sans les boutons pour changer la langue. Cette application affichera un message de bienvenue localis\u00e9 et la date actuelle format\u00e9e selon la locale de l\u2019appareil.</p> <pre><code>import android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.unit.dp\nimport java.time.LocalDate\nimport java.time.format.DateTimeFormatter\nimport java.time.format.FormatStyle\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MyApp()\n        }\n    }\n}\n\n@Composable\nfun MyApp() {\n    MaterialTheme {\n        Surface(\n            modifier = Modifier.fillMaxSize(),\n            color = MaterialTheme.colors.background\n        ) {\n            LocalizedContent()\n        }\n    }\n}\n\n@Composable\nfun LocalizedContent() {\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(16.dp),\n        verticalArrangement = Arrangement.Center,\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Text(\n            text = stringResource(R.string.welcome_message),\n            style = MaterialTheme.typography.h4\n        )\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        DisplayLocalizedDate()\n    }\n}\n\n@Composable\nfun DisplayLocalizedDate() {\n    val currentDate = remember { LocalDate.now() }\n    val dateFormatter = remember { DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG) }\n    val formattedDate = remember(currentDate) {\n        currentDate.format(dateFormatter)\n    }\n\n    Text(\n        text = formattedDate,\n        style = MaterialTheme.typography.body1\n    )\n}\n</code></pre> <p>Pour que cette application fonctionne correctement, vous devez \u00e9galement configurer les fichiers de ressources suivants :</p> <ul> <li>Dans <code>res/values/strings.xml</code> (anglais par d\u00e9faut) :</li> </ul> <pre><code>&lt;resources&gt;\n    &lt;string name=\"app_name\"&gt;My Localized App&lt;/string&gt;\n    &lt;string name=\"welcome_message\"&gt;Welcome to My Localized App!&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre> <ul> <li>Dans <code>res/values-fr/strings.xml</code> (pour le fran\u00e7ais) :</li> </ul> <pre><code>&lt;resources&gt;\n    &lt;string name=\"app_name\"&gt;Mon Application Localis\u00e9e&lt;/string&gt;\n    &lt;string name=\"welcome_message\"&gt;Bienvenue dans Mon Application Localis\u00e9e !&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre> <ul> <li>Assurez-vous d\u2019avoir les d\u00e9pendances n\u00e9cessaires dans votre fichier <code>build.gradle</code> (Module : app) :</li> </ul> <pre><code>dependencies {\n    implementation \"androidx.compose.ui:ui:1.5.0\"\n    implementation \"androidx.compose.material:material:1.5.0\"\n    implementation \"androidx.compose.ui:ui-tooling-preview:1.5.0\"\n    implementation \"androidx.activity:activity-compose:1.7.2\"\n}\n</code></pre> <p>Cette application simple affiche :</p> <ol> <li>Un message de bienvenue localis\u00e9</li> <li>La date actuelle format\u00e9e selon la locale de l\u2019appareil</li> </ol> <p>L\u2019application utilisera automatiquement les ressources appropri\u00e9es en fonction de la langue configur\u00e9e sur l\u2019appareil de l\u2019utilisateur. Si l\u2019appareil est configur\u00e9 en fran\u00e7ais, il utilisera les cha\u00eenes de caract\u00e8res du fichier <code>values-fr/strings.xml</code>. Pour toute autre langue, il utilisera les cha\u00eenes par d\u00e9faut du fichier <code>values/strings.xml</code>.</p> <p>Pour tester diff\u00e9rentes langues, vous pouvez changer la langue de votre appareil ou de l\u2019\u00e9mulateur dans les param\u00e8tres syst\u00e8me. L\u2019application s\u2019adaptera automatiquement \u00e0 la nouvelle langue sans n\u00e9cessiter de red\u00e9marrage.</p> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des  explications, des exemples et/ou des suggestions de structure. Toutes les informations ont  \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"2.%20Android/11-json/","title":"11. Lire et \u00e9crire des fichiers JSON","text":""},{"location":"2.%20Android/11-json/#enregistrement-et-lecture-de-donnees-json-en-kotlin","title":"Enregistrement et lecture de donn\u00e9es JSON en Kotlin","text":""},{"location":"2.%20Android/11-json/#etape-1-preparation","title":"\u00c9tape 1 : Pr\u00e9paration","text":"<p>Prenons par exemple la classe <code>Player</code> est d\u00e9finie comme suit :</p> <pre><code>data class Player(\n    val id: Int,\n    val number: Int,\n    val name: String,\n    val image_resource: Int = R.drawable.nhl_logo\n)\n</code></pre> <p>Nous utiliserons la biblioth\u00e8que <code>Gson</code> pour la s\u00e9rialisation et la d\u00e9s\u00e9rialisation JSON. Ajoutez la d\u00e9pendance suivante dans le fichier <code>build.gradle</code> du module directement dans la section d\u00e9pendances du fichier <code>app/build.gradle.kts</code> :</p> <pre><code>implementation(\"com.google.code.gson:gson:2.10.1\")\n</code></pre> <p>Une autre option offerte par Android Studio est de convertir cette d\u00e9pendance au format utilisant les catalogues de versions (Version Catalogs). Vous pouvez accepter ce changement de format. La ligne plus haut sera remplac\u00e9e par :</p> <pre><code>implementation(libs.gson)\n</code></pre> <p>Et deux lignes seront ajout\u00e9es <code>gradle/libs.versions.toml</code> pour <code>gson</code> :</p> <pre><code>[versions]\ngson = \"2.10.1\"\n\n[libraries]\ngson = { module = \"com.google.code.gson:gson\", version.ref = \"gson\" }\n</code></pre>"},{"location":"2.%20Android/11-json/#etape-2-enregistrement-des-donnees-dans-un-fichier-json","title":"\u00c9tape 2 : Enregistrement des donn\u00e9es dans un fichier JSON","text":"<p>Pour enregistrer une liste de <code>Player</code> dans un fichier JSON, nous allons cr\u00e9er une fonction d\u2019extension :</p> <pre><code>import com.google.gson.Gson\nimport java.io.File\n\nfun List&lt;Player&gt;.saveToFile(filename: String) {\n    val jsonString = Gson().toJson(this)\n    File(filename).writeText(jsonString)\n}\n</code></pre> <p>Cette fonction convertit la liste de <code>Player</code> en une cha\u00eene JSON, puis l\u2019\u00e9crit dans un fichier.</p>"},{"location":"2.%20Android/11-json/#etape-3-lecture-des-donnees-a-partir-dun-fichier-json","title":"\u00c9tape 3 : Lecture des donn\u00e9es \u00e0 partir d\u2019un fichier JSON","text":"<p>Pour lire la liste de <code>Player</code> \u00e0 partir d\u2019un fichier JSON, nous allons cr\u00e9er une autre fonction :</p> <pre><code>import com.google.gson.Gson\nimport com.google.gson.reflect.TypeToken\nimport java.io.File\n\nfun readPlayersFromFile(filename: String): List&lt;Player&gt; {\n    val jsonString = File(filename).readText()\n    val playerListType = object : TypeToken&lt;List&lt;Player&gt;&gt;() {}.type\n    return Gson().fromJson(jsonString, playerListType)\n}\n</code></pre> <p>Cette fonction lit le contenu du fichier JSON, puis le convertit en une liste de <code>Player</code>.</p>"},{"location":"2.%20Android/11-json/#etape-4-utilisation-des-fonctions","title":"\u00c9tape 4 : Utilisation des fonctions","text":"<p>Voici un exemple d\u2019utilisation de ces fonctions :</p> <pre><code>fun main() {\n    // Cr\u00e9ation d'une liste de joueurs\n    val players = listOf(\n        Player(1, 99, \"Wayne Gretzky\"),\n        Player(2, 87, \"Sidney Crosby\"),\n        Player(3, 9, \"Bobby Orr\")\n    )\n\n    // Enregistrement des joueurs dans un fichier JSON\n    players.saveToFile(\"players.json\")\n    println(\"Joueurs enregistr\u00e9s dans players.json\")\n\n    // Lecture des joueurs \u00e0 partir du fichier JSON\n    val loadedPlayers = readPlayersFromFile(\"players.json\")\n    println(\"Joueurs charg\u00e9s \u00e0 partir de players.json:\")\n    loadedPlayers.forEach { println(it) }\n}\n</code></pre>"},{"location":"2.%20Android/11-json/#points-importants","title":"Points importants","text":"<ol> <li>S\u00e9rialisation : C\u2019est le processus de conversion d\u2019objets en format JSON.</li> <li>D\u00e9s\u00e9rialisation : C\u2019est le processus inverse, convertissant le JSON en objets Kotlin.</li> <li>Gestion des fichiers : Kotlin offre des m\u00e9thodes simples pour lire et \u00e9crire des fichiers.</li> <li>Biblioth\u00e8que Gson : Elle simplifie grandement le travail avec JSON en Kotlin.</li> <li>Data class : L\u2019utilisation de <code>data class</code> pour Player facilite la s\u00e9rialisation/d\u00e9s\u00e9rialisation.</li> </ol>"},{"location":"2.%20Android/11-json/#gestion-des-fichiers-dans-android","title":"Gestion des fichiers dans Android","text":""},{"location":"2.%20Android/11-json/#ecrasement-et-creation-de-fichiers","title":"\u00c9crasement et cr\u00e9ation de fichiers","text":"<ol> <li> <p>\u00c9crasement du fichier existant    Lorsque vous utilisez la m\u00e9thode <code>File(filename).writeText(jsonString)</code>, si le fichier sp\u00e9cifi\u00e9 existe d\u00e9j\u00e0, son    contenu sera effectivement \u00e9cras\u00e9. Cette op\u00e9ration remplace enti\u00e8rement le contenu pr\u00e9c\u00e9dent par les nouvelles    donn\u00e9es.</p> </li> <li> <p>Cr\u00e9ation d\u2019un nouveau fichier    Si le fichier sp\u00e9cifi\u00e9 n\u2019existe pas, Android le cr\u00e9era automatiquement avant d\u2019y \u00e9crire les donn\u00e9es. Cela signifie    que vous n\u2019avez pas besoin de v\u00e9rifier l\u2019existence du fichier ou de le cr\u00e9er manuellement.</p> </li> </ol>"},{"location":"2.%20Android/11-json/#emplacement-du-fichier","title":"Emplacement du fichier","text":"<p>L\u2019emplacement du fichier d\u00e9pend du chemin que vous sp\u00e9cifiez dans le param\u00e8tre <code>filename</code>. Dans le contexte d\u2019une application Android, il est crucial de comprendre les diff\u00e9rentes options de stockage :</p> <ol> <li> <p>Stockage interne</p> <ul> <li>Par d\u00e9faut, si vous utilisez un chemin relatif, le fichier sera cr\u00e9\u00e9 dans le r\u00e9pertoire priv\u00e9 de votre   application.</li> <li>Chemin typique : <code>/data/data/[nom_du_package_de_votre_app]/files/</code></li> <li>Ce r\u00e9pertoire est priv\u00e9 et accessible uniquement par votre application.</li> </ul> </li> <li> <p>Stockage externe</p> <ul> <li>Pour \u00e9crire sur le stockage externe (comme la carte SD), vous devez demander les permissions appropri\u00e9es et   utiliser un chemin absolu (voir une autre section).</li> <li>Exemple : <code>Environment.getExternalStorageDirectory().absolutePath + \"/MonDossier/monfichier.json\"</code></li> </ul> </li> </ol>"},{"location":"2.%20Android/11-json/#bonnes-pratiques-pour-les-applications-android","title":"Bonnes pratiques pour les applications Android","text":""},{"location":"2.%20Android/11-json/#utiliser-le-contexte-de-lapplication","title":"Utiliser le contexte de l\u2019application","text":"<p>Pour une meilleure gestion des fichiers dans une application Android, il est recommand\u00e9 d\u2019utiliser le contexte de l\u2019application pour obtenir le r\u00e9pertoire appropri\u00e9 :</p> <pre><code>fun Context.saveToFile(players: List&lt;Player&gt;, filename: String) {\n    val file = File(this.filesDir, filename)\n    file.writeText(Gson().toJson(players))\n}\n\nfun Context.readPlayersFromFile(filename: String): List&lt;Player&gt; {\n    val file = File(this.filesDir, filename)\n    val jsonString = file.readText()\n    val playerListType = object : TypeToken&lt;List&lt;Player&gt;&gt;() {}.type\n    return Gson().fromJson(jsonString, playerListType)\n}\n</code></pre>"},{"location":"2.%20Android/11-json/#gestion-des-erreurs","title":"Gestion des erreurs","text":"<p>Il est important d\u2019ajouter une gestion des erreurs pour traiter les cas o\u00f9 l\u2019\u00e9criture ou la lecture pourrait \u00e9chouer :</p> <pre><code>fun Context.saveToFile(players: List&lt;Player&gt;, filename: String) {\n    try {\n        val file = File(this.filesDir, filename)\n        file.writeText(Gson().toJson(players))\n    } catch (e: Exception) {\n        Log.e(\"FileIO\", \"Erreur lors de l'\u00e9criture du fichier\", e)\n    }\n}\n</code></pre>"},{"location":"2.%20Android/11-json/#verification-de-lexistence-du-fichier","title":"V\u00e9rification de l\u2019existence du fichier","text":"<p>Avant de lire un fichier, il est judicieux de v\u00e9rifier son existence :</p> <pre><code>fun Context.readPlayersFromFile(filename: String): List&lt;Player&gt;? {\n    val file = File(this.filesDir, filename)\n    return if (file.exists()) {\n        try {\n            val jsonString = file.readText()\n            val playerListType = object : TypeToken&lt;List&lt;Player&gt;&gt;() {}.type\n            Gson().fromJson(jsonString, playerListType)\n        } catch (e: Exception) {\n            Log.e(\"FileIO\", \"Erreur lors de la lecture du fichier\", e)\n            emptyList()\n        }\n    } else {\n        emptyList()\n    }\n}\n</code></pre>"},{"location":"2.%20Android/12-cycle-de-vie/","title":"12. Cycle de vie et architecture","text":""},{"location":"2.%20Android/12-cycle-de-vie/#cycle-de-vie-general-dune-application-android","title":"Cycle de vie g\u00e9n\u00e9ral d\u2019une application Android","text":""},{"location":"2.%20Android/12-cycle-de-vie/#concepts-fondamentaux","title":"Concepts fondamentaux","text":"<p>Une application Android est compos\u00e9e de diff\u00e9rents composants qui ont chacun leur propre cycle de vie, mais l\u2019\u00e9l\u00e9ment principal est l\u2019Activit\u00e9 (<code>Activity</code>)[1]. Une activit\u00e9 repr\u00e9sente un \u00e9cran de l\u2019application avec lequel l\u2019utilisateur peut interagir[1].</p> <p>Le cycle de vie d\u2019une activit\u00e9 s\u2019\u00e9tend de sa cr\u00e9ation \u00e0 sa destruction, moment o\u00f9 le syst\u00e8me r\u00e9cup\u00e8re ses ressources[1]. Comprendre ce cycle de vie est essentiel pour :</p> <ul> <li>\u00c9viter les crashs lors des interruptions (appels t\u00e9l\u00e9phoniques, changement d\u2019application)</li> <li>Optimiser l\u2019utilisation des ressources syst\u00e8me</li> <li>Pr\u00e9server les donn\u00e9es et l\u2019\u00e9tat de l\u2019application</li> <li>G\u00e9rer correctement les changements de configuration (rotation d\u2019\u00e9cran)[10]</li> </ul>"},{"location":"2.%20Android/12-cycle-de-vie/#etats-principaux-dune-activite","title":"\u00c9tats principaux d\u2019une activit\u00e9","text":"<p>Une activit\u00e9 peut se trouver dans quatre \u00e9tats principaux[14] :</p> <ul> <li>Active/Resumed : L\u2019activit\u00e9 est au premier plan et interactive</li> <li>En pause : Visible mais a perdu le focus</li> <li>Stopp\u00e9e : Non visible mais conserv\u00e9e en m\u00e9moire</li> <li>D\u00e9truite : L\u2019activit\u00e9 est termin\u00e9e</li> </ul> <p></p>"},{"location":"2.%20Android/12-cycle-de-vie/#methodes-du-cycle-de-vie","title":"M\u00e9thodes du cycle de vie","text":"<p>Les principales m\u00e9thodes appel\u00e9es lors des transitions entre \u00e9tats sont[10] :</p> <ol> <li><code>onCreate()</code> : Initialisation de l\u2019activit\u00e9</li> <li><code>onStart()</code> : L\u2019activit\u00e9 devient visible</li> <li><code>onResume()</code> : L\u2019activit\u00e9 devient interactive</li> <li><code>onPause()</code> : L\u2019activit\u00e9 perd le focus</li> <li><code>onStop()</code> : L\u2019activit\u00e9 n\u2019est plus visible</li> <li><code>onDestroy()</code> : L\u2019activit\u00e9 est d\u00e9truite</li> </ol>"},{"location":"2.%20Android/12-cycle-de-vie/#particularites-avec-jetpack-compose","title":"Particularit\u00e9s avec Jetpack Compose","text":""},{"location":"2.%20Android/12-cycle-de-vie/#approche-declarative","title":"Approche d\u00e9clarative","text":"<p>Jetpack Compose utilise une approche diff\u00e9rente du cycle de vie traditionnel[2]. Au lieu de g\u00e9rer directement les changements d\u2019\u00e9tat via des m\u00e9thodes de callback, Compose utilise un paradigme d\u00e9claratif[8].</p>"},{"location":"2.%20Android/12-cycle-de-vie/#gestion-de-letat","title":"Gestion de l\u2019\u00e9tat","text":"<p>Dans Compose, le cycle de vie est \u00e9troitement li\u00e9 \u00e0 la gestion de l\u2019\u00e9tat[12] :</p> <ul> <li>Les composables sont sans \u00e9tat (stateless) ou avec \u00e9tat (stateful)</li> <li>L\u2019\u00e9tat est g\u00e9r\u00e9 via des objets <code>State&lt;T&gt;</code> et la fonction <code>remember{}</code></li> <li>La recomposition se produit automatiquement lors des changements d\u2019\u00e9tat</li> </ul>"},{"location":"2.%20Android/12-cycle-de-vie/#effets-et-cycle-de-vie","title":"Effets et cycle de vie","text":"<p>Compose introduit des effets sp\u00e9cifiques pour g\u00e9rer les op\u00e9rations li\u00e9es au cycle de vie[12] :</p> <pre><code>@Composable\nfun MonComposable() {\n    // Effet ex\u00e9cut\u00e9 \u00e0 chaque recomposition\n    LaunchedEffect(key1) {\n        // Code \u00e0 ex\u00e9cuter\n    }\n\n    // Effet ex\u00e9cut\u00e9 uniquement \u00e0 la premi\u00e8re composition\n    DisposableEffect(key1) {\n        onDispose {\n            // Nettoyage des ressources\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/12-cycle-de-vie/#bonnes-pratiques","title":"Bonnes pratiques","text":"<p>Pour une application Compose efficace[4] :</p> <ul> <li>Privil\u00e9gier les composants sans \u00e9tat (stateless)</li> <li>\u00c9lever l\u2019\u00e9tat au niveau appropri\u00e9</li> <li>Utiliser les effets pour les op\u00e9rations ayant des effets secondaires</li> <li>\u00c9viter les effets secondaires dans les composables</li> <li>G\u00e9rer correctement la recomposition pour optimiser les performances</li> </ul> <p>En comprenant ces concepts, vous pourrez d\u00e9velopper des applications Android robustes qui g\u00e8rent correctement leur cycle de vie, que ce soit avec l\u2019approche traditionnelle ou avec Jetpack Compose.</p> <p>Citations: [1] https://developer.android.com/codelabs/basic-android-kotlin-compose-activity-lifecycle?hl=fr [2] https://appmaster.io/fr/blog/jetpack-compose-un-guide-du-debutant [3] https://www.weblineindia.com/fr/blog/android-app-development-lifecycle.html [4] https://appmaster.io/fr/blog/kotlin-avec-jetpack-compose-les-meilleures-pratiques [5] http://www.iro.umontreal.ca/~dift1155/cours/ift1155/communs/Cours/2P/C02_CycledeVie_2P.pdf [6] https://developer.android.com/jetpack/androidx/releases/lifecycle?hl=fr [7] https://developer.android.com/codelabs/basic-android-kotlin-training-activity-lifecycle?hl=fr [8] https://developer.android.com/develop/ui/compose/state?hl=fr [9] https://www.yeeply.com/fr/blog/developpement-applications-mobiles/cycle-de-vie-developpement-logiciels-mobiles/ [10] https://developer.android.com/guide/components/activities/activity-lifecycle?hl=fr [11] https://openclassrooms.com/fr/courses/8150246-developpez-votre-premiere-application-android/8256687-apprehendez-le-cycle-de-vie-d-une-application [12] https://www.editions-eni.fr/livre/jetpack-compose-developpez-des-interfaces-accessibles-et-modernes-pour-android-9782409039669/gestion-des-etats-et-des-effets [13] https://www.lirmm.fr/~fmichel/ens/android/cours/Android_lifecycle.pdf [14] https://mathias-seguy.developpez.com/tutoriels/android/comprendre-cyclevie-activite/</p>"},{"location":"2.%20Android/13-architecture/","title":"13. Architecture","text":""},{"location":"2.%20Android/13-architecture/#architecture-en-couches","title":"Architecture en couches","text":"<p>Une application Android moderne avec Jetpack Compose devrait suivre une architecture en couches distinctes :</p>"},{"location":"2.%20Android/13-architecture/#ui-layer-presentation","title":"UI Layer (Pr\u00e9sentation)","text":"<p>La couche UI est responsable d\u2019afficher les donn\u00e9es et de g\u00e9rer les interactions utilisateur. Avec Jetpack Compose, elle comprend :</p> <p>Composants principaux :</p> <ul> <li>Composables UI</li> <li>ViewModels</li> <li>UI State</li> <li>UI Events</li> </ul> <pre><code>@Composable\nfun MyScreen(\n    viewModel: MyViewModel = viewModel()\n) {\n    val uiState by viewModel.uiState.collectAsState()\n\n    Column {\n        // UI elements\n    }\n}\n</code></pre>"},{"location":"2.%20Android/13-architecture/#couche-du-domaine-domain-layer-optionnelle","title":"Couche du domaine (Domain Layer) (Optionnelle)","text":"<p>Cette couche interm\u00e9diaire contient la logique d\u2019affaires (logique m\u00e9tier, business logic) et fait le lien entre UI et Data :</p> <ul> <li>Cas d\u2019utilisation</li> <li>Mod\u00e8les de domaine</li> <li>Logique d\u2019affaires</li> </ul> <pre><code>class GetUserUseCase(\n    private val userRepository: UserRepository\n) {\n    suspend operator fun invoke(userId: String): User {\n        return userRepository.getUser(userId)\n    }\n}\n</code></pre>"},{"location":"2.%20Android/13-architecture/#couche-des-donnees-data-layer","title":"Couche des donn\u00e9es (Data Layer)","text":"<p>G\u00e8re les donn\u00e9es de l\u2019application :</p> <ul> <li>Repositories</li> <li>Data sources (API, base de donn\u00e9es)</li> <li>Mod\u00e8les de donn\u00e9es</li> </ul> <pre><code>class UserRepository(\n    private val api: ApiService,\n    private val database: AppDatabase\n) {\n    suspend fun getUser(id: String): User {\n        return database.userDao().getUser(id)\n            ?: api.fetchUser(id).also { user -&gt;\n                database.userDao().insert(user)\n            }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/13-architecture/#gestion-de-letat-avec-compose","title":"Gestion de l\u2019\u00e9tat avec Compose","text":""},{"location":"2.%20Android/13-architecture/#etat-ui","title":"\u00c9tat UI","text":"<p>L\u2019\u00e9tat UI est g\u00e9r\u00e9 via :</p> <ul> <li>L\u2019\u00e9l\u00e9vation de l\u2019\u00e9tat (State hoisting)</li> <li><code>ViewModel</code> avec <code>StateFlow</code>/<code>SharedFlow</code></li> <li><code>remember</code>/<code>rememberSaveable</code></li> </ul> <pre><code>class MyViewModel : ViewModel() {\n    private val _uiState = MutableStateFlow(MyUiState())\n    val uiState: StateFlow&lt;MyUiState&gt; = _uiState.asStateFlow()\n\n    fun handleEvent(event: MyUiEvent) {\n        // Update state based on events\n    }\n}\n</code></pre>"},{"location":"2.%20Android/13-architecture/#effets-secondaires","title":"Effets secondaires","text":"<p>Les effets sont g\u00e9r\u00e9s avec les API Compose :</p> <pre><code>@Composable\nfun MyScreen() {\n    LaunchedEffect(key1) {\n        // One-time setup\n    }\n\n    DisposableEffect(key1) {\n        onDispose {\n            // Cleanup\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/13-architecture/#navigation","title":"Navigation","text":"<p>La navigation est g\u00e9r\u00e9e par Navigation Compose :</p> <pre><code>@Composable\nfun AppNavigation() {\n    val navController = rememberNavController()\n\n    NavHost(navController, startDestination = \"home\") {\n        composable(\"home\") { HomeScreen() }\n        composable(\"details/{id}\") { backStackEntry -&gt;\n            DetailsScreen(backStackEntry.arguments?.getString(\"id\"))\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/13-architecture/#injection-de-dependances","title":"Injection de d\u00e9pendances","text":"<p>Hilt est recommand\u00e9 pour l\u2019injection de d\u00e9pendances :</p> <pre><code>@HiltViewModel\nclass MainViewModel @Inject constructor(\n    private val userRepository: UserRepository\n) : ViewModel()\n</code></pre>"},{"location":"2.%20Android/13-architecture/#bonnes-pratiques","title":"Bonnes pratiques","text":"<ol> <li>Unidirectional Data Flow (UDF)</li> </ol> <ul> <li>Les \u00e9v\u00e9nements UI remontent vers le ViewModel</li> <li>L\u2019\u00e9tat descend vers les composables UI</li> </ul> <ol> <li>State Hoisting</li> </ol> <ul> <li>S\u00e9parer l\u2019\u00e9tat de sa manipulation</li> <li>Remonter l\u2019\u00e9tat au niveau appropri\u00e9</li> </ul> <ol> <li>Single Source of Truth</li> </ol> <ul> <li>Une seule source de v\u00e9rit\u00e9 pour les donn\u00e9es</li> <li>Utilisation de Flow pour la r\u00e9activit\u00e9</li> </ul> <ol> <li>Composables sans \u00e9tat</li> </ol> <ul> <li>Pr\u00e9f\u00e9rer les composables sans \u00e9tat quand possible</li> <li>S\u00e9parer la logique de l\u2019affichage</li> </ul> <ol> <li>Modularisation</li> </ol> <ul> <li>Diviser l\u2019application en modules fonctionnels</li> <li>Utiliser les feature modules pour une meilleure scalabilit\u00e9</li> </ul> <p>Cette architecture permet de cr\u00e9er des applications maintenables, testables et \u00e9volutives avec Jetpack Compose.</p> <p>Citations: [1] https://www.geeksforgeeks.org/android-architecture/ [2] https://www.simform.com/blog/mobile-application-architecture/ [3] https://www.intelivita.com/blog/android-architecture-patterns/ [4] https://developer.android.com/topic/architecture?hl=en [5] https://w3r.one/fr/blog/mobile/android/architecture-android/comprendre-architecture-android-vie-ensemble-composants-modeles [6] https://www.zucisystems.com/be/blog/limportance-de-larchitecture-mobile-concevoir-des-applications-pour-reussir/ [7] https://appmaster.io/fr/blog/kotlin-avec-jetpack-compose-les-meilleures-pratiques [8] https://developer.android.com/jetpack/androidx/releases/lifecycle?hl=fr</p>"},{"location":"2.%20Android/14-navigation/","title":"14. Navigation dans Jetpack Compose","text":"<p>D\u00e9p\u00f4t Git</p>"},{"location":"2.%20Android/14-navigation/#exemple-avec-des-boutons-pour-naviguer-entre-les-composables","title":"Exemple avec des boutons pour naviguer entre les composables","text":""},{"location":"2.%20Android/14-navigation/#configuration-initiale","title":"Configuration initiale","text":"<p>Ajoutez d\u2019abord la d\u00e9pendance dans le fichier <code>build.gradle</code> :</p> <pre><code>dependencies {\n    implementation(\"androidx.navigation:navigation-compose:2.8.3\")\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#structure-de-lexemple","title":"Structure de l\u2019exemple","text":"<p>Nous allons cr\u00e9er une application avec trois \u00e9crans :</p> <ul> <li>\u00c9cran d\u2019accueil</li> <li>\u00c9cran de profil</li> <li>\u00c9cran de param\u00e8tres</li> </ul>"},{"location":"2.%20Android/14-navigation/#definition-des-routes","title":"D\u00e9finition des routes","text":"<pre><code>sealed class Screen(val route: String) {\n    object Home : Screen(\"home\")\n    object Profile : Screen(\"profile\")\n    object Settings : Screen(\"settings\")\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#creation-des-composables-decran","title":"Cr\u00e9ation des composables d\u2019\u00e9cran","text":"<pre><code>@Composable\nfun HomeScreen(navController: NavController) {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(\"\u00c9cran d'accueil\")\n        Button(onClick = { navController.navigate(Screen.Profile.route) }) {\n            Text(\"Aller au profil\")\n        }\n        Button(onClick = { navController.navigate(Screen.Settings.route) }) {\n            Text(\"Aller aux param\u00e8tres\")\n        }\n    }\n}\n\n@Composable\nfun ProfileScreen(navController: NavController) {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(\"\u00c9cran de profil\")\n        Button(onClick = { navController.navigate(Screen.Settings.route) }) {\n            Text(\"Aller aux param\u00e8tres\")\n        }\n        Button(onClick = { navController.popBackStack() }) {\n            Text(\"Retour\")\n        }\n    }\n}\n\n@Composable\nfun SettingsScreen(navController: NavController) {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(\"\u00c9cran des param\u00e8tres\")\n        Button(onClick = { navController.popBackStack() }) {\n            Text(\"Retour\")\n        }\n        Button(\n            onClick = {\n                navController.navigate(Screen.Home.route) {\n                    popUpTo(Screen.Home.route) { inclusive = true }\n                }\n            }\n        ) {\n            Text(\"Retour \u00e0 l'accueil\")\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#configuration-de-la-navigation","title":"Configuration de la navigation","text":"<pre><code>@Composable\nfun AppNavigation() {\n    val navController = rememberNavController()\n\n    NavHost(\n        navController = navController,\n        startDestination = Screen.Home.route\n    ) {\n        composable(Screen.Home.route) {\n            HomeScreen(navController)\n        }\n        composable(Screen.Profile.route) {\n            ProfileScreen(navController)\n        }\n        composable(Screen.Settings.route) {\n            SettingsScreen(navController)\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#integration-dans-mainactivity","title":"Int\u00e9gration dans MainActivity","text":"<pre><code>class MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MonTheme {\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colorScheme.background\n                ) {\n                    AppNavigation()\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#fonctionnalites-demontrees","title":"Fonctionnalit\u00e9s d\u00e9montr\u00e9es","text":"<ol> <li>Navigation de base : Navigation entre les \u00e9crans avec <code>navigate()</code>[1]</li> <li>Navigation arri\u00e8re : Utilisation de <code>popBackStack()</code>[2]</li> <li>Navigation avec effacement de pile : Utilisation de <code>popUpTo</code> pour retourner \u00e0 l\u2019accueil[2]</li> </ol>"},{"location":"2.%20Android/14-navigation/#points-importants","title":"Points importants","text":"<ul> <li>Le <code>NavController</code> g\u00e8re l\u2019\u00e9tat de la navigation[1]</li> <li>Le <code>NavHost</code> d\u00e9finit le graphe de navigation[1][2]</li> <li>Chaque \u00e9cran re\u00e7oit le <code>NavController</code> pour g\u00e9rer la navigation[3]</li> <li><code>popBackStack()</code> permet de revenir \u00e0 l\u2019\u00e9cran pr\u00e9c\u00e9dent[2]</li> <li><code>popUpTo</code> avec <code>inclusive = true</code> permet de remonter jusqu\u2019\u00e0 une destination en l\u2019incluant dans la suppression[5]</li> </ul> <p>Cet exemple montre les bases de la navigation dans Jetpack Compose tout en restant simple et compr\u00e9hensible pour des d\u00e9butants.</p> <p>Citations: [1] https://proandroiddev.com/android-jetpack-compose-navigation-1cdfc488b891?gi=d31e0323b815 [2] https://saurabhjadhavblogs.com/ultimate-guide-to-jetpack-compose-navigation [3] https://blog.kotlin-academy.com/mastery-navigation-in-jetpack-compose-db00b0a0ef75?gi=007e50484ede [4] https://developer.android.com/develop/ui/compose/navigation [5] https://proandroiddev.com/mastering-navigation-in-jetpack-compose-a-guide-to-using-the-inclusive-attribute-b66916a5f15c?gi=401071494588 [6] https://developer.android.com/codelabs/basic-android-kotlin-compose-navigation [7] https://developer.android.com/develop/ui/compose/navigation?hl=fr [8] https://www.youtube.com/watch?v=AIC_OFQ1r3k</p>"},{"location":"2.%20Android/14-navigation/#exemple-avec-un-menu-dans-la-barre-superieure-de-lapplication","title":"Exemple avec un menu dans la barre sup\u00e9rieure de l\u2019application","text":""},{"location":"2.%20Android/14-navigation/#structure-de-lapplication","title":"Structure de l\u2019application","text":"<pre><code>sealed class Screen(val route: String, val title: String) {\n    object Home : Screen(\"home\", \"Accueil\")\n    object Profile : Screen(\"profile\", \"Profil\")\n    object Settings : Screen(\"settings\", \"Param\u00e8tres\")\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#configuration-de-la-navigation_1","title":"Configuration de la navigation","text":"<pre><code>@Composable\nfun AppNavigation() {\n    val navController = rememberNavController()\n\n    Scaffold(\n        topBar = {\n            TopAppBarWithMenu(navController)\n        }\n    ) { paddingValues -&gt;\n        NavHost(\n            navController = navController,\n            startDestination = Screen.Home.route,\n            modifier = Modifier.padding(paddingValues)\n        ) {\n            composable(Screen.Home.route) {\n                HomeScreen()\n            }\n            composable(Screen.Profile.route) {\n                ProfileScreen()\n            }\n            composable(Screen.Settings.route) {\n                SettingsScreen()\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#topbar-avec-menu","title":"TopBar avec menu","text":"<pre><code>@Composable\nfun TopAppBarWithMenu(navController: NavController) {\n    var showMenu by remember { mutableStateOf(false) }\n\n    TopAppBar(\n        title = { Text(\"Mon Application\") },\n        actions = {\n            IconButton(onClick = { showMenu = !showMenu }) {\n                Icon(Icons.Default.MoreVert, contentDescription = \"Menu\")\n            }\n            DropdownMenu(\n                expanded = showMenu,\n                onDismissRequest = { showMenu = false }\n            ) {\n                DropdownMenuItem(\n                    text = { Text(Screen.Home.title) },\n                    onClick = {\n                        navController.navigate(Screen.Home.route) {\n                            popUpTo(Screen.Home.route) { inclusive = true }\n                        }\n                        showMenu = false\n                    }\n                )\n                DropdownMenuItem(\n                    text = { Text(Screen.Profile.title) },\n                    onClick = {\n                        navController.navigate(Screen.Profile.route)\n                        showMenu = false\n                    }\n                )\n                DropdownMenuItem(\n                    text = { Text(Screen.Settings.title) },\n                    onClick = {\n                        navController.navigate(Screen.Settings.route)\n                        showMenu = false\n                    }\n                )\n            }\n        }\n    )\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#ecrans-de-lapplication","title":"\u00c9crans de l\u2019application","text":"<pre><code>@Composable\nfun HomeScreen() {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(\"\u00c9cran d'accueil\")\n    }\n}\n\n@Composable\nfun ProfileScreen() {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(\"\u00c9cran de profil\")\n    }\n}\n\n@Composable\nfun SettingsScreen() {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(\"\u00c9cran des param\u00e8tres\")\n    }\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#points-importants-a-noter","title":"Points importants \u00e0 noter","text":"<ol> <li> <p>Le menu est g\u00e9r\u00e9 par un \u00e9tat <code>showMenu</code> qui contr\u00f4le l\u2019affichage du <code>DropdownMenu</code></p> </li> <li> <p>Chaque item du menu utilise <code>navController.navigate()</code> pour la navigation</p> </li> <li> <p>Pour l\u2019\u00e9cran d\u2019accueil, nous utilisons <code>popUpTo</code> avec <code>inclusive = true</code> pour \u00e9viter l\u2019accumulation d\u2019\u00e9crans dans la    pile de navigation</p> </li> <li> <p>Le <code>Scaffold</code> g\u00e8re automatiquement le padding n\u00e9cessaire pour \u00e9viter que le contenu ne soit cach\u00e9 derri\u00e8re la TopBar</p> </li> <li> <p>Les \u00e9crans sont simples mais peuvent \u00eatre enrichis selon les besoins de l\u2019application</p> </li> </ol> <p>Cette impl\u00e9mentation offre une navigation claire et intuitive via un menu d\u00e9roulant dans la barre sup\u00e9rieure de l\u2019application.</p> <p>Citations: [1] https://saurabhjadhavblogs.com/ultimate-guide-to-jetpack-compose-navigation [2] https://proandroiddev.com/android-jetpack-compose-navigation-1cdfc488b891?gi=d31e0323b815 [3] https://proandroiddev.com/implement-bottom-bar-navigation-in-jetpack-compose-b530b1cd9ee2?gi=5c1ab6e9d027 [4] https://proandroiddev.com/mastering-navigation-in-jetpack-compose-a-guide-to-using-the-inclusive-attribute-b66916a5f15c?gi=401071494588 [5] https://blog.kotlin-academy.com/mastery-navigation-in-jetpack-compose-db00b0a0ef75?gi=007e50484ede [6] https://developer.android.com/codelabs/basic-android-kotlin-compose-navigation [7] https://www.youtube.com/watch?v=JLICaBEiJS0 [8] https://developer.android.com/develop/ui/compose/navigation</p>"},{"location":"2.%20Android/14-navigation/#exemple-avec-des-icones-dans-la-barre-inferieure","title":"Exemple avec des ic\u00f4nes dans la barre inf\u00e9rieure","text":""},{"location":"2.%20Android/14-navigation/#structure-de-lapplication_1","title":"Structure de l\u2019application","text":"<pre><code>sealed class Screen(\n    val route: String,\n    val title: String,\n    val icon: ImageVector\n) {\n    object Home : Screen(\n        route = \"home\",\n        title = \"Accueil\",\n        icon = Icons.Default.Home\n    )\n    object Profile : Screen(\n        route = \"profile\",\n        title = \"Profil\",\n        icon = Icons.Default.Person\n    )\n    object Settings : Screen(\n        route = \"settings\",\n        title = \"Param\u00e8tres\",\n        icon = Icons.Default.Settings\n    )\n\n    companion object {\n        val items = listOf(Home, Profile, Settings)\n    }\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#configuration-de-la-navigation_2","title":"Configuration de la navigation","text":"<pre><code>@Composable\nfun AppNavigation() {\n    val navController = rememberNavController()\n    val navBackStackEntry by navController.currentBackStackEntryAsState()\n    val currentRoute = navBackStackEntry?.destination?.route\n\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                title = { Text(\"Mon Application\") }\n            )\n        },\n        bottomBar = {\n            NavigationBar {\n                Screen.items.forEach { screen -&gt;\n                    NavigationBarItem(\n                        icon = {\n                            Icon(screen.icon, contentDescription = screen.title)\n                        },\n                        label = { Text(screen.title) },\n                        selected = currentRoute == screen.route,\n                        onClick = {\n                            navController.navigate(screen.route) {\n                                // \u00c9vite l'empilement des destinations\n                                popUpTo(navController.graph.startDestinationId) {\n                                    saveState = true\n                                }\n                                // \u00c9vite les copies multiples de la m\u00eame destination\n                                launchSingleTop = true\n                                // Restaure l'\u00e9tat lors de la reselection\n                                restoreState = true\n                            }\n                        }\n                    )\n                }\n            }\n        }\n    ) { paddingValues -&gt;\n        NavHost(\n            navController = navController,\n            startDestination = Screen.Home.route,\n            modifier = Modifier.padding(paddingValues)\n        ) {\n            composable(Screen.Home.route) {\n                HomeScreen()\n            }\n            composable(Screen.Profile.route) {\n                ProfileScreen()\n            }\n            composable(Screen.Settings.route) {\n                SettingsScreen()\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#ecrans-de-lapplication_1","title":"\u00c9crans de l\u2019application","text":"<pre><code>@Composable\nfun HomeScreen() {\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(16.dp),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Icon(\n            Icons.Default.Home,\n            contentDescription = null,\n            modifier = Modifier.size(48.dp)\n        )\n        Spacer(modifier = Modifier.height(16.dp))\n        Text(\n            \"\u00c9cran d'accueil\",\n            style = MaterialTheme.typography.headlineMedium\n        )\n    }\n}\n\n@Composable\nfun ProfileScreen() {\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(16.dp),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Icon(\n            Icons.Default.Person,\n            contentDescription = null,\n            modifier = Modifier.size(48.dp)\n        )\n        Spacer(modifier = Modifier.height(16.dp))\n        Text(\n            \"\u00c9cran de profil\",\n            style = MaterialTheme.typography.headlineMedium\n        )\n    }\n}\n\n@Composable\nfun SettingsScreen() {\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(16.dp),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Icon(\n            Icons.Default.Settings,\n            contentDescription = null,\n            modifier = Modifier.size(48.dp)\n        )\n        Spacer(modifier = Modifier.height(16.dp))\n        Text(\n            \"\u00c9cran des param\u00e8tres\",\n            style = MaterialTheme.typography.headlineMedium\n        )\n    }\n}\n</code></pre>"},{"location":"2.%20Android/14-navigation/#points-importants_1","title":"Points importants","text":"<ol> <li> <p>La <code>NavigationBar</code> utilise <code>NavigationBarItem</code> pour chaque destination</p> </li> <li> <p>L\u2019\u00e9tat <code>selected</code> est g\u00e9r\u00e9 en comparant la route courante avec la route de l\u2019item</p> </li> <li> <p>La navigation inclut des options importantes :</p> <ul> <li><code>launchSingleTop</code> \u00e9vite les copies multiples</li> <li><code>popUpTo</code> avec <code>saveState</code> g\u00e8re correctement la pile de navigation</li> <li><code>restoreState</code> pr\u00e9serve l\u2019\u00e9tat lors de la reselection</li> </ul> </li> <li> <p>Les ic\u00f4nes et les titres sont d\u00e9finis dans la classe scell\u00e9e <code>Screen</code></p> </li> <li> <p>Le <code>currentBackStackEntryAsState()</code> permet de suivre la destination actuelle</p> </li> </ol> <p>Cette impl\u00e9mentation offre une navigation fluide et intuitive avec une barre de navigation inf\u00e9rieure, couramment utilis\u00e9e dans les applications mobiles modernes. Les utilisateurs peuvent facilement basculer entre les diff\u00e9rentes sections de l\u2019application en touchant les ic\u00f4nes correspondantes.</p>"},{"location":"2.%20Android/15-intentions/","title":"15. Intentions","text":"<p>D\u00e9p\u00f4t Git</p>"},{"location":"2.%20Android/15-intentions/#structure-generale","title":"Structure G\u00e9n\u00e9rale","text":"<p>Le code d\u00e9finit une activit\u00e9 principale (<code>MainActivity</code>) qui contient deux composants Composable pour d\u00e9marrer d\u2019autres activit\u00e9s.</p>"},{"location":"2.%20Android/15-intentions/#mainactivity","title":"MainActivity","text":"<pre><code>class MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            Column {\n                StartOtherActivity()\n                StartOtherActivityWithValue()\n            }\n        }\n    }\n}\n</code></pre> <ul> <li>C\u2019est l\u2019activit\u00e9 principale qui h\u00e9rite de <code>ComponentActivity</code></li> <li>Dans <code>onCreate</code>, elle d\u00e9finit son contenu avec deux composants Composable dans une <code>Column</code></li> </ul>"},{"location":"2.%20Android/15-intentions/#startotheractivity","title":"StartOtherActivity","text":"<pre><code>@Composable\nfun StartOtherActivity() {\n    val context = LocalContext.current\n    Column(\n        modifier = Modifier.fillMaxWidth(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(text = \"\u00c9cran Principal\")\n        Spacer(modifier = Modifier.height(16.dp))\n        Button(onClick = {\n            val intent = Intent(context, SecondActivity::class.java)\n            context.startActivity(intent)\n        }) {\n            Text(\"Aller \u00e0 l'\u00e9cran secondaire\")\n        }\n    }\n}\n</code></pre> <ul> <li>Ce composant affiche un titre et un bouton</li> <li>Quand on clique sur le bouton, il cr\u00e9e un <code>Intent</code> pour d\u00e9marrer <code>SecondActivity</code></li> <li>L\u2019<code>Intent</code> est un m\u00e9canisme Android pour d\u00e9marrer une autre activit\u00e9</li> </ul>"},{"location":"2.%20Android/15-intentions/#startotheractivitywithvalue","title":"StartOtherActivityWithValue","text":"<pre><code>@Composable\nfun StartOtherActivityWithValue() {\n    val context = LocalContext.current\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Button(onClick = {\n            val intent = Intent(context, ThirdActivity::class.java)\n            intent.putExtra(\"buttonValue\", 1)\n            context.startActivity(intent)\n        }) {\n            Text(\"Bouton 1\")\n        }\n        // Deuxi\u00e8me bouton similaire avec valeur 2\n    }\n}\n</code></pre> <ul> <li>Ce composant affiche deux boutons</li> <li>Chaque bouton d\u00e9marre <code>ThirdActivity</code> en passant une valeur diff\u00e9rente</li> <li><code>putExtra</code> permet de passer des donn\u00e9es \u00e0 l\u2019activit\u00e9 suivante</li> </ul>"},{"location":"2.%20Android/15-intentions/#points-importants-a-noter","title":"Points Importants \u00e0 Noter","text":"<ol> <li>L\u2019utilisation de <code>LocalContext.current</code> pour obtenir le contexte n\u00e9cessaire \u00e0 la cr\u00e9ation d\u2019<code>Intent</code></li> <li>La diff\u00e9rence entre un simple changement d\u2019activit\u00e9 et un changement avec passage de donn\u00e9es</li> <li>L\u2019organisation du layout avec <code>Column</code>, <code>Spacer</code>, et les modificateurs pour l\u2019alignement</li> <li>L\u2019utilisation de composants Jetpack Compose (<code>Button</code>, <code>Text</code>, etc.)</li> </ol> <p>Je vais expliquer ce code qui repr\u00e9sente une activit\u00e9 secondaire dans l\u2019application.</p>"},{"location":"2.%20Android/15-intentions/#structure-de-secondactivity","title":"Structure de SecondActivity","text":""},{"location":"2.%20Android/15-intentions/#la-classe-secondactivity","title":"La Classe SecondActivity","text":"<pre><code>class SecondActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            SecondScreen(\n                onNavigateBack = {\n                    finish()\n                }\n            )\n        }\n    }\n}\n</code></pre> <ul> <li>Cette classe h\u00e9rite de <code>ComponentActivity</code>, comme l\u2019activit\u00e9 principale</li> <li>Dans <code>onCreate</code>, elle d\u00e9finit son contenu avec le composant <code>SecondScreen</code></li> <li>La fonction <code>finish()</code> est pass\u00e9e comme callback pour g\u00e9rer le retour \u00e0 l\u2019\u00e9cran pr\u00e9c\u00e9dent</li> <li><code>finish()</code> est une m\u00e9thode Android qui termine l\u2019activit\u00e9 courante et retourne \u00e0 l\u2019activit\u00e9 pr\u00e9c\u00e9dente</li> </ul>"},{"location":"2.%20Android/15-intentions/#le-composant-secondscreen","title":"Le Composant SecondScreen","text":"<pre><code>@Composable\nfun SecondScreen(onNavigateBack: () -&gt; Unit) {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(text = \"\u00c9cran Secondaire\")\n        Spacer(modifier = Modifier.height(16.dp))\n        Button(onClick = onNavigateBack) {\n            Text(\"Retourner \u00e0 l'\u00e9cran principal\")\n        }\n    }\n}\n</code></pre> <ul> <li>Le composant prend un param\u00e8tre <code>onNavigateBack</code> qui est une fonction lambda sans param\u00e8tres (<code>() -&gt; Unit</code>)</li> <li>L\u2019interface est simple avec :<ul> <li>Un titre \u201c\u00c9cran Secondaire\u201d</li> <li>Un espace vertical de 16dp</li> <li>Un bouton pour revenir \u00e0 l\u2019\u00e9cran principal</li> </ul> </li> <li>Le layout utilise une <code>Column</code> centr\u00e9e horizontalement et verticalement</li> <li>Le modificateur <code>fillMaxSize()</code> fait occuper tout l\u2019espace disponible \u00e0 la colonne</li> </ul>"},{"location":"2.%20Android/15-intentions/#points-importants-a-noter_1","title":"Points Importants \u00e0 Noter","text":"<ol> <li> <p>Gestion de la Navigation</p> <ul> <li>La navigation retour est g\u00e9r\u00e9e proprement avec <code>finish()</code></li> <li>Le callback est pass\u00e9 du niveau activit\u00e9 au composant Composable</li> </ul> </li> <li> <p>Structure du Code</p> <ul> <li>S\u00e9paration claire entre l\u2019activit\u00e9 et l\u2019interface utilisateur</li> <li>Utilisation de composants r\u00e9utilisables</li> </ul> </li> <li> <p>Bonnes Pratiques</p> <ul> <li>Le composant <code>SecondScreen</code> est d\u00e9coupl\u00e9 de l\u2019activit\u00e9</li> <li>La navigation est g\u00e9r\u00e9e via un callback plut\u00f4t qu\u2019une r\u00e9f\u00e9rence directe \u00e0 l\u2019activit\u00e9</li> </ul> </li> <li> <p>Interface Utilisateur</p> <ul> <li>Layout simple et centr\u00e9</li> <li>Utilisation appropri\u00e9e des espacements</li> <li>Interface claire et intuitive</li> </ul> </li> </ol>"},{"location":"2.%20Android/15-intentions/#structure-de-thirdactivity","title":"Structure de ThirdActivity","text":""},{"location":"2.%20Android/15-intentions/#la-classe-thirdactivity","title":"La Classe ThirdActivity","text":"<pre><code>class ThirdActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        val buttonValue = intent.getIntExtra(\"buttonValue\", 0)\n\n        setContent {\n            ThirdScreen(\n                buttonValue = buttonValue,\n                onNavigateBack = {\n                    finish()\n                }\n            )\n        }\n    }\n}\n</code></pre> <ul> <li>Cette activit\u00e9 r\u00e9cup\u00e8re une valeur pass\u00e9e via l\u2019<code>Intent</code> avec <code>getIntExtra</code></li> <li>Le second param\u00e8tre <code>0</code> est la valeur par d\u00e9faut si aucune valeur n\u2019est trouv\u00e9e</li> <li>La valeur r\u00e9cup\u00e9r\u00e9e est pass\u00e9e au composant <code>ThirdScreen</code></li> </ul>"},{"location":"2.%20Android/15-intentions/#le-composant-thirdscreen","title":"Le Composant ThirdScreen","text":"<pre><code>@Composable\nfun ThirdScreen(\n    buttonValue: Int,\n    onNavigateBack: () -&gt; Unit\n) {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Text(text = \"Valeur re\u00e7ue : $buttonValue\")\n        Spacer(modifier = Modifier.height(16.dp))\n        Button(onClick = onNavigateBack) {\n            Text(\"Retour\")\n        }\n    }\n}\n</code></pre> <ul> <li>Le composant prend deux param\u00e8tres :<ul> <li><code>buttonValue</code> : la valeur re\u00e7ue de l\u2019activit\u00e9 pr\u00e9c\u00e9dente</li> <li><code>onNavigateBack</code> : le callback pour retourner \u00e0 l\u2019\u00e9cran pr\u00e9c\u00e9dent</li> </ul> </li> <li>L\u2019interface affiche la valeur re\u00e7ue et un bouton de retour</li> </ul>"},{"location":"2.%20Android/15-intentions/#points-importants-a-noter_2","title":"Points Importants \u00e0 Noter","text":"<ol> <li> <p>Passage de Donn\u00e9es</p> <ul> <li>Utilisation de <code>getIntExtra</code> pour r\u00e9cup\u00e9rer la donn\u00e9e pass\u00e9e</li> <li>Correspond au <code>putExtra</code> vu dans le premier fichier</li> <li>Important de sp\u00e9cifier une valeur par d\u00e9faut</li> </ul> </li> <li> <p>Cycle de Communication</p> <ul> <li>L\u2019activit\u00e9 principale envoie une valeur</li> <li>La troisi\u00e8me activit\u00e9 la r\u00e9cup\u00e8re</li> <li>La valeur est affich\u00e9e \u00e0 l\u2019\u00e9cran</li> </ul> </li> <li> <p>Architecture</p> <ul> <li>S\u00e9paration claire entre la logique (r\u00e9cup\u00e9ration des donn\u00e9es) et l\u2019affichage</li> <li>Le composant Composable reste pur et r\u00e9utilisable</li> </ul> </li> <li> <p>String Template</p> <ul> <li>Utilisation de <code>$buttonValue</code> pour ins\u00e9rer la valeur dans le texte</li> <li>Exemple simple d\u2019interpolation de cha\u00eenes en Kotlin</li> </ul> </li> </ol> <p>Ce code compl\u00e8te bien les deux premiers fichiers en montrant comment :</p> <ul> <li>Recevoir des donn\u00e9es d\u2019une autre activit\u00e9</li> <li>Afficher ces donn\u00e9es dans l\u2019interface</li> <li>Maintenir une architecture propre et modulaire</li> </ul>"},{"location":"2.%20Android/16-intentions-vs-navigation/","title":"16. Intentions vs. navigation","text":""},{"location":"2.%20Android/16-intentions-vs-navigation/#intent-vs-navigation","title":"<code>Intent</code> vs. <code>Navigation</code>","text":""},{"location":"2.%20Android/16-intentions-vs-navigation/#navigation-compose","title":"Navigation Compose","text":""},{"location":"2.%20Android/16-intentions-vs-navigation/#avantages","title":"Avantages","text":"<ul> <li>S\u00e9curit\u00e9 de type : V\u00e9rifications \u00e0 la compilation, r\u00e9duisant les erreurs potentielles[8]</li> <li>Int\u00e9gration native avec Jetpack Compose et l\u2019architecture moderne d\u2019Android[8]</li> <li>Code plus lisible et maintenable, moins de code r\u00e9p\u00e9titif[8]</li> <li>Approche d\u00e9clarative qui simplifie la navigation[8]</li> </ul>"},{"location":"2.%20Android/16-intentions-vs-navigation/#inconvenients","title":"Inconv\u00e9nients","text":"<ul> <li>Limit\u00e9 aux types de donn\u00e9es de base pour les arguments de navigation[6]</li> <li>N\u00e9cessite l\u2019ajout d\u2019une d\u00e9pendance suppl\u00e9mentaire[5]</li> </ul>"},{"location":"2.%20Android/16-intentions-vs-navigation/#navigation-par-intent","title":"Navigation par Intent","text":""},{"location":"2.%20Android/16-intentions-vs-navigation/#avantages_1","title":"Avantages","text":"<ul> <li>Flexibilit\u00e9 : Utilisable dans n\u2019importe quel projet Android[8]</li> <li>Familiarit\u00e9 : Documentation extensive et support communautaire[8]</li> <li>Capacit\u00e9 \u00e0 passer des objets Parcelable facilement[6]</li> <li>Int\u00e9gration facile avec d\u2019autres composants Android[8]</li> </ul>"},{"location":"2.%20Android/16-intentions-vs-navigation/#inconvenients_1","title":"Inconv\u00e9nients","text":"<ul> <li>Pas de v\u00e9rification \u00e0 la compilation : Risques d\u2019erreurs \u00e0 l\u2019ex\u00e9cution[8]</li> <li>Plus verbeux : N\u00e9cessite plus de code pour la gestion de la navigation[8]</li> <li>Gestion manuelle du cycle de vie et de l\u2019\u00e9tat[8]</li> </ul>"},{"location":"2.%20Android/16-intentions-vs-navigation/#recommandation","title":"Recommandation","text":"<p>Pour une nouvelle application utilisant Jetpack Compose :</p> <ul> <li>Privil\u00e9gier la Navigation Compose pour la navigation interne \u00e0 l\u2019application[8]</li> <li>Utiliser les Intents uniquement pour :<ul> <li>La navigation vers d\u2019autres applications</li> <li>Les cas n\u00e9cessitant le passage d\u2019objets complexes</li> <li>L\u2019int\u00e9gration avec des composants Android traditionnels</li> </ul> </li> </ul> <p>Cette approche hybride permet de b\u00e9n\u00e9ficier des avantages de la Navigation Compose tout en gardant la flexibilit\u00e9 des Intents quand n\u00e9cessaire[8].</p> <p>Citations: [1] https://stackoverflow.com/questions/65088035/how-to-navigate-from-a-composable-to-an-activity-in-jetpack-compose [2] https://guides.peruzal.com/v1/android-guides/navigation/intents/ [3] https://www.geeksforgeeks.org/start-a-new-activity-using-intent-in-android-using-jetpack-compose/ [4] https://developer.android.com/develop/ui/compose/navigation [5] https://developer.android.com/develop/ui/compose/navigation?hl=fr [6] https://betterprogramming.pub/intent-based-compose-navigation-1087634b984a [7] https://blog.kotlin-academy.com/mastery-navigation-in-jetpack-compose-db00b0a0ef75?gi=007e50484ede [8] https://rommansabbir.com/typesafe-navigation-or-traditional-intent-passing</p>"},{"location":"2.%20Android/17-images-distantes/","title":"17. Affichage d\u2019images et de vid\u00e9os distantes","text":"<p>D\u00e9p\u00f4t Git</p>"},{"location":"2.%20Android/17-images-distantes/#affichage-dune-image-depuis-une-url-dans-jetpack-compose","title":"Affichage d\u2019une image depuis une URL dans Jetpack Compose","text":""},{"location":"2.%20Android/17-images-distantes/#prerequis","title":"Pr\u00e9requis","text":"<p>Pour afficher une image depuis une URL, nous devons :</p> <ol> <li>Ajouter la d\u00e9pendance Coil dans le fichier <code>build.gradle</code> (niveau app)</li> <li>Ajouter la permission Internet dans le <code>AndroidManifest.xml</code></li> </ol> <pre><code>// build.gradle\ndependencies {\n    implementation(\"io.coil-kt:coil-compose:2.5.0\")\n}\n</code></pre> <pre><code>&lt;!-- AndroidManifest.xml --&gt;\n&lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;\n</code></pre>"},{"location":"2.%20Android/17-images-distantes/#composable-de-base","title":"Composable de base","text":"<p>Voici un exemple simple d\u2019utilisation :</p> <pre><code>import androidx.compose.foundation.layout.size\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport coil.compose.AsyncImage\n\n@Composable\nfun ImageDistante() {\n    AsyncImage(\n        model = \"https://example.com/image.jpg\",\n        contentDescription = \"Description de l'image\",\n        modifier = Modifier.size(200.dp)\n    )\n}\n</code></pre>"},{"location":"2.%20Android/17-images-distantes/#version-plus-complete-avec-gestion-du-chargement","title":"Version plus compl\u00e8te avec gestion du chargement","text":"<pre><code>import androidx.compose.foundation.layout.*\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.unit.dp\nimport coil.compose.SubcomposeAsyncImage\n\n@Composable\nfun ImageDistanteAvancee() {\n    SubcomposeAsyncImage(\n        model = \"https://example.com/image.jpg\",\n        contentDescription = \"Description de l'image\",\n        modifier = Modifier.size(200.dp),\n        contentScale = ContentScale.Fit,\n        loading = {\n            Box(\n                modifier = Modifier.fillMaxSize(),\n                contentAlignment = Alignment.Center\n            ) {\n                CircularProgressIndicator()\n            }\n        },\n        error = {\n            // Vous pouvez personnaliser l'affichage en cas d'erreur\n            Box(\n                modifier = Modifier.fillMaxSize(),\n                contentAlignment = Alignment.Center\n            ) {\n                Text(\"Erreur de chargement\")\n            }\n        }\n    )\n}\n</code></pre>"},{"location":"2.%20Android/17-images-distantes/#points-importants","title":"Points importants","text":"<ol> <li> <p>Coil est une biblioth\u00e8que de chargement d\u2019images pour Android, optimis\u00e9e pour Kotlin et Jetpack Compose.</p> </li> <li> <p>Deux composables principaux sont disponibles :</p> <ul> <li><code>AsyncImage</code> : version simple pour les cas basiques</li> <li><code>SubcomposeAsyncImage</code> : version avanc\u00e9e permettant de g\u00e9rer les \u00e9tats de chargement</li> </ul> </li> <li> <p>Les param\u00e8tres principaux :</p> <ul> <li><code>model</code> : l\u2019URL de l\u2019image</li> <li><code>contentDescription</code> : description pour l\u2019accessibilit\u00e9</li> <li><code>modifier</code> : pour personnaliser la taille et l\u2019apparence</li> <li><code>contentScale</code> : pour d\u00e9finir comment l\u2019image doit s\u2019adapter \u00e0 son conteneur</li> </ul> </li> <li> <p>Pour tester, voici quelques URLs d\u2019images libres de droits :</p> </li> </ol> <pre><code>\"https://picsum.photos/200\"  // Image al\u00e9atoire de 200x200\n\"https://via.placeholder.com/200\"  // Image placeholder de 200x200\n</code></pre>"},{"location":"2.%20Android/17-images-distantes/#exemple-dutilisation-complet","title":"Exemple d\u2019utilisation complet","text":"<pre><code>@Composable\nfun ExempleImageScreen() {\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(16.dp),\n        verticalArrangement = Arrangement.spacedBy(16.dp)\n    ) {\n        // Image simple\n        AsyncImage(\n            model = \"https://picsum.photos/200\",\n            contentDescription = \"Image al\u00e9atoire\",\n            modifier = Modifier.size(200.dp)\n        )\n\n        // Image avec gestion du chargement\n        SubcomposeAsyncImage(\n            model = \"https://picsum.photos/300\",\n            contentDescription = \"Image al\u00e9atoire avec loading\",\n            modifier = Modifier.size(300.dp),\n            loading = { CircularProgressIndicator() }\n        )\n    }\n}\n</code></pre>"},{"location":"2.%20Android/17-images-distantes/#integration-de-videos-dans-jetpack-compose","title":"Int\u00e9gration de vid\u00e9os dans Jetpack Compose","text":""},{"location":"2.%20Android/17-images-distantes/#lecture-de-videos-mp4-avec-exoplayer","title":"Lecture de vid\u00e9os MP4 avec ExoPlayer","text":"<p>Pour lire des vid\u00e9os MP4, nous utiliserons ExoPlayer, qui est recommand\u00e9 par Google pour la lecture de m\u00e9dias sur Android.</p> <p>Premi\u00e8rement, ajoutez les d\u00e9pendances dans <code>build.gradle</code> :</p> <pre><code>dependencies {\n    implementation(\"androidx.media3:media3-exoplayer:1.2.0\")\n    implementation(\"androidx.media3:media3-ui:1.2.0\")\n}\n</code></pre> <p>Ensuite, cr\u00e9ez le composable pour la vid\u00e9o :</p> <pre><code>import androidx.compose.runtime.*\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.viewinterop.AndroidView\nimport androidx.media3.common.MediaItem\nimport androidx.media3.common.Player\nimport androidx.media3.exoplayer.ExoPlayer\nimport androidx.media3.ui.PlayerView\n\n@Composable\nfun VideoPlayer(\n    videoUrl: String,\n    modifier: Modifier = Modifier\n) {\n    val context = LocalContext.current\n\n    // Cr\u00e9ation de l'ExoPlayer\n    val exoPlayer = remember {\n        ExoPlayer.Builder(context).build().apply {\n            setMediaItem(MediaItem.fromUri(videoUrl))\n            prepare()\n        }\n    }\n\n    // Gestion du cycle de vie\n    DisposableEffect(Unit) {\n        onDispose {\n            exoPlayer.release()\n        }\n    }\n\n    // Interface utilisateur du lecteur\n    AndroidView(\n        factory = { context -&gt;\n            PlayerView(context).apply {\n                player = exoPlayer\n            }\n        },\n        modifier = modifier\n    )\n}\n</code></pre> <p>Utilisation :</p> <pre><code>@Composable\nfun VideoPlayerScreen() {\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(16.dp)\n    ) {\n        // Exemple avec une vid\u00e9o MP4\n        VideoPlayer(\n            videoUrl = \"https://example.com/video.mp4\",\n            modifier = Modifier\n                .fillMaxWidth()\n                .aspectRatio(16f / 9f)\n        )\n    }\n}\n</code></pre>"},{"location":"2.%20Android/17-images-distantes/#version-complete-avec-gestion-des-erreurs-et-du-chargement","title":"Version compl\u00e8te avec gestion des erreurs et du chargement","text":"<pre><code>@Composable\nfun VideoPlayerAvance(\n    videoUrl: String,\n    modifier: Modifier = Modifier\n) {\n    var isLoading by remember { mutableStateOf(true) }\n    var hasError by remember { mutableStateOf(false) }\n    val context = LocalContext.current\n\n    val exoPlayer = remember {\n        ExoPlayer.Builder(context).build().apply {\n            addListener(object : Player.Listener {\n                override fun onPlaybackStateChanged(state: Int) {\n                    when (state) {\n                        Player.STATE_READY -&gt; isLoading = false\n                        Player.STATE_ENDED -&gt; { /* G\u00e9rer la fin */\n                        }\n                        Player.STATE_BUFFERING -&gt; isLoading = true\n                        Player.STATE_IDLE -&gt; { /* \u00c9tat initial */\n                        }\n                    }\n                }\n\n                override fun onPlayerError(error: PlaybackException) {\n                    hasError = true\n                    isLoading = false\n                }\n            })\n\n            setMediaItem(MediaItem.fromUri(videoUrl))\n            prepare()\n        }\n    }\n\n    DisposableEffect(Unit) {\n        onDispose {\n            exoPlayer.release()\n        }\n    }\n\n    Box(modifier = modifier) {\n        AndroidView(\n            factory = { context -&gt;\n                PlayerView(context).apply {\n                    player = exoPlayer\n                }\n            },\n            modifier = Modifier.matchParentSize()\n        )\n\n        if (isLoading) {\n            CircularProgressIndicator(\n                modifier = Modifier.align(Alignment.Center)\n            )\n        }\n\n        if (hasError) {\n            Text(\n                text = \"Erreur de lecture de la vid\u00e9o\",\n                modifier = Modifier.align(Alignment.Center),\n                color = Color.Red\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"2.%20Android/17-images-distantes/#points-importants_1","title":"Points importants","text":"<ol> <li> <p>Il faut ajouter la permission Internet dans le <code>AndroidManifest.xml</code> :    <pre><code>&lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;\n</code></pre></p> </li> <li> <p>Pour ExoPlayer :</p> <ul> <li>C\u2019est la solution recommand\u00e9e par Google</li> <li>Supporte de nombreux formats vid\u00e9o</li> <li>G\u00e8re automatiquement la mise en cache</li> <li>Offre des contr\u00f4les de lecture avanc\u00e9s</li> </ul> </li> <li> <p>Consid\u00e9rations de performances :</p> <ul> <li>Les vid\u00e9os consomment beaucoup de ressources</li> <li>Important de bien g\u00e9rer le cycle de vie</li> <li>Pr\u00e9voir la gestion du cache et de la bande passante</li> </ul> </li> </ol>"}]}